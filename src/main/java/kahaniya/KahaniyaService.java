/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kahaniya;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class KahaniyaService {

  public interface Iface {

    public String jar_shutdown() throws org.apache.thrift.TException;

    public String create_genre(String name) throws org.apache.thrift.TException;

    public String edit_genre(String old_name, String new_name) throws org.apache.thrift.TException;

    public String delete_genre(String name) throws org.apache.thrift.TException;

    public String list_genres() throws org.apache.thrift.TException;

    public String create_language(String name) throws org.apache.thrift.TException;

    public String edit_language(String old_name, String new_name) throws org.apache.thrift.TException;

    public String delete_language(String name) throws org.apache.thrift.TException;

    public String list_languages() throws org.apache.thrift.TException;

    public String create_user(String id, String full_name, String user_name, String email, String mobile_number, String mobile_dial_code, String dob, String gender, String address, String bio, String genres, String languages, int privilege, int status, int time_created) throws org.apache.thrift.TException;

    public String edit_user_basic_info(String id, String full_name, String gender, String dob) throws org.apache.thrift.TException;

    public String edit_user_contact_details(String id, String email, String mobile_number) throws org.apache.thrift.TException;

    public String edit_user_security_details(String id, String user_name) throws org.apache.thrift.TException;

    public String edit_user_languages(String id, String languages) throws org.apache.thrift.TException;

    public String edit_user_genres(String id, String genres) throws org.apache.thrift.TException;

    public String follow_user(String user_id_1, String user_id_2, int time) throws org.apache.thrift.TException;

    public String deactivate_user(String user_id) throws org.apache.thrift.TException;

    public String create_or_edit_series(String series_id, String user_id, String title, String title_id, String tag_line, String feature_image, String genre, String language, String keywords, String copyrights, String dd_img, String dd_summary, int series_type, int time_created, int is_edit) throws org.apache.thrift.TException;

    public String create_or_edit_review(String series_id, String review_id, String data, String user_id, int time_created, int is_edit) throws org.apache.thrift.TException;

    public String create_or_edit_chapter(String chapter_id, String series_id, String series_type, String user_id, String title_id, String title, String feat_image, int time_created, int free_or_paid, int is_edit) throws org.apache.thrift.TException;

    public String subscribe_series(String series_id, String user_id, int time) throws org.apache.thrift.TException;

    public String favourite_chapter(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException;

    public String bookmark_chapter(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException;

    public String rate_chapter(String chapter_id, String series_id, int rating, String user_id, int time) throws org.apache.thrift.TException;

    public String recored_chapter_view(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException;

    public String get_feed(String titleType, String feedType, String filter, int prev_cnt, int count, String user_id, String genre, String lang, String s_user_id) throws org.apache.thrift.TException;

    public String create_or_edit_comment(String chapter_id, String comment_id, String content, String parent_cmnt_id, String user_id, int time, int is_edit) throws org.apache.thrift.TException;

    public String delete_comment(String comment_id) throws org.apache.thrift.TException;

    public String get_comments(String chapter_id, int prev_cnt, int count) throws org.apache.thrift.TException;

    public String get_all_items(String item_type, int prev_cnt, int count) throws org.apache.thrift.TException;

    public String get_item_details(String item_type, String item_id) throws org.apache.thrift.TException;

    public String get_subscriptions_for_user(String user_id, int prev_cnt, int count) throws org.apache.thrift.TException;

    public String get_top_authors(int prev_cnt, int count, String user_id) throws org.apache.thrift.TException;

    public String get_stats() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void jar_shutdown(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.jar_shutdown_call> resultHandler) throws org.apache.thrift.TException;

    public void create_genre(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_genre_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_genre(String old_name, String new_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_genre_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_genre(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_genre_call> resultHandler) throws org.apache.thrift.TException;

    public void list_genres(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.list_genres_call> resultHandler) throws org.apache.thrift.TException;

    public void create_language(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_language_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_language(String old_name, String new_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_language_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_language(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_language_call> resultHandler) throws org.apache.thrift.TException;

    public void list_languages(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.list_languages_call> resultHandler) throws org.apache.thrift.TException;

    public void create_user(String id, String full_name, String user_name, String email, String mobile_number, String mobile_dial_code, String dob, String gender, String address, String bio, String genres, String languages, int privilege, int status, int time_created, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_user_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_user_basic_info(String id, String full_name, String gender, String dob, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_user_basic_info_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_user_contact_details(String id, String email, String mobile_number, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_user_contact_details_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_user_security_details(String id, String user_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_user_security_details_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_user_languages(String id, String languages, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_user_languages_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_user_genres(String id, String genres, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_user_genres_call> resultHandler) throws org.apache.thrift.TException;

    public void follow_user(String user_id_1, String user_id_2, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.follow_user_call> resultHandler) throws org.apache.thrift.TException;

    public void deactivate_user(String user_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deactivate_user_call> resultHandler) throws org.apache.thrift.TException;

    public void create_or_edit_series(String series_id, String user_id, String title, String title_id, String tag_line, String feature_image, String genre, String language, String keywords, String copyrights, String dd_img, String dd_summary, int series_type, int time_created, int is_edit, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_or_edit_series_call> resultHandler) throws org.apache.thrift.TException;

    public void create_or_edit_review(String series_id, String review_id, String data, String user_id, int time_created, int is_edit, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_or_edit_review_call> resultHandler) throws org.apache.thrift.TException;

    public void create_or_edit_chapter(String chapter_id, String series_id, String series_type, String user_id, String title_id, String title, String feat_image, int time_created, int free_or_paid, int is_edit, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_or_edit_chapter_call> resultHandler) throws org.apache.thrift.TException;

    public void subscribe_series(String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.subscribe_series_call> resultHandler) throws org.apache.thrift.TException;

    public void favourite_chapter(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.favourite_chapter_call> resultHandler) throws org.apache.thrift.TException;

    public void bookmark_chapter(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.bookmark_chapter_call> resultHandler) throws org.apache.thrift.TException;

    public void rate_chapter(String chapter_id, String series_id, int rating, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.rate_chapter_call> resultHandler) throws org.apache.thrift.TException;

    public void recored_chapter_view(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.recored_chapter_view_call> resultHandler) throws org.apache.thrift.TException;

    public void get_feed(String titleType, String feedType, String filter, int prev_cnt, int count, String user_id, String genre, String lang, String s_user_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_feed_call> resultHandler) throws org.apache.thrift.TException;

    public void create_or_edit_comment(String chapter_id, String comment_id, String content, String parent_cmnt_id, String user_id, int time, int is_edit, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_or_edit_comment_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_comment(String comment_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_comment_call> resultHandler) throws org.apache.thrift.TException;

    public void get_comments(String chapter_id, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_comments_call> resultHandler) throws org.apache.thrift.TException;

    public void get_all_items(String item_type, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_items_call> resultHandler) throws org.apache.thrift.TException;

    public void get_item_details(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_item_details_call> resultHandler) throws org.apache.thrift.TException;

    public void get_subscriptions_for_user(String user_id, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_subscriptions_for_user_call> resultHandler) throws org.apache.thrift.TException;

    public void get_top_authors(int prev_cnt, int count, String user_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_top_authors_call> resultHandler) throws org.apache.thrift.TException;

    public void get_stats(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_stats_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String jar_shutdown() throws org.apache.thrift.TException
    {
      send_jar_shutdown();
      return recv_jar_shutdown();
    }

    public void send_jar_shutdown() throws org.apache.thrift.TException
    {
      jar_shutdown_args args = new jar_shutdown_args();
      sendBase("jar_shutdown", args);
    }

    public String recv_jar_shutdown() throws org.apache.thrift.TException
    {
      jar_shutdown_result result = new jar_shutdown_result();
      receiveBase(result, "jar_shutdown");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "jar_shutdown failed: unknown result");
    }

    public String create_genre(String name) throws org.apache.thrift.TException
    {
      send_create_genre(name);
      return recv_create_genre();
    }

    public void send_create_genre(String name) throws org.apache.thrift.TException
    {
      create_genre_args args = new create_genre_args();
      args.setName(name);
      sendBase("create_genre", args);
    }

    public String recv_create_genre() throws org.apache.thrift.TException
    {
      create_genre_result result = new create_genre_result();
      receiveBase(result, "create_genre");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_genre failed: unknown result");
    }

    public String edit_genre(String old_name, String new_name) throws org.apache.thrift.TException
    {
      send_edit_genre(old_name, new_name);
      return recv_edit_genre();
    }

    public void send_edit_genre(String old_name, String new_name) throws org.apache.thrift.TException
    {
      edit_genre_args args = new edit_genre_args();
      args.setOld_name(old_name);
      args.setNew_name(new_name);
      sendBase("edit_genre", args);
    }

    public String recv_edit_genre() throws org.apache.thrift.TException
    {
      edit_genre_result result = new edit_genre_result();
      receiveBase(result, "edit_genre");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_genre failed: unknown result");
    }

    public String delete_genre(String name) throws org.apache.thrift.TException
    {
      send_delete_genre(name);
      return recv_delete_genre();
    }

    public void send_delete_genre(String name) throws org.apache.thrift.TException
    {
      delete_genre_args args = new delete_genre_args();
      args.setName(name);
      sendBase("delete_genre", args);
    }

    public String recv_delete_genre() throws org.apache.thrift.TException
    {
      delete_genre_result result = new delete_genre_result();
      receiveBase(result, "delete_genre");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_genre failed: unknown result");
    }

    public String list_genres() throws org.apache.thrift.TException
    {
      send_list_genres();
      return recv_list_genres();
    }

    public void send_list_genres() throws org.apache.thrift.TException
    {
      list_genres_args args = new list_genres_args();
      sendBase("list_genres", args);
    }

    public String recv_list_genres() throws org.apache.thrift.TException
    {
      list_genres_result result = new list_genres_result();
      receiveBase(result, "list_genres");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "list_genres failed: unknown result");
    }

    public String create_language(String name) throws org.apache.thrift.TException
    {
      send_create_language(name);
      return recv_create_language();
    }

    public void send_create_language(String name) throws org.apache.thrift.TException
    {
      create_language_args args = new create_language_args();
      args.setName(name);
      sendBase("create_language", args);
    }

    public String recv_create_language() throws org.apache.thrift.TException
    {
      create_language_result result = new create_language_result();
      receiveBase(result, "create_language");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_language failed: unknown result");
    }

    public String edit_language(String old_name, String new_name) throws org.apache.thrift.TException
    {
      send_edit_language(old_name, new_name);
      return recv_edit_language();
    }

    public void send_edit_language(String old_name, String new_name) throws org.apache.thrift.TException
    {
      edit_language_args args = new edit_language_args();
      args.setOld_name(old_name);
      args.setNew_name(new_name);
      sendBase("edit_language", args);
    }

    public String recv_edit_language() throws org.apache.thrift.TException
    {
      edit_language_result result = new edit_language_result();
      receiveBase(result, "edit_language");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_language failed: unknown result");
    }

    public String delete_language(String name) throws org.apache.thrift.TException
    {
      send_delete_language(name);
      return recv_delete_language();
    }

    public void send_delete_language(String name) throws org.apache.thrift.TException
    {
      delete_language_args args = new delete_language_args();
      args.setName(name);
      sendBase("delete_language", args);
    }

    public String recv_delete_language() throws org.apache.thrift.TException
    {
      delete_language_result result = new delete_language_result();
      receiveBase(result, "delete_language");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_language failed: unknown result");
    }

    public String list_languages() throws org.apache.thrift.TException
    {
      send_list_languages();
      return recv_list_languages();
    }

    public void send_list_languages() throws org.apache.thrift.TException
    {
      list_languages_args args = new list_languages_args();
      sendBase("list_languages", args);
    }

    public String recv_list_languages() throws org.apache.thrift.TException
    {
      list_languages_result result = new list_languages_result();
      receiveBase(result, "list_languages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "list_languages failed: unknown result");
    }

    public String create_user(String id, String full_name, String user_name, String email, String mobile_number, String mobile_dial_code, String dob, String gender, String address, String bio, String genres, String languages, int privilege, int status, int time_created) throws org.apache.thrift.TException
    {
      send_create_user(id, full_name, user_name, email, mobile_number, mobile_dial_code, dob, gender, address, bio, genres, languages, privilege, status, time_created);
      return recv_create_user();
    }

    public void send_create_user(String id, String full_name, String user_name, String email, String mobile_number, String mobile_dial_code, String dob, String gender, String address, String bio, String genres, String languages, int privilege, int status, int time_created) throws org.apache.thrift.TException
    {
      create_user_args args = new create_user_args();
      args.setId(id);
      args.setFull_name(full_name);
      args.setUser_name(user_name);
      args.setEmail(email);
      args.setMobile_number(mobile_number);
      args.setMobile_dial_code(mobile_dial_code);
      args.setDob(dob);
      args.setGender(gender);
      args.setAddress(address);
      args.setBio(bio);
      args.setGenres(genres);
      args.setLanguages(languages);
      args.setPrivilege(privilege);
      args.setStatus(status);
      args.setTime_created(time_created);
      sendBase("create_user", args);
    }

    public String recv_create_user() throws org.apache.thrift.TException
    {
      create_user_result result = new create_user_result();
      receiveBase(result, "create_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_user failed: unknown result");
    }

    public String edit_user_basic_info(String id, String full_name, String gender, String dob) throws org.apache.thrift.TException
    {
      send_edit_user_basic_info(id, full_name, gender, dob);
      return recv_edit_user_basic_info();
    }

    public void send_edit_user_basic_info(String id, String full_name, String gender, String dob) throws org.apache.thrift.TException
    {
      edit_user_basic_info_args args = new edit_user_basic_info_args();
      args.setId(id);
      args.setFull_name(full_name);
      args.setGender(gender);
      args.setDob(dob);
      sendBase("edit_user_basic_info", args);
    }

    public String recv_edit_user_basic_info() throws org.apache.thrift.TException
    {
      edit_user_basic_info_result result = new edit_user_basic_info_result();
      receiveBase(result, "edit_user_basic_info");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_user_basic_info failed: unknown result");
    }

    public String edit_user_contact_details(String id, String email, String mobile_number) throws org.apache.thrift.TException
    {
      send_edit_user_contact_details(id, email, mobile_number);
      return recv_edit_user_contact_details();
    }

    public void send_edit_user_contact_details(String id, String email, String mobile_number) throws org.apache.thrift.TException
    {
      edit_user_contact_details_args args = new edit_user_contact_details_args();
      args.setId(id);
      args.setEmail(email);
      args.setMobile_number(mobile_number);
      sendBase("edit_user_contact_details", args);
    }

    public String recv_edit_user_contact_details() throws org.apache.thrift.TException
    {
      edit_user_contact_details_result result = new edit_user_contact_details_result();
      receiveBase(result, "edit_user_contact_details");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_user_contact_details failed: unknown result");
    }

    public String edit_user_security_details(String id, String user_name) throws org.apache.thrift.TException
    {
      send_edit_user_security_details(id, user_name);
      return recv_edit_user_security_details();
    }

    public void send_edit_user_security_details(String id, String user_name) throws org.apache.thrift.TException
    {
      edit_user_security_details_args args = new edit_user_security_details_args();
      args.setId(id);
      args.setUser_name(user_name);
      sendBase("edit_user_security_details", args);
    }

    public String recv_edit_user_security_details() throws org.apache.thrift.TException
    {
      edit_user_security_details_result result = new edit_user_security_details_result();
      receiveBase(result, "edit_user_security_details");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_user_security_details failed: unknown result");
    }

    public String edit_user_languages(String id, String languages) throws org.apache.thrift.TException
    {
      send_edit_user_languages(id, languages);
      return recv_edit_user_languages();
    }

    public void send_edit_user_languages(String id, String languages) throws org.apache.thrift.TException
    {
      edit_user_languages_args args = new edit_user_languages_args();
      args.setId(id);
      args.setLanguages(languages);
      sendBase("edit_user_languages", args);
    }

    public String recv_edit_user_languages() throws org.apache.thrift.TException
    {
      edit_user_languages_result result = new edit_user_languages_result();
      receiveBase(result, "edit_user_languages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_user_languages failed: unknown result");
    }

    public String edit_user_genres(String id, String genres) throws org.apache.thrift.TException
    {
      send_edit_user_genres(id, genres);
      return recv_edit_user_genres();
    }

    public void send_edit_user_genres(String id, String genres) throws org.apache.thrift.TException
    {
      edit_user_genres_args args = new edit_user_genres_args();
      args.setId(id);
      args.setGenres(genres);
      sendBase("edit_user_genres", args);
    }

    public String recv_edit_user_genres() throws org.apache.thrift.TException
    {
      edit_user_genres_result result = new edit_user_genres_result();
      receiveBase(result, "edit_user_genres");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_user_genres failed: unknown result");
    }

    public String follow_user(String user_id_1, String user_id_2, int time) throws org.apache.thrift.TException
    {
      send_follow_user(user_id_1, user_id_2, time);
      return recv_follow_user();
    }

    public void send_follow_user(String user_id_1, String user_id_2, int time) throws org.apache.thrift.TException
    {
      follow_user_args args = new follow_user_args();
      args.setUser_id_1(user_id_1);
      args.setUser_id_2(user_id_2);
      args.setTime(time);
      sendBase("follow_user", args);
    }

    public String recv_follow_user() throws org.apache.thrift.TException
    {
      follow_user_result result = new follow_user_result();
      receiveBase(result, "follow_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "follow_user failed: unknown result");
    }

    public String deactivate_user(String user_id) throws org.apache.thrift.TException
    {
      send_deactivate_user(user_id);
      return recv_deactivate_user();
    }

    public void send_deactivate_user(String user_id) throws org.apache.thrift.TException
    {
      deactivate_user_args args = new deactivate_user_args();
      args.setUser_id(user_id);
      sendBase("deactivate_user", args);
    }

    public String recv_deactivate_user() throws org.apache.thrift.TException
    {
      deactivate_user_result result = new deactivate_user_result();
      receiveBase(result, "deactivate_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deactivate_user failed: unknown result");
    }

    public String create_or_edit_series(String series_id, String user_id, String title, String title_id, String tag_line, String feature_image, String genre, String language, String keywords, String copyrights, String dd_img, String dd_summary, int series_type, int time_created, int is_edit) throws org.apache.thrift.TException
    {
      send_create_or_edit_series(series_id, user_id, title, title_id, tag_line, feature_image, genre, language, keywords, copyrights, dd_img, dd_summary, series_type, time_created, is_edit);
      return recv_create_or_edit_series();
    }

    public void send_create_or_edit_series(String series_id, String user_id, String title, String title_id, String tag_line, String feature_image, String genre, String language, String keywords, String copyrights, String dd_img, String dd_summary, int series_type, int time_created, int is_edit) throws org.apache.thrift.TException
    {
      create_or_edit_series_args args = new create_or_edit_series_args();
      args.setSeries_id(series_id);
      args.setUser_id(user_id);
      args.setTitle(title);
      args.setTitle_id(title_id);
      args.setTag_line(tag_line);
      args.setFeature_image(feature_image);
      args.setGenre(genre);
      args.setLanguage(language);
      args.setKeywords(keywords);
      args.setCopyrights(copyrights);
      args.setDd_img(dd_img);
      args.setDd_summary(dd_summary);
      args.setSeries_type(series_type);
      args.setTime_created(time_created);
      args.setIs_edit(is_edit);
      sendBase("create_or_edit_series", args);
    }

    public String recv_create_or_edit_series() throws org.apache.thrift.TException
    {
      create_or_edit_series_result result = new create_or_edit_series_result();
      receiveBase(result, "create_or_edit_series");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_or_edit_series failed: unknown result");
    }

    public String create_or_edit_review(String series_id, String review_id, String data, String user_id, int time_created, int is_edit) throws org.apache.thrift.TException
    {
      send_create_or_edit_review(series_id, review_id, data, user_id, time_created, is_edit);
      return recv_create_or_edit_review();
    }

    public void send_create_or_edit_review(String series_id, String review_id, String data, String user_id, int time_created, int is_edit) throws org.apache.thrift.TException
    {
      create_or_edit_review_args args = new create_or_edit_review_args();
      args.setSeries_id(series_id);
      args.setReview_id(review_id);
      args.setData(data);
      args.setUser_id(user_id);
      args.setTime_created(time_created);
      args.setIs_edit(is_edit);
      sendBase("create_or_edit_review", args);
    }

    public String recv_create_or_edit_review() throws org.apache.thrift.TException
    {
      create_or_edit_review_result result = new create_or_edit_review_result();
      receiveBase(result, "create_or_edit_review");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_or_edit_review failed: unknown result");
    }

    public String create_or_edit_chapter(String chapter_id, String series_id, String series_type, String user_id, String title_id, String title, String feat_image, int time_created, int free_or_paid, int is_edit) throws org.apache.thrift.TException
    {
      send_create_or_edit_chapter(chapter_id, series_id, series_type, user_id, title_id, title, feat_image, time_created, free_or_paid, is_edit);
      return recv_create_or_edit_chapter();
    }

    public void send_create_or_edit_chapter(String chapter_id, String series_id, String series_type, String user_id, String title_id, String title, String feat_image, int time_created, int free_or_paid, int is_edit) throws org.apache.thrift.TException
    {
      create_or_edit_chapter_args args = new create_or_edit_chapter_args();
      args.setChapter_id(chapter_id);
      args.setSeries_id(series_id);
      args.setSeries_type(series_type);
      args.setUser_id(user_id);
      args.setTitle_id(title_id);
      args.setTitle(title);
      args.setFeat_image(feat_image);
      args.setTime_created(time_created);
      args.setFree_or_paid(free_or_paid);
      args.setIs_edit(is_edit);
      sendBase("create_or_edit_chapter", args);
    }

    public String recv_create_or_edit_chapter() throws org.apache.thrift.TException
    {
      create_or_edit_chapter_result result = new create_or_edit_chapter_result();
      receiveBase(result, "create_or_edit_chapter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_or_edit_chapter failed: unknown result");
    }

    public String subscribe_series(String series_id, String user_id, int time) throws org.apache.thrift.TException
    {
      send_subscribe_series(series_id, user_id, time);
      return recv_subscribe_series();
    }

    public void send_subscribe_series(String series_id, String user_id, int time) throws org.apache.thrift.TException
    {
      subscribe_series_args args = new subscribe_series_args();
      args.setSeries_id(series_id);
      args.setUser_id(user_id);
      args.setTime(time);
      sendBase("subscribe_series", args);
    }

    public String recv_subscribe_series() throws org.apache.thrift.TException
    {
      subscribe_series_result result = new subscribe_series_result();
      receiveBase(result, "subscribe_series");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "subscribe_series failed: unknown result");
    }

    public String favourite_chapter(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException
    {
      send_favourite_chapter(chapter_id, series_id, user_id, time);
      return recv_favourite_chapter();
    }

    public void send_favourite_chapter(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException
    {
      favourite_chapter_args args = new favourite_chapter_args();
      args.setChapter_id(chapter_id);
      args.setSeries_id(series_id);
      args.setUser_id(user_id);
      args.setTime(time);
      sendBase("favourite_chapter", args);
    }

    public String recv_favourite_chapter() throws org.apache.thrift.TException
    {
      favourite_chapter_result result = new favourite_chapter_result();
      receiveBase(result, "favourite_chapter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "favourite_chapter failed: unknown result");
    }

    public String bookmark_chapter(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException
    {
      send_bookmark_chapter(chapter_id, series_id, user_id, time);
      return recv_bookmark_chapter();
    }

    public void send_bookmark_chapter(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException
    {
      bookmark_chapter_args args = new bookmark_chapter_args();
      args.setChapter_id(chapter_id);
      args.setSeries_id(series_id);
      args.setUser_id(user_id);
      args.setTime(time);
      sendBase("bookmark_chapter", args);
    }

    public String recv_bookmark_chapter() throws org.apache.thrift.TException
    {
      bookmark_chapter_result result = new bookmark_chapter_result();
      receiveBase(result, "bookmark_chapter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bookmark_chapter failed: unknown result");
    }

    public String rate_chapter(String chapter_id, String series_id, int rating, String user_id, int time) throws org.apache.thrift.TException
    {
      send_rate_chapter(chapter_id, series_id, rating, user_id, time);
      return recv_rate_chapter();
    }

    public void send_rate_chapter(String chapter_id, String series_id, int rating, String user_id, int time) throws org.apache.thrift.TException
    {
      rate_chapter_args args = new rate_chapter_args();
      args.setChapter_id(chapter_id);
      args.setSeries_id(series_id);
      args.setRating(rating);
      args.setUser_id(user_id);
      args.setTime(time);
      sendBase("rate_chapter", args);
    }

    public String recv_rate_chapter() throws org.apache.thrift.TException
    {
      rate_chapter_result result = new rate_chapter_result();
      receiveBase(result, "rate_chapter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rate_chapter failed: unknown result");
    }

    public String recored_chapter_view(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException
    {
      send_recored_chapter_view(chapter_id, series_id, user_id, time);
      return recv_recored_chapter_view();
    }

    public void send_recored_chapter_view(String chapter_id, String series_id, String user_id, int time) throws org.apache.thrift.TException
    {
      recored_chapter_view_args args = new recored_chapter_view_args();
      args.setChapter_id(chapter_id);
      args.setSeries_id(series_id);
      args.setUser_id(user_id);
      args.setTime(time);
      sendBase("recored_chapter_view", args);
    }

    public String recv_recored_chapter_view() throws org.apache.thrift.TException
    {
      recored_chapter_view_result result = new recored_chapter_view_result();
      receiveBase(result, "recored_chapter_view");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recored_chapter_view failed: unknown result");
    }

    public String get_feed(String titleType, String feedType, String filter, int prev_cnt, int count, String user_id, String genre, String lang, String s_user_id) throws org.apache.thrift.TException
    {
      send_get_feed(titleType, feedType, filter, prev_cnt, count, user_id, genre, lang, s_user_id);
      return recv_get_feed();
    }

    public void send_get_feed(String titleType, String feedType, String filter, int prev_cnt, int count, String user_id, String genre, String lang, String s_user_id) throws org.apache.thrift.TException
    {
      get_feed_args args = new get_feed_args();
      args.setTitleType(titleType);
      args.setFeedType(feedType);
      args.setFilter(filter);
      args.setPrev_cnt(prev_cnt);
      args.setCount(count);
      args.setUser_id(user_id);
      args.setGenre(genre);
      args.setLang(lang);
      args.setS_user_id(s_user_id);
      sendBase("get_feed", args);
    }

    public String recv_get_feed() throws org.apache.thrift.TException
    {
      get_feed_result result = new get_feed_result();
      receiveBase(result, "get_feed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feed failed: unknown result");
    }

    public String create_or_edit_comment(String chapter_id, String comment_id, String content, String parent_cmnt_id, String user_id, int time, int is_edit) throws org.apache.thrift.TException
    {
      send_create_or_edit_comment(chapter_id, comment_id, content, parent_cmnt_id, user_id, time, is_edit);
      return recv_create_or_edit_comment();
    }

    public void send_create_or_edit_comment(String chapter_id, String comment_id, String content, String parent_cmnt_id, String user_id, int time, int is_edit) throws org.apache.thrift.TException
    {
      create_or_edit_comment_args args = new create_or_edit_comment_args();
      args.setChapter_id(chapter_id);
      args.setComment_id(comment_id);
      args.setContent(content);
      args.setParent_cmnt_id(parent_cmnt_id);
      args.setUser_id(user_id);
      args.setTime(time);
      args.setIs_edit(is_edit);
      sendBase("create_or_edit_comment", args);
    }

    public String recv_create_or_edit_comment() throws org.apache.thrift.TException
    {
      create_or_edit_comment_result result = new create_or_edit_comment_result();
      receiveBase(result, "create_or_edit_comment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_or_edit_comment failed: unknown result");
    }

    public String delete_comment(String comment_id) throws org.apache.thrift.TException
    {
      send_delete_comment(comment_id);
      return recv_delete_comment();
    }

    public void send_delete_comment(String comment_id) throws org.apache.thrift.TException
    {
      delete_comment_args args = new delete_comment_args();
      args.setComment_id(comment_id);
      sendBase("delete_comment", args);
    }

    public String recv_delete_comment() throws org.apache.thrift.TException
    {
      delete_comment_result result = new delete_comment_result();
      receiveBase(result, "delete_comment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_comment failed: unknown result");
    }

    public String get_comments(String chapter_id, int prev_cnt, int count) throws org.apache.thrift.TException
    {
      send_get_comments(chapter_id, prev_cnt, count);
      return recv_get_comments();
    }

    public void send_get_comments(String chapter_id, int prev_cnt, int count) throws org.apache.thrift.TException
    {
      get_comments_args args = new get_comments_args();
      args.setChapter_id(chapter_id);
      args.setPrev_cnt(prev_cnt);
      args.setCount(count);
      sendBase("get_comments", args);
    }

    public String recv_get_comments() throws org.apache.thrift.TException
    {
      get_comments_result result = new get_comments_result();
      receiveBase(result, "get_comments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_comments failed: unknown result");
    }

    public String get_all_items(String item_type, int prev_cnt, int count) throws org.apache.thrift.TException
    {
      send_get_all_items(item_type, prev_cnt, count);
      return recv_get_all_items();
    }

    public void send_get_all_items(String item_type, int prev_cnt, int count) throws org.apache.thrift.TException
    {
      get_all_items_args args = new get_all_items_args();
      args.setItem_type(item_type);
      args.setPrev_cnt(prev_cnt);
      args.setCount(count);
      sendBase("get_all_items", args);
    }

    public String recv_get_all_items() throws org.apache.thrift.TException
    {
      get_all_items_result result = new get_all_items_result();
      receiveBase(result, "get_all_items");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_items failed: unknown result");
    }

    public String get_item_details(String item_type, String item_id) throws org.apache.thrift.TException
    {
      send_get_item_details(item_type, item_id);
      return recv_get_item_details();
    }

    public void send_get_item_details(String item_type, String item_id) throws org.apache.thrift.TException
    {
      get_item_details_args args = new get_item_details_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      sendBase("get_item_details", args);
    }

    public String recv_get_item_details() throws org.apache.thrift.TException
    {
      get_item_details_result result = new get_item_details_result();
      receiveBase(result, "get_item_details");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_item_details failed: unknown result");
    }

    public String get_subscriptions_for_user(String user_id, int prev_cnt, int count) throws org.apache.thrift.TException
    {
      send_get_subscriptions_for_user(user_id, prev_cnt, count);
      return recv_get_subscriptions_for_user();
    }

    public void send_get_subscriptions_for_user(String user_id, int prev_cnt, int count) throws org.apache.thrift.TException
    {
      get_subscriptions_for_user_args args = new get_subscriptions_for_user_args();
      args.setUser_id(user_id);
      args.setPrev_cnt(prev_cnt);
      args.setCount(count);
      sendBase("get_subscriptions_for_user", args);
    }

    public String recv_get_subscriptions_for_user() throws org.apache.thrift.TException
    {
      get_subscriptions_for_user_result result = new get_subscriptions_for_user_result();
      receiveBase(result, "get_subscriptions_for_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_subscriptions_for_user failed: unknown result");
    }

    public String get_top_authors(int prev_cnt, int count, String user_id) throws org.apache.thrift.TException
    {
      send_get_top_authors(prev_cnt, count, user_id);
      return recv_get_top_authors();
    }

    public void send_get_top_authors(int prev_cnt, int count, String user_id) throws org.apache.thrift.TException
    {
      get_top_authors_args args = new get_top_authors_args();
      args.setPrev_cnt(prev_cnt);
      args.setCount(count);
      args.setUser_id(user_id);
      sendBase("get_top_authors", args);
    }

    public String recv_get_top_authors() throws org.apache.thrift.TException
    {
      get_top_authors_result result = new get_top_authors_result();
      receiveBase(result, "get_top_authors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_top_authors failed: unknown result");
    }

    public String get_stats() throws org.apache.thrift.TException
    {
      send_get_stats();
      return recv_get_stats();
    }

    public void send_get_stats() throws org.apache.thrift.TException
    {
      get_stats_args args = new get_stats_args();
      sendBase("get_stats", args);
    }

    public String recv_get_stats() throws org.apache.thrift.TException
    {
      get_stats_result result = new get_stats_result();
      receiveBase(result, "get_stats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_stats failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void jar_shutdown(org.apache.thrift.async.AsyncMethodCallback<jar_shutdown_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      jar_shutdown_call method_call = new jar_shutdown_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class jar_shutdown_call extends org.apache.thrift.async.TAsyncMethodCall {
      public jar_shutdown_call(org.apache.thrift.async.AsyncMethodCallback<jar_shutdown_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("jar_shutdown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        jar_shutdown_args args = new jar_shutdown_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_jar_shutdown();
      }
    }

    public void create_genre(String name, org.apache.thrift.async.AsyncMethodCallback<create_genre_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_genre_call method_call = new create_genre_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_genre_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public create_genre_call(String name, org.apache.thrift.async.AsyncMethodCallback<create_genre_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_genre", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_genre_args args = new create_genre_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_genre();
      }
    }

    public void edit_genre(String old_name, String new_name, org.apache.thrift.async.AsyncMethodCallback<edit_genre_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_genre_call method_call = new edit_genre_call(old_name, new_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_genre_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String old_name;
      private String new_name;
      public edit_genre_call(String old_name, String new_name, org.apache.thrift.async.AsyncMethodCallback<edit_genre_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.old_name = old_name;
        this.new_name = new_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_genre", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_genre_args args = new edit_genre_args();
        args.setOld_name(old_name);
        args.setNew_name(new_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_genre();
      }
    }

    public void delete_genre(String name, org.apache.thrift.async.AsyncMethodCallback<delete_genre_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_genre_call method_call = new delete_genre_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_genre_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public delete_genre_call(String name, org.apache.thrift.async.AsyncMethodCallback<delete_genre_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_genre", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_genre_args args = new delete_genre_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_genre();
      }
    }

    public void list_genres(org.apache.thrift.async.AsyncMethodCallback<list_genres_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      list_genres_call method_call = new list_genres_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class list_genres_call extends org.apache.thrift.async.TAsyncMethodCall {
      public list_genres_call(org.apache.thrift.async.AsyncMethodCallback<list_genres_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("list_genres", org.apache.thrift.protocol.TMessageType.CALL, 0));
        list_genres_args args = new list_genres_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_list_genres();
      }
    }

    public void create_language(String name, org.apache.thrift.async.AsyncMethodCallback<create_language_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_language_call method_call = new create_language_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_language_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public create_language_call(String name, org.apache.thrift.async.AsyncMethodCallback<create_language_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_language", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_language_args args = new create_language_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_language();
      }
    }

    public void edit_language(String old_name, String new_name, org.apache.thrift.async.AsyncMethodCallback<edit_language_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_language_call method_call = new edit_language_call(old_name, new_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_language_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String old_name;
      private String new_name;
      public edit_language_call(String old_name, String new_name, org.apache.thrift.async.AsyncMethodCallback<edit_language_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.old_name = old_name;
        this.new_name = new_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_language", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_language_args args = new edit_language_args();
        args.setOld_name(old_name);
        args.setNew_name(new_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_language();
      }
    }

    public void delete_language(String name, org.apache.thrift.async.AsyncMethodCallback<delete_language_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_language_call method_call = new delete_language_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_language_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public delete_language_call(String name, org.apache.thrift.async.AsyncMethodCallback<delete_language_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_language", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_language_args args = new delete_language_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_language();
      }
    }

    public void list_languages(org.apache.thrift.async.AsyncMethodCallback<list_languages_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      list_languages_call method_call = new list_languages_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class list_languages_call extends org.apache.thrift.async.TAsyncMethodCall {
      public list_languages_call(org.apache.thrift.async.AsyncMethodCallback<list_languages_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("list_languages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        list_languages_args args = new list_languages_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_list_languages();
      }
    }

    public void create_user(String id, String full_name, String user_name, String email, String mobile_number, String mobile_dial_code, String dob, String gender, String address, String bio, String genres, String languages, int privilege, int status, int time_created, org.apache.thrift.async.AsyncMethodCallback<create_user_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_user_call method_call = new create_user_call(id, full_name, user_name, email, mobile_number, mobile_dial_code, dob, gender, address, bio, genres, languages, privilege, status, time_created, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String full_name;
      private String user_name;
      private String email;
      private String mobile_number;
      private String mobile_dial_code;
      private String dob;
      private String gender;
      private String address;
      private String bio;
      private String genres;
      private String languages;
      private int privilege;
      private int status;
      private int time_created;
      public create_user_call(String id, String full_name, String user_name, String email, String mobile_number, String mobile_dial_code, String dob, String gender, String address, String bio, String genres, String languages, int privilege, int status, int time_created, org.apache.thrift.async.AsyncMethodCallback<create_user_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.full_name = full_name;
        this.user_name = user_name;
        this.email = email;
        this.mobile_number = mobile_number;
        this.mobile_dial_code = mobile_dial_code;
        this.dob = dob;
        this.gender = gender;
        this.address = address;
        this.bio = bio;
        this.genres = genres;
        this.languages = languages;
        this.privilege = privilege;
        this.status = status;
        this.time_created = time_created;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_user_args args = new create_user_args();
        args.setId(id);
        args.setFull_name(full_name);
        args.setUser_name(user_name);
        args.setEmail(email);
        args.setMobile_number(mobile_number);
        args.setMobile_dial_code(mobile_dial_code);
        args.setDob(dob);
        args.setGender(gender);
        args.setAddress(address);
        args.setBio(bio);
        args.setGenres(genres);
        args.setLanguages(languages);
        args.setPrivilege(privilege);
        args.setStatus(status);
        args.setTime_created(time_created);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_user();
      }
    }

    public void edit_user_basic_info(String id, String full_name, String gender, String dob, org.apache.thrift.async.AsyncMethodCallback<edit_user_basic_info_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_user_basic_info_call method_call = new edit_user_basic_info_call(id, full_name, gender, dob, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_user_basic_info_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String full_name;
      private String gender;
      private String dob;
      public edit_user_basic_info_call(String id, String full_name, String gender, String dob, org.apache.thrift.async.AsyncMethodCallback<edit_user_basic_info_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.full_name = full_name;
        this.gender = gender;
        this.dob = dob;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_user_basic_info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_user_basic_info_args args = new edit_user_basic_info_args();
        args.setId(id);
        args.setFull_name(full_name);
        args.setGender(gender);
        args.setDob(dob);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_user_basic_info();
      }
    }

    public void edit_user_contact_details(String id, String email, String mobile_number, org.apache.thrift.async.AsyncMethodCallback<edit_user_contact_details_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_user_contact_details_call method_call = new edit_user_contact_details_call(id, email, mobile_number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_user_contact_details_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String email;
      private String mobile_number;
      public edit_user_contact_details_call(String id, String email, String mobile_number, org.apache.thrift.async.AsyncMethodCallback<edit_user_contact_details_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.email = email;
        this.mobile_number = mobile_number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_user_contact_details", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_user_contact_details_args args = new edit_user_contact_details_args();
        args.setId(id);
        args.setEmail(email);
        args.setMobile_number(mobile_number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_user_contact_details();
      }
    }

    public void edit_user_security_details(String id, String user_name, org.apache.thrift.async.AsyncMethodCallback<edit_user_security_details_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_user_security_details_call method_call = new edit_user_security_details_call(id, user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_user_security_details_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String user_name;
      public edit_user_security_details_call(String id, String user_name, org.apache.thrift.async.AsyncMethodCallback<edit_user_security_details_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_user_security_details", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_user_security_details_args args = new edit_user_security_details_args();
        args.setId(id);
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_user_security_details();
      }
    }

    public void edit_user_languages(String id, String languages, org.apache.thrift.async.AsyncMethodCallback<edit_user_languages_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_user_languages_call method_call = new edit_user_languages_call(id, languages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_user_languages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String languages;
      public edit_user_languages_call(String id, String languages, org.apache.thrift.async.AsyncMethodCallback<edit_user_languages_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.languages = languages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_user_languages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_user_languages_args args = new edit_user_languages_args();
        args.setId(id);
        args.setLanguages(languages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_user_languages();
      }
    }

    public void edit_user_genres(String id, String genres, org.apache.thrift.async.AsyncMethodCallback<edit_user_genres_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_user_genres_call method_call = new edit_user_genres_call(id, genres, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_user_genres_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String genres;
      public edit_user_genres_call(String id, String genres, org.apache.thrift.async.AsyncMethodCallback<edit_user_genres_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.genres = genres;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_user_genres", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_user_genres_args args = new edit_user_genres_args();
        args.setId(id);
        args.setGenres(genres);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_user_genres();
      }
    }

    public void follow_user(String user_id_1, String user_id_2, int time, org.apache.thrift.async.AsyncMethodCallback<follow_user_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      follow_user_call method_call = new follow_user_call(user_id_1, user_id_2, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class follow_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_id_1;
      private String user_id_2;
      private int time;
      public follow_user_call(String user_id_1, String user_id_2, int time, org.apache.thrift.async.AsyncMethodCallback<follow_user_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_id_1 = user_id_1;
        this.user_id_2 = user_id_2;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("follow_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        follow_user_args args = new follow_user_args();
        args.setUser_id_1(user_id_1);
        args.setUser_id_2(user_id_2);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_follow_user();
      }
    }

    public void deactivate_user(String user_id, org.apache.thrift.async.AsyncMethodCallback<deactivate_user_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deactivate_user_call method_call = new deactivate_user_call(user_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deactivate_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_id;
      public deactivate_user_call(String user_id, org.apache.thrift.async.AsyncMethodCallback<deactivate_user_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_id = user_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deactivate_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deactivate_user_args args = new deactivate_user_args();
        args.setUser_id(user_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deactivate_user();
      }
    }

    public void create_or_edit_series(String series_id, String user_id, String title, String title_id, String tag_line, String feature_image, String genre, String language, String keywords, String copyrights, String dd_img, String dd_summary, int series_type, int time_created, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_or_edit_series_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_or_edit_series_call method_call = new create_or_edit_series_call(series_id, user_id, title, title_id, tag_line, feature_image, genre, language, keywords, copyrights, dd_img, dd_summary, series_type, time_created, is_edit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_or_edit_series_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String series_id;
      private String user_id;
      private String title;
      private String title_id;
      private String tag_line;
      private String feature_image;
      private String genre;
      private String language;
      private String keywords;
      private String copyrights;
      private String dd_img;
      private String dd_summary;
      private int series_type;
      private int time_created;
      private int is_edit;
      public create_or_edit_series_call(String series_id, String user_id, String title, String title_id, String tag_line, String feature_image, String genre, String language, String keywords, String copyrights, String dd_img, String dd_summary, int series_type, int time_created, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_or_edit_series_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.series_id = series_id;
        this.user_id = user_id;
        this.title = title;
        this.title_id = title_id;
        this.tag_line = tag_line;
        this.feature_image = feature_image;
        this.genre = genre;
        this.language = language;
        this.keywords = keywords;
        this.copyrights = copyrights;
        this.dd_img = dd_img;
        this.dd_summary = dd_summary;
        this.series_type = series_type;
        this.time_created = time_created;
        this.is_edit = is_edit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_or_edit_series", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_or_edit_series_args args = new create_or_edit_series_args();
        args.setSeries_id(series_id);
        args.setUser_id(user_id);
        args.setTitle(title);
        args.setTitle_id(title_id);
        args.setTag_line(tag_line);
        args.setFeature_image(feature_image);
        args.setGenre(genre);
        args.setLanguage(language);
        args.setKeywords(keywords);
        args.setCopyrights(copyrights);
        args.setDd_img(dd_img);
        args.setDd_summary(dd_summary);
        args.setSeries_type(series_type);
        args.setTime_created(time_created);
        args.setIs_edit(is_edit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_or_edit_series();
      }
    }

    public void create_or_edit_review(String series_id, String review_id, String data, String user_id, int time_created, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_or_edit_review_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_or_edit_review_call method_call = new create_or_edit_review_call(series_id, review_id, data, user_id, time_created, is_edit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_or_edit_review_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String series_id;
      private String review_id;
      private String data;
      private String user_id;
      private int time_created;
      private int is_edit;
      public create_or_edit_review_call(String series_id, String review_id, String data, String user_id, int time_created, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_or_edit_review_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.series_id = series_id;
        this.review_id = review_id;
        this.data = data;
        this.user_id = user_id;
        this.time_created = time_created;
        this.is_edit = is_edit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_or_edit_review", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_or_edit_review_args args = new create_or_edit_review_args();
        args.setSeries_id(series_id);
        args.setReview_id(review_id);
        args.setData(data);
        args.setUser_id(user_id);
        args.setTime_created(time_created);
        args.setIs_edit(is_edit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_or_edit_review();
      }
    }

    public void create_or_edit_chapter(String chapter_id, String series_id, String series_type, String user_id, String title_id, String title, String feat_image, int time_created, int free_or_paid, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_or_edit_chapter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_or_edit_chapter_call method_call = new create_or_edit_chapter_call(chapter_id, series_id, series_type, user_id, title_id, title, feat_image, time_created, free_or_paid, is_edit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_or_edit_chapter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chapter_id;
      private String series_id;
      private String series_type;
      private String user_id;
      private String title_id;
      private String title;
      private String feat_image;
      private int time_created;
      private int free_or_paid;
      private int is_edit;
      public create_or_edit_chapter_call(String chapter_id, String series_id, String series_type, String user_id, String title_id, String title, String feat_image, int time_created, int free_or_paid, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_or_edit_chapter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chapter_id = chapter_id;
        this.series_id = series_id;
        this.series_type = series_type;
        this.user_id = user_id;
        this.title_id = title_id;
        this.title = title;
        this.feat_image = feat_image;
        this.time_created = time_created;
        this.free_or_paid = free_or_paid;
        this.is_edit = is_edit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_or_edit_chapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_or_edit_chapter_args args = new create_or_edit_chapter_args();
        args.setChapter_id(chapter_id);
        args.setSeries_id(series_id);
        args.setSeries_type(series_type);
        args.setUser_id(user_id);
        args.setTitle_id(title_id);
        args.setTitle(title);
        args.setFeat_image(feat_image);
        args.setTime_created(time_created);
        args.setFree_or_paid(free_or_paid);
        args.setIs_edit(is_edit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_or_edit_chapter();
      }
    }

    public void subscribe_series(String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<subscribe_series_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscribe_series_call method_call = new subscribe_series_call(series_id, user_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscribe_series_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String series_id;
      private String user_id;
      private int time;
      public subscribe_series_call(String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<subscribe_series_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.series_id = series_id;
        this.user_id = user_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscribe_series", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subscribe_series_args args = new subscribe_series_args();
        args.setSeries_id(series_id);
        args.setUser_id(user_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_subscribe_series();
      }
    }

    public void favourite_chapter(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<favourite_chapter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      favourite_chapter_call method_call = new favourite_chapter_call(chapter_id, series_id, user_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class favourite_chapter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chapter_id;
      private String series_id;
      private String user_id;
      private int time;
      public favourite_chapter_call(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<favourite_chapter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chapter_id = chapter_id;
        this.series_id = series_id;
        this.user_id = user_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("favourite_chapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        favourite_chapter_args args = new favourite_chapter_args();
        args.setChapter_id(chapter_id);
        args.setSeries_id(series_id);
        args.setUser_id(user_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_favourite_chapter();
      }
    }

    public void bookmark_chapter(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<bookmark_chapter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bookmark_chapter_call method_call = new bookmark_chapter_call(chapter_id, series_id, user_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bookmark_chapter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chapter_id;
      private String series_id;
      private String user_id;
      private int time;
      public bookmark_chapter_call(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<bookmark_chapter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chapter_id = chapter_id;
        this.series_id = series_id;
        this.user_id = user_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bookmark_chapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bookmark_chapter_args args = new bookmark_chapter_args();
        args.setChapter_id(chapter_id);
        args.setSeries_id(series_id);
        args.setUser_id(user_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bookmark_chapter();
      }
    }

    public void rate_chapter(String chapter_id, String series_id, int rating, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<rate_chapter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rate_chapter_call method_call = new rate_chapter_call(chapter_id, series_id, rating, user_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rate_chapter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chapter_id;
      private String series_id;
      private int rating;
      private String user_id;
      private int time;
      public rate_chapter_call(String chapter_id, String series_id, int rating, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<rate_chapter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chapter_id = chapter_id;
        this.series_id = series_id;
        this.rating = rating;
        this.user_id = user_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rate_chapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rate_chapter_args args = new rate_chapter_args();
        args.setChapter_id(chapter_id);
        args.setSeries_id(series_id);
        args.setRating(rating);
        args.setUser_id(user_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rate_chapter();
      }
    }

    public void recored_chapter_view(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<recored_chapter_view_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recored_chapter_view_call method_call = new recored_chapter_view_call(chapter_id, series_id, user_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recored_chapter_view_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chapter_id;
      private String series_id;
      private String user_id;
      private int time;
      public recored_chapter_view_call(String chapter_id, String series_id, String user_id, int time, org.apache.thrift.async.AsyncMethodCallback<recored_chapter_view_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chapter_id = chapter_id;
        this.series_id = series_id;
        this.user_id = user_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recored_chapter_view", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recored_chapter_view_args args = new recored_chapter_view_args();
        args.setChapter_id(chapter_id);
        args.setSeries_id(series_id);
        args.setUser_id(user_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recored_chapter_view();
      }
    }

    public void get_feed(String titleType, String feedType, String filter, int prev_cnt, int count, String user_id, String genre, String lang, String s_user_id, org.apache.thrift.async.AsyncMethodCallback<get_feed_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feed_call method_call = new get_feed_call(titleType, feedType, filter, prev_cnt, count, user_id, genre, lang, s_user_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String titleType;
      private String feedType;
      private String filter;
      private int prev_cnt;
      private int count;
      private String user_id;
      private String genre;
      private String lang;
      private String s_user_id;
      public get_feed_call(String titleType, String feedType, String filter, int prev_cnt, int count, String user_id, String genre, String lang, String s_user_id, org.apache.thrift.async.AsyncMethodCallback<get_feed_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.titleType = titleType;
        this.feedType = feedType;
        this.filter = filter;
        this.prev_cnt = prev_cnt;
        this.count = count;
        this.user_id = user_id;
        this.genre = genre;
        this.lang = lang;
        this.s_user_id = s_user_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feed_args args = new get_feed_args();
        args.setTitleType(titleType);
        args.setFeedType(feedType);
        args.setFilter(filter);
        args.setPrev_cnt(prev_cnt);
        args.setCount(count);
        args.setUser_id(user_id);
        args.setGenre(genre);
        args.setLang(lang);
        args.setS_user_id(s_user_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feed();
      }
    }

    public void create_or_edit_comment(String chapter_id, String comment_id, String content, String parent_cmnt_id, String user_id, int time, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_or_edit_comment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_or_edit_comment_call method_call = new create_or_edit_comment_call(chapter_id, comment_id, content, parent_cmnt_id, user_id, time, is_edit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_or_edit_comment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chapter_id;
      private String comment_id;
      private String content;
      private String parent_cmnt_id;
      private String user_id;
      private int time;
      private int is_edit;
      public create_or_edit_comment_call(String chapter_id, String comment_id, String content, String parent_cmnt_id, String user_id, int time, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_or_edit_comment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chapter_id = chapter_id;
        this.comment_id = comment_id;
        this.content = content;
        this.parent_cmnt_id = parent_cmnt_id;
        this.user_id = user_id;
        this.time = time;
        this.is_edit = is_edit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_or_edit_comment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_or_edit_comment_args args = new create_or_edit_comment_args();
        args.setChapter_id(chapter_id);
        args.setComment_id(comment_id);
        args.setContent(content);
        args.setParent_cmnt_id(parent_cmnt_id);
        args.setUser_id(user_id);
        args.setTime(time);
        args.setIs_edit(is_edit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_or_edit_comment();
      }
    }

    public void delete_comment(String comment_id, org.apache.thrift.async.AsyncMethodCallback<delete_comment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_comment_call method_call = new delete_comment_call(comment_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_comment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String comment_id;
      public delete_comment_call(String comment_id, org.apache.thrift.async.AsyncMethodCallback<delete_comment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.comment_id = comment_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_comment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_comment_args args = new delete_comment_args();
        args.setComment_id(comment_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_comment();
      }
    }

    public void get_comments(String chapter_id, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<get_comments_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_comments_call method_call = new get_comments_call(chapter_id, prev_cnt, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_comments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chapter_id;
      private int prev_cnt;
      private int count;
      public get_comments_call(String chapter_id, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<get_comments_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chapter_id = chapter_id;
        this.prev_cnt = prev_cnt;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_comments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_comments_args args = new get_comments_args();
        args.setChapter_id(chapter_id);
        args.setPrev_cnt(prev_cnt);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_comments();
      }
    }

    public void get_all_items(String item_type, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<get_all_items_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_all_items_call method_call = new get_all_items_call(item_type, prev_cnt, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_all_items_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private int prev_cnt;
      private int count;
      public get_all_items_call(String item_type, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<get_all_items_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.prev_cnt = prev_cnt;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_items", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_all_items_args args = new get_all_items_args();
        args.setItem_type(item_type);
        args.setPrev_cnt(prev_cnt);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_all_items();
      }
    }

    public void get_item_details(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<get_item_details_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_item_details_call method_call = new get_item_details_call(item_type, item_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_item_details_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      public get_item_details_call(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<get_item_details_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_item_details", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_item_details_args args = new get_item_details_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_item_details();
      }
    }

    public void get_subscriptions_for_user(String user_id, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<get_subscriptions_for_user_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_subscriptions_for_user_call method_call = new get_subscriptions_for_user_call(user_id, prev_cnt, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_subscriptions_for_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_id;
      private int prev_cnt;
      private int count;
      public get_subscriptions_for_user_call(String user_id, int prev_cnt, int count, org.apache.thrift.async.AsyncMethodCallback<get_subscriptions_for_user_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_id = user_id;
        this.prev_cnt = prev_cnt;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_subscriptions_for_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_subscriptions_for_user_args args = new get_subscriptions_for_user_args();
        args.setUser_id(user_id);
        args.setPrev_cnt(prev_cnt);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_subscriptions_for_user();
      }
    }

    public void get_top_authors(int prev_cnt, int count, String user_id, org.apache.thrift.async.AsyncMethodCallback<get_top_authors_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_top_authors_call method_call = new get_top_authors_call(prev_cnt, count, user_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_top_authors_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int prev_cnt;
      private int count;
      private String user_id;
      public get_top_authors_call(int prev_cnt, int count, String user_id, org.apache.thrift.async.AsyncMethodCallback<get_top_authors_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prev_cnt = prev_cnt;
        this.count = count;
        this.user_id = user_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_top_authors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_top_authors_args args = new get_top_authors_args();
        args.setPrev_cnt(prev_cnt);
        args.setCount(count);
        args.setUser_id(user_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_top_authors();
      }
    }

    public void get_stats(org.apache.thrift.async.AsyncMethodCallback<get_stats_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_stats_call method_call = new get_stats_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_stats_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_stats_call(org.apache.thrift.async.AsyncMethodCallback<get_stats_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_stats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_stats_args args = new get_stats_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_stats();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("jar_shutdown", new jar_shutdown());
      processMap.put("create_genre", new create_genre());
      processMap.put("edit_genre", new edit_genre());
      processMap.put("delete_genre", new delete_genre());
      processMap.put("list_genres", new list_genres());
      processMap.put("create_language", new create_language());
      processMap.put("edit_language", new edit_language());
      processMap.put("delete_language", new delete_language());
      processMap.put("list_languages", new list_languages());
      processMap.put("create_user", new create_user());
      processMap.put("edit_user_basic_info", new edit_user_basic_info());
      processMap.put("edit_user_contact_details", new edit_user_contact_details());
      processMap.put("edit_user_security_details", new edit_user_security_details());
      processMap.put("edit_user_languages", new edit_user_languages());
      processMap.put("edit_user_genres", new edit_user_genres());
      processMap.put("follow_user", new follow_user());
      processMap.put("deactivate_user", new deactivate_user());
      processMap.put("create_or_edit_series", new create_or_edit_series());
      processMap.put("create_or_edit_review", new create_or_edit_review());
      processMap.put("create_or_edit_chapter", new create_or_edit_chapter());
      processMap.put("subscribe_series", new subscribe_series());
      processMap.put("favourite_chapter", new favourite_chapter());
      processMap.put("bookmark_chapter", new bookmark_chapter());
      processMap.put("rate_chapter", new rate_chapter());
      processMap.put("recored_chapter_view", new recored_chapter_view());
      processMap.put("get_feed", new get_feed());
      processMap.put("create_or_edit_comment", new create_or_edit_comment());
      processMap.put("delete_comment", new delete_comment());
      processMap.put("get_comments", new get_comments());
      processMap.put("get_all_items", new get_all_items());
      processMap.put("get_item_details", new get_item_details());
      processMap.put("get_subscriptions_for_user", new get_subscriptions_for_user());
      processMap.put("get_top_authors", new get_top_authors());
      processMap.put("get_stats", new get_stats());
      return processMap;
    }

    private static class jar_shutdown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, jar_shutdown_args> {
      public jar_shutdown() {
        super("jar_shutdown");
      }

      protected jar_shutdown_args getEmptyArgsInstance() {
        return new jar_shutdown_args();
      }

      protected jar_shutdown_result getResult(I iface, jar_shutdown_args args) throws org.apache.thrift.TException {
        jar_shutdown_result result = new jar_shutdown_result();
        result.success = iface.jar_shutdown();
        return result;
      }
    }

    private static class create_genre<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_genre_args> {
      public create_genre() {
        super("create_genre");
      }

      protected create_genre_args getEmptyArgsInstance() {
        return new create_genre_args();
      }

      protected create_genre_result getResult(I iface, create_genre_args args) throws org.apache.thrift.TException {
        create_genre_result result = new create_genre_result();
        result.success = iface.create_genre(args.name);
        return result;
      }
    }

    private static class edit_genre<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_genre_args> {
      public edit_genre() {
        super("edit_genre");
      }

      protected edit_genre_args getEmptyArgsInstance() {
        return new edit_genre_args();
      }

      protected edit_genre_result getResult(I iface, edit_genre_args args) throws org.apache.thrift.TException {
        edit_genre_result result = new edit_genre_result();
        result.success = iface.edit_genre(args.old_name, args.new_name);
        return result;
      }
    }

    private static class delete_genre<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_genre_args> {
      public delete_genre() {
        super("delete_genre");
      }

      protected delete_genre_args getEmptyArgsInstance() {
        return new delete_genre_args();
      }

      protected delete_genre_result getResult(I iface, delete_genre_args args) throws org.apache.thrift.TException {
        delete_genre_result result = new delete_genre_result();
        result.success = iface.delete_genre(args.name);
        return result;
      }
    }

    private static class list_genres<I extends Iface> extends org.apache.thrift.ProcessFunction<I, list_genres_args> {
      public list_genres() {
        super("list_genres");
      }

      protected list_genres_args getEmptyArgsInstance() {
        return new list_genres_args();
      }

      protected list_genres_result getResult(I iface, list_genres_args args) throws org.apache.thrift.TException {
        list_genres_result result = new list_genres_result();
        result.success = iface.list_genres();
        return result;
      }
    }

    private static class create_language<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_language_args> {
      public create_language() {
        super("create_language");
      }

      protected create_language_args getEmptyArgsInstance() {
        return new create_language_args();
      }

      protected create_language_result getResult(I iface, create_language_args args) throws org.apache.thrift.TException {
        create_language_result result = new create_language_result();
        result.success = iface.create_language(args.name);
        return result;
      }
    }

    private static class edit_language<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_language_args> {
      public edit_language() {
        super("edit_language");
      }

      protected edit_language_args getEmptyArgsInstance() {
        return new edit_language_args();
      }

      protected edit_language_result getResult(I iface, edit_language_args args) throws org.apache.thrift.TException {
        edit_language_result result = new edit_language_result();
        result.success = iface.edit_language(args.old_name, args.new_name);
        return result;
      }
    }

    private static class delete_language<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_language_args> {
      public delete_language() {
        super("delete_language");
      }

      protected delete_language_args getEmptyArgsInstance() {
        return new delete_language_args();
      }

      protected delete_language_result getResult(I iface, delete_language_args args) throws org.apache.thrift.TException {
        delete_language_result result = new delete_language_result();
        result.success = iface.delete_language(args.name);
        return result;
      }
    }

    private static class list_languages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, list_languages_args> {
      public list_languages() {
        super("list_languages");
      }

      protected list_languages_args getEmptyArgsInstance() {
        return new list_languages_args();
      }

      protected list_languages_result getResult(I iface, list_languages_args args) throws org.apache.thrift.TException {
        list_languages_result result = new list_languages_result();
        result.success = iface.list_languages();
        return result;
      }
    }

    private static class create_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_user_args> {
      public create_user() {
        super("create_user");
      }

      protected create_user_args getEmptyArgsInstance() {
        return new create_user_args();
      }

      protected create_user_result getResult(I iface, create_user_args args) throws org.apache.thrift.TException {
        create_user_result result = new create_user_result();
        result.success = iface.create_user(args.id, args.full_name, args.user_name, args.email, args.mobile_number, args.mobile_dial_code, args.dob, args.gender, args.address, args.bio, args.genres, args.languages, args.privilege, args.status, args.time_created);
        return result;
      }
    }

    private static class edit_user_basic_info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_user_basic_info_args> {
      public edit_user_basic_info() {
        super("edit_user_basic_info");
      }

      protected edit_user_basic_info_args getEmptyArgsInstance() {
        return new edit_user_basic_info_args();
      }

      protected edit_user_basic_info_result getResult(I iface, edit_user_basic_info_args args) throws org.apache.thrift.TException {
        edit_user_basic_info_result result = new edit_user_basic_info_result();
        result.success = iface.edit_user_basic_info(args.id, args.full_name, args.gender, args.dob);
        return result;
      }
    }

    private static class edit_user_contact_details<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_user_contact_details_args> {
      public edit_user_contact_details() {
        super("edit_user_contact_details");
      }

      protected edit_user_contact_details_args getEmptyArgsInstance() {
        return new edit_user_contact_details_args();
      }

      protected edit_user_contact_details_result getResult(I iface, edit_user_contact_details_args args) throws org.apache.thrift.TException {
        edit_user_contact_details_result result = new edit_user_contact_details_result();
        result.success = iface.edit_user_contact_details(args.id, args.email, args.mobile_number);
        return result;
      }
    }

    private static class edit_user_security_details<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_user_security_details_args> {
      public edit_user_security_details() {
        super("edit_user_security_details");
      }

      protected edit_user_security_details_args getEmptyArgsInstance() {
        return new edit_user_security_details_args();
      }

      protected edit_user_security_details_result getResult(I iface, edit_user_security_details_args args) throws org.apache.thrift.TException {
        edit_user_security_details_result result = new edit_user_security_details_result();
        result.success = iface.edit_user_security_details(args.id, args.user_name);
        return result;
      }
    }

    private static class edit_user_languages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_user_languages_args> {
      public edit_user_languages() {
        super("edit_user_languages");
      }

      protected edit_user_languages_args getEmptyArgsInstance() {
        return new edit_user_languages_args();
      }

      protected edit_user_languages_result getResult(I iface, edit_user_languages_args args) throws org.apache.thrift.TException {
        edit_user_languages_result result = new edit_user_languages_result();
        result.success = iface.edit_user_languages(args.id, args.languages);
        return result;
      }
    }

    private static class edit_user_genres<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_user_genres_args> {
      public edit_user_genres() {
        super("edit_user_genres");
      }

      protected edit_user_genres_args getEmptyArgsInstance() {
        return new edit_user_genres_args();
      }

      protected edit_user_genres_result getResult(I iface, edit_user_genres_args args) throws org.apache.thrift.TException {
        edit_user_genres_result result = new edit_user_genres_result();
        result.success = iface.edit_user_genres(args.id, args.genres);
        return result;
      }
    }

    private static class follow_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, follow_user_args> {
      public follow_user() {
        super("follow_user");
      }

      protected follow_user_args getEmptyArgsInstance() {
        return new follow_user_args();
      }

      protected follow_user_result getResult(I iface, follow_user_args args) throws org.apache.thrift.TException {
        follow_user_result result = new follow_user_result();
        result.success = iface.follow_user(args.user_id_1, args.user_id_2, args.time);
        return result;
      }
    }

    private static class deactivate_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deactivate_user_args> {
      public deactivate_user() {
        super("deactivate_user");
      }

      protected deactivate_user_args getEmptyArgsInstance() {
        return new deactivate_user_args();
      }

      protected deactivate_user_result getResult(I iface, deactivate_user_args args) throws org.apache.thrift.TException {
        deactivate_user_result result = new deactivate_user_result();
        result.success = iface.deactivate_user(args.user_id);
        return result;
      }
    }

    private static class create_or_edit_series<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_or_edit_series_args> {
      public create_or_edit_series() {
        super("create_or_edit_series");
      }

      protected create_or_edit_series_args getEmptyArgsInstance() {
        return new create_or_edit_series_args();
      }

      protected create_or_edit_series_result getResult(I iface, create_or_edit_series_args args) throws org.apache.thrift.TException {
        create_or_edit_series_result result = new create_or_edit_series_result();
        result.success = iface.create_or_edit_series(args.series_id, args.user_id, args.title, args.title_id, args.tag_line, args.feature_image, args.genre, args.language, args.keywords, args.copyrights, args.dd_img, args.dd_summary, args.series_type, args.time_created, args.is_edit);
        return result;
      }
    }

    private static class create_or_edit_review<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_or_edit_review_args> {
      public create_or_edit_review() {
        super("create_or_edit_review");
      }

      protected create_or_edit_review_args getEmptyArgsInstance() {
        return new create_or_edit_review_args();
      }

      protected create_or_edit_review_result getResult(I iface, create_or_edit_review_args args) throws org.apache.thrift.TException {
        create_or_edit_review_result result = new create_or_edit_review_result();
        result.success = iface.create_or_edit_review(args.series_id, args.review_id, args.data, args.user_id, args.time_created, args.is_edit);
        return result;
      }
    }

    private static class create_or_edit_chapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_or_edit_chapter_args> {
      public create_or_edit_chapter() {
        super("create_or_edit_chapter");
      }

      protected create_or_edit_chapter_args getEmptyArgsInstance() {
        return new create_or_edit_chapter_args();
      }

      protected create_or_edit_chapter_result getResult(I iface, create_or_edit_chapter_args args) throws org.apache.thrift.TException {
        create_or_edit_chapter_result result = new create_or_edit_chapter_result();
        result.success = iface.create_or_edit_chapter(args.chapter_id, args.series_id, args.series_type, args.user_id, args.title_id, args.title, args.feat_image, args.time_created, args.free_or_paid, args.is_edit);
        return result;
      }
    }

    private static class subscribe_series<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscribe_series_args> {
      public subscribe_series() {
        super("subscribe_series");
      }

      protected subscribe_series_args getEmptyArgsInstance() {
        return new subscribe_series_args();
      }

      protected subscribe_series_result getResult(I iface, subscribe_series_args args) throws org.apache.thrift.TException {
        subscribe_series_result result = new subscribe_series_result();
        result.success = iface.subscribe_series(args.series_id, args.user_id, args.time);
        return result;
      }
    }

    private static class favourite_chapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, favourite_chapter_args> {
      public favourite_chapter() {
        super("favourite_chapter");
      }

      protected favourite_chapter_args getEmptyArgsInstance() {
        return new favourite_chapter_args();
      }

      protected favourite_chapter_result getResult(I iface, favourite_chapter_args args) throws org.apache.thrift.TException {
        favourite_chapter_result result = new favourite_chapter_result();
        result.success = iface.favourite_chapter(args.chapter_id, args.series_id, args.user_id, args.time);
        return result;
      }
    }

    private static class bookmark_chapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bookmark_chapter_args> {
      public bookmark_chapter() {
        super("bookmark_chapter");
      }

      protected bookmark_chapter_args getEmptyArgsInstance() {
        return new bookmark_chapter_args();
      }

      protected bookmark_chapter_result getResult(I iface, bookmark_chapter_args args) throws org.apache.thrift.TException {
        bookmark_chapter_result result = new bookmark_chapter_result();
        result.success = iface.bookmark_chapter(args.chapter_id, args.series_id, args.user_id, args.time);
        return result;
      }
    }

    private static class rate_chapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rate_chapter_args> {
      public rate_chapter() {
        super("rate_chapter");
      }

      protected rate_chapter_args getEmptyArgsInstance() {
        return new rate_chapter_args();
      }

      protected rate_chapter_result getResult(I iface, rate_chapter_args args) throws org.apache.thrift.TException {
        rate_chapter_result result = new rate_chapter_result();
        result.success = iface.rate_chapter(args.chapter_id, args.series_id, args.rating, args.user_id, args.time);
        return result;
      }
    }

    private static class recored_chapter_view<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recored_chapter_view_args> {
      public recored_chapter_view() {
        super("recored_chapter_view");
      }

      protected recored_chapter_view_args getEmptyArgsInstance() {
        return new recored_chapter_view_args();
      }

      protected recored_chapter_view_result getResult(I iface, recored_chapter_view_args args) throws org.apache.thrift.TException {
        recored_chapter_view_result result = new recored_chapter_view_result();
        result.success = iface.recored_chapter_view(args.chapter_id, args.series_id, args.user_id, args.time);
        return result;
      }
    }

    private static class get_feed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feed_args> {
      public get_feed() {
        super("get_feed");
      }

      protected get_feed_args getEmptyArgsInstance() {
        return new get_feed_args();
      }

      protected get_feed_result getResult(I iface, get_feed_args args) throws org.apache.thrift.TException {
        get_feed_result result = new get_feed_result();
        result.success = iface.get_feed(args.titleType, args.feedType, args.filter, args.prev_cnt, args.count, args.user_id, args.genre, args.lang, args.s_user_id);
        return result;
      }
    }

    private static class create_or_edit_comment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_or_edit_comment_args> {
      public create_or_edit_comment() {
        super("create_or_edit_comment");
      }

      protected create_or_edit_comment_args getEmptyArgsInstance() {
        return new create_or_edit_comment_args();
      }

      protected create_or_edit_comment_result getResult(I iface, create_or_edit_comment_args args) throws org.apache.thrift.TException {
        create_or_edit_comment_result result = new create_or_edit_comment_result();
        result.success = iface.create_or_edit_comment(args.chapter_id, args.comment_id, args.content, args.parent_cmnt_id, args.user_id, args.time, args.is_edit);
        return result;
      }
    }

    private static class delete_comment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_comment_args> {
      public delete_comment() {
        super("delete_comment");
      }

      protected delete_comment_args getEmptyArgsInstance() {
        return new delete_comment_args();
      }

      protected delete_comment_result getResult(I iface, delete_comment_args args) throws org.apache.thrift.TException {
        delete_comment_result result = new delete_comment_result();
        result.success = iface.delete_comment(args.comment_id);
        return result;
      }
    }

    private static class get_comments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_comments_args> {
      public get_comments() {
        super("get_comments");
      }

      protected get_comments_args getEmptyArgsInstance() {
        return new get_comments_args();
      }

      protected get_comments_result getResult(I iface, get_comments_args args) throws org.apache.thrift.TException {
        get_comments_result result = new get_comments_result();
        result.success = iface.get_comments(args.chapter_id, args.prev_cnt, args.count);
        return result;
      }
    }

    private static class get_all_items<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_items_args> {
      public get_all_items() {
        super("get_all_items");
      }

      protected get_all_items_args getEmptyArgsInstance() {
        return new get_all_items_args();
      }

      protected get_all_items_result getResult(I iface, get_all_items_args args) throws org.apache.thrift.TException {
        get_all_items_result result = new get_all_items_result();
        result.success = iface.get_all_items(args.item_type, args.prev_cnt, args.count);
        return result;
      }
    }

    private static class get_item_details<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_item_details_args> {
      public get_item_details() {
        super("get_item_details");
      }

      protected get_item_details_args getEmptyArgsInstance() {
        return new get_item_details_args();
      }

      protected get_item_details_result getResult(I iface, get_item_details_args args) throws org.apache.thrift.TException {
        get_item_details_result result = new get_item_details_result();
        result.success = iface.get_item_details(args.item_type, args.item_id);
        return result;
      }
    }

    private static class get_subscriptions_for_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_subscriptions_for_user_args> {
      public get_subscriptions_for_user() {
        super("get_subscriptions_for_user");
      }

      protected get_subscriptions_for_user_args getEmptyArgsInstance() {
        return new get_subscriptions_for_user_args();
      }

      protected get_subscriptions_for_user_result getResult(I iface, get_subscriptions_for_user_args args) throws org.apache.thrift.TException {
        get_subscriptions_for_user_result result = new get_subscriptions_for_user_result();
        result.success = iface.get_subscriptions_for_user(args.user_id, args.prev_cnt, args.count);
        return result;
      }
    }

    private static class get_top_authors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_top_authors_args> {
      public get_top_authors() {
        super("get_top_authors");
      }

      protected get_top_authors_args getEmptyArgsInstance() {
        return new get_top_authors_args();
      }

      protected get_top_authors_result getResult(I iface, get_top_authors_args args) throws org.apache.thrift.TException {
        get_top_authors_result result = new get_top_authors_result();
        result.success = iface.get_top_authors(args.prev_cnt, args.count, args.user_id);
        return result;
      }
    }

    private static class get_stats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_stats_args> {
      public get_stats() {
        super("get_stats");
      }

      protected get_stats_args getEmptyArgsInstance() {
        return new get_stats_args();
      }

      protected get_stats_result getResult(I iface, get_stats_args args) throws org.apache.thrift.TException {
        get_stats_result result = new get_stats_result();
        result.success = iface.get_stats();
        return result;
      }
    }

  }

  public static class jar_shutdown_args implements org.apache.thrift.TBase<jar_shutdown_args, jar_shutdown_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("jar_shutdown_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new jar_shutdown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new jar_shutdown_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(jar_shutdown_args.class, metaDataMap);
    }

    public jar_shutdown_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public jar_shutdown_args(jar_shutdown_args other) {
    }

    public jar_shutdown_args deepCopy() {
      return new jar_shutdown_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof jar_shutdown_args)
        return this.equals((jar_shutdown_args)that);
      return false;
    }

    public boolean equals(jar_shutdown_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(jar_shutdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      jar_shutdown_args typedOther = (jar_shutdown_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("jar_shutdown_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class jar_shutdown_argsStandardSchemeFactory implements SchemeFactory {
      public jar_shutdown_argsStandardScheme getScheme() {
        return new jar_shutdown_argsStandardScheme();
      }
    }

    private static class jar_shutdown_argsStandardScheme extends StandardScheme<jar_shutdown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, jar_shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, jar_shutdown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class jar_shutdown_argsTupleSchemeFactory implements SchemeFactory {
      public jar_shutdown_argsTupleScheme getScheme() {
        return new jar_shutdown_argsTupleScheme();
      }
    }

    private static class jar_shutdown_argsTupleScheme extends TupleScheme<jar_shutdown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, jar_shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, jar_shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class jar_shutdown_result implements org.apache.thrift.TBase<jar_shutdown_result, jar_shutdown_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("jar_shutdown_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new jar_shutdown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new jar_shutdown_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(jar_shutdown_result.class, metaDataMap);
    }

    public jar_shutdown_result() {
    }

    public jar_shutdown_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public jar_shutdown_result(jar_shutdown_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public jar_shutdown_result deepCopy() {
      return new jar_shutdown_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public jar_shutdown_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof jar_shutdown_result)
        return this.equals((jar_shutdown_result)that);
      return false;
    }

    public boolean equals(jar_shutdown_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(jar_shutdown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      jar_shutdown_result typedOther = (jar_shutdown_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("jar_shutdown_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class jar_shutdown_resultStandardSchemeFactory implements SchemeFactory {
      public jar_shutdown_resultStandardScheme getScheme() {
        return new jar_shutdown_resultStandardScheme();
      }
    }

    private static class jar_shutdown_resultStandardScheme extends StandardScheme<jar_shutdown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, jar_shutdown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, jar_shutdown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class jar_shutdown_resultTupleSchemeFactory implements SchemeFactory {
      public jar_shutdown_resultTupleScheme getScheme() {
        return new jar_shutdown_resultTupleScheme();
      }
    }

    private static class jar_shutdown_resultTupleScheme extends TupleScheme<jar_shutdown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, jar_shutdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, jar_shutdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_genre_args implements org.apache.thrift.TBase<create_genre_args, create_genre_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_genre_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_genre_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_genre_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_genre_args.class, metaDataMap);
    }

    public create_genre_args() {
    }

    public create_genre_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_genre_args(create_genre_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public create_genre_args deepCopy() {
      return new create_genre_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public create_genre_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_genre_args)
        return this.equals((create_genre_args)that);
      return false;
    }

    public boolean equals(create_genre_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_genre_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_genre_args typedOther = (create_genre_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_genre_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_genre_argsStandardSchemeFactory implements SchemeFactory {
      public create_genre_argsStandardScheme getScheme() {
        return new create_genre_argsStandardScheme();
      }
    }

    private static class create_genre_argsStandardScheme extends StandardScheme<create_genre_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_genre_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_genre_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_genre_argsTupleSchemeFactory implements SchemeFactory {
      public create_genre_argsTupleScheme getScheme() {
        return new create_genre_argsTupleScheme();
      }
    }

    private static class create_genre_argsTupleScheme extends TupleScheme<create_genre_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_genre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_genre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class create_genre_result implements org.apache.thrift.TBase<create_genre_result, create_genre_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_genre_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_genre_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_genre_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_genre_result.class, metaDataMap);
    }

    public create_genre_result() {
    }

    public create_genre_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_genre_result(create_genre_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_genre_result deepCopy() {
      return new create_genre_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_genre_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_genre_result)
        return this.equals((create_genre_result)that);
      return false;
    }

    public boolean equals(create_genre_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_genre_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_genre_result typedOther = (create_genre_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_genre_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_genre_resultStandardSchemeFactory implements SchemeFactory {
      public create_genre_resultStandardScheme getScheme() {
        return new create_genre_resultStandardScheme();
      }
    }

    private static class create_genre_resultStandardScheme extends StandardScheme<create_genre_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_genre_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_genre_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_genre_resultTupleSchemeFactory implements SchemeFactory {
      public create_genre_resultTupleScheme getScheme() {
        return new create_genre_resultTupleScheme();
      }
    }

    private static class create_genre_resultTupleScheme extends TupleScheme<create_genre_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_genre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_genre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_genre_args implements org.apache.thrift.TBase<edit_genre_args, edit_genre_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_genre_args");

    private static final org.apache.thrift.protocol.TField OLD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("old_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("new_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_genre_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_genre_argsTupleSchemeFactory());
    }

    public String old_name; // required
    public String new_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_NAME((short)1, "old_name"),
      NEW_NAME((short)2, "new_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_NAME
            return OLD_NAME;
          case 2: // NEW_NAME
            return NEW_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_NAME, new org.apache.thrift.meta_data.FieldMetaData("old_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_NAME, new org.apache.thrift.meta_data.FieldMetaData("new_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_genre_args.class, metaDataMap);
    }

    public edit_genre_args() {
    }

    public edit_genre_args(
      String old_name,
      String new_name)
    {
      this();
      this.old_name = old_name;
      this.new_name = new_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_genre_args(edit_genre_args other) {
      if (other.isSetOld_name()) {
        this.old_name = other.old_name;
      }
      if (other.isSetNew_name()) {
        this.new_name = other.new_name;
      }
    }

    public edit_genre_args deepCopy() {
      return new edit_genre_args(this);
    }

    @Override
    public void clear() {
      this.old_name = null;
      this.new_name = null;
    }

    public String getOld_name() {
      return this.old_name;
    }

    public edit_genre_args setOld_name(String old_name) {
      this.old_name = old_name;
      return this;
    }

    public void unsetOld_name() {
      this.old_name = null;
    }

    /** Returns true if field old_name is set (has been assigned a value) and false otherwise */
    public boolean isSetOld_name() {
      return this.old_name != null;
    }

    public void setOld_nameIsSet(boolean value) {
      if (!value) {
        this.old_name = null;
      }
    }

    public String getNew_name() {
      return this.new_name;
    }

    public edit_genre_args setNew_name(String new_name) {
      this.new_name = new_name;
      return this;
    }

    public void unsetNew_name() {
      this.new_name = null;
    }

    /** Returns true if field new_name is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_name() {
      return this.new_name != null;
    }

    public void setNew_nameIsSet(boolean value) {
      if (!value) {
        this.new_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_NAME:
        if (value == null) {
          unsetOld_name();
        } else {
          setOld_name((String)value);
        }
        break;

      case NEW_NAME:
        if (value == null) {
          unsetNew_name();
        } else {
          setNew_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_NAME:
        return getOld_name();

      case NEW_NAME:
        return getNew_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_NAME:
        return isSetOld_name();
      case NEW_NAME:
        return isSetNew_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_genre_args)
        return this.equals((edit_genre_args)that);
      return false;
    }

    public boolean equals(edit_genre_args that) {
      if (that == null)
        return false;

      boolean this_present_old_name = true && this.isSetOld_name();
      boolean that_present_old_name = true && that.isSetOld_name();
      if (this_present_old_name || that_present_old_name) {
        if (!(this_present_old_name && that_present_old_name))
          return false;
        if (!this.old_name.equals(that.old_name))
          return false;
      }

      boolean this_present_new_name = true && this.isSetNew_name();
      boolean that_present_new_name = true && that.isSetNew_name();
      if (this_present_new_name || that_present_new_name) {
        if (!(this_present_new_name && that_present_new_name))
          return false;
        if (!this.new_name.equals(that.new_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_genre_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_genre_args typedOther = (edit_genre_args)other;

      lastComparison = Boolean.valueOf(isSetOld_name()).compareTo(typedOther.isSetOld_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOld_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_name, typedOther.old_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNew_name()).compareTo(typedOther.isSetNew_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_name, typedOther.new_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_genre_args(");
      boolean first = true;

      sb.append("old_name:");
      if (this.old_name == null) {
        sb.append("null");
      } else {
        sb.append(this.old_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_name:");
      if (this.new_name == null) {
        sb.append("null");
      } else {
        sb.append(this.new_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_genre_argsStandardSchemeFactory implements SchemeFactory {
      public edit_genre_argsStandardScheme getScheme() {
        return new edit_genre_argsStandardScheme();
      }
    }

    private static class edit_genre_argsStandardScheme extends StandardScheme<edit_genre_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_genre_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.old_name = iprot.readString();
                struct.setOld_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.new_name = iprot.readString();
                struct.setNew_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_genre_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.old_name != null) {
          oprot.writeFieldBegin(OLD_NAME_FIELD_DESC);
          oprot.writeString(struct.old_name);
          oprot.writeFieldEnd();
        }
        if (struct.new_name != null) {
          oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
          oprot.writeString(struct.new_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_genre_argsTupleSchemeFactory implements SchemeFactory {
      public edit_genre_argsTupleScheme getScheme() {
        return new edit_genre_argsTupleScheme();
      }
    }

    private static class edit_genre_argsTupleScheme extends TupleScheme<edit_genre_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_genre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOld_name()) {
          optionals.set(0);
        }
        if (struct.isSetNew_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOld_name()) {
          oprot.writeString(struct.old_name);
        }
        if (struct.isSetNew_name()) {
          oprot.writeString(struct.new_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_genre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.old_name = iprot.readString();
          struct.setOld_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.new_name = iprot.readString();
          struct.setNew_nameIsSet(true);
        }
      }
    }

  }

  public static class edit_genre_result implements org.apache.thrift.TBase<edit_genre_result, edit_genre_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_genre_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_genre_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_genre_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_genre_result.class, metaDataMap);
    }

    public edit_genre_result() {
    }

    public edit_genre_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_genre_result(edit_genre_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public edit_genre_result deepCopy() {
      return new edit_genre_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public edit_genre_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_genre_result)
        return this.equals((edit_genre_result)that);
      return false;
    }

    public boolean equals(edit_genre_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_genre_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_genre_result typedOther = (edit_genre_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_genre_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_genre_resultStandardSchemeFactory implements SchemeFactory {
      public edit_genre_resultStandardScheme getScheme() {
        return new edit_genre_resultStandardScheme();
      }
    }

    private static class edit_genre_resultStandardScheme extends StandardScheme<edit_genre_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_genre_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_genre_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_genre_resultTupleSchemeFactory implements SchemeFactory {
      public edit_genre_resultTupleScheme getScheme() {
        return new edit_genre_resultTupleScheme();
      }
    }

    private static class edit_genre_resultTupleScheme extends TupleScheme<edit_genre_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_genre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_genre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_genre_args implements org.apache.thrift.TBase<delete_genre_args, delete_genre_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_genre_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_genre_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_genre_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_genre_args.class, metaDataMap);
    }

    public delete_genre_args() {
    }

    public delete_genre_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_genre_args(delete_genre_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public delete_genre_args deepCopy() {
      return new delete_genre_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public delete_genre_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_genre_args)
        return this.equals((delete_genre_args)that);
      return false;
    }

    public boolean equals(delete_genre_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_genre_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_genre_args typedOther = (delete_genre_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_genre_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_genre_argsStandardSchemeFactory implements SchemeFactory {
      public delete_genre_argsStandardScheme getScheme() {
        return new delete_genre_argsStandardScheme();
      }
    }

    private static class delete_genre_argsStandardScheme extends StandardScheme<delete_genre_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_genre_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_genre_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_genre_argsTupleSchemeFactory implements SchemeFactory {
      public delete_genre_argsTupleScheme getScheme() {
        return new delete_genre_argsTupleScheme();
      }
    }

    private static class delete_genre_argsTupleScheme extends TupleScheme<delete_genre_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_genre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_genre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class delete_genre_result implements org.apache.thrift.TBase<delete_genre_result, delete_genre_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_genre_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_genre_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_genre_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_genre_result.class, metaDataMap);
    }

    public delete_genre_result() {
    }

    public delete_genre_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_genre_result(delete_genre_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delete_genre_result deepCopy() {
      return new delete_genre_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delete_genre_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_genre_result)
        return this.equals((delete_genre_result)that);
      return false;
    }

    public boolean equals(delete_genre_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_genre_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_genre_result typedOther = (delete_genre_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_genre_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_genre_resultStandardSchemeFactory implements SchemeFactory {
      public delete_genre_resultStandardScheme getScheme() {
        return new delete_genre_resultStandardScheme();
      }
    }

    private static class delete_genre_resultStandardScheme extends StandardScheme<delete_genre_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_genre_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_genre_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_genre_resultTupleSchemeFactory implements SchemeFactory {
      public delete_genre_resultTupleScheme getScheme() {
        return new delete_genre_resultTupleScheme();
      }
    }

    private static class delete_genre_resultTupleScheme extends TupleScheme<delete_genre_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_genre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_genre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class list_genres_args implements org.apache.thrift.TBase<list_genres_args, list_genres_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_genres_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new list_genres_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new list_genres_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_genres_args.class, metaDataMap);
    }

    public list_genres_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_genres_args(list_genres_args other) {
    }

    public list_genres_args deepCopy() {
      return new list_genres_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof list_genres_args)
        return this.equals((list_genres_args)that);
      return false;
    }

    public boolean equals(list_genres_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(list_genres_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      list_genres_args typedOther = (list_genres_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("list_genres_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_genres_argsStandardSchemeFactory implements SchemeFactory {
      public list_genres_argsStandardScheme getScheme() {
        return new list_genres_argsStandardScheme();
      }
    }

    private static class list_genres_argsStandardScheme extends StandardScheme<list_genres_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_genres_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_genres_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_genres_argsTupleSchemeFactory implements SchemeFactory {
      public list_genres_argsTupleScheme getScheme() {
        return new list_genres_argsTupleScheme();
      }
    }

    private static class list_genres_argsTupleScheme extends TupleScheme<list_genres_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_genres_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_genres_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class list_genres_result implements org.apache.thrift.TBase<list_genres_result, list_genres_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_genres_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new list_genres_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new list_genres_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_genres_result.class, metaDataMap);
    }

    public list_genres_result() {
    }

    public list_genres_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_genres_result(list_genres_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public list_genres_result deepCopy() {
      return new list_genres_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public list_genres_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof list_genres_result)
        return this.equals((list_genres_result)that);
      return false;
    }

    public boolean equals(list_genres_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(list_genres_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      list_genres_result typedOther = (list_genres_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("list_genres_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_genres_resultStandardSchemeFactory implements SchemeFactory {
      public list_genres_resultStandardScheme getScheme() {
        return new list_genres_resultStandardScheme();
      }
    }

    private static class list_genres_resultStandardScheme extends StandardScheme<list_genres_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_genres_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_genres_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_genres_resultTupleSchemeFactory implements SchemeFactory {
      public list_genres_resultTupleScheme getScheme() {
        return new list_genres_resultTupleScheme();
      }
    }

    private static class list_genres_resultTupleScheme extends TupleScheme<list_genres_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_genres_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_genres_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_language_args implements org.apache.thrift.TBase<create_language_args, create_language_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_language_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_language_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_language_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_language_args.class, metaDataMap);
    }

    public create_language_args() {
    }

    public create_language_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_language_args(create_language_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public create_language_args deepCopy() {
      return new create_language_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public create_language_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_language_args)
        return this.equals((create_language_args)that);
      return false;
    }

    public boolean equals(create_language_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_language_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_language_args typedOther = (create_language_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_language_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_language_argsStandardSchemeFactory implements SchemeFactory {
      public create_language_argsStandardScheme getScheme() {
        return new create_language_argsStandardScheme();
      }
    }

    private static class create_language_argsStandardScheme extends StandardScheme<create_language_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_language_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_language_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_language_argsTupleSchemeFactory implements SchemeFactory {
      public create_language_argsTupleScheme getScheme() {
        return new create_language_argsTupleScheme();
      }
    }

    private static class create_language_argsTupleScheme extends TupleScheme<create_language_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_language_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_language_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class create_language_result implements org.apache.thrift.TBase<create_language_result, create_language_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_language_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_language_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_language_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_language_result.class, metaDataMap);
    }

    public create_language_result() {
    }

    public create_language_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_language_result(create_language_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_language_result deepCopy() {
      return new create_language_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_language_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_language_result)
        return this.equals((create_language_result)that);
      return false;
    }

    public boolean equals(create_language_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_language_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_language_result typedOther = (create_language_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_language_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_language_resultStandardSchemeFactory implements SchemeFactory {
      public create_language_resultStandardScheme getScheme() {
        return new create_language_resultStandardScheme();
      }
    }

    private static class create_language_resultStandardScheme extends StandardScheme<create_language_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_language_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_language_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_language_resultTupleSchemeFactory implements SchemeFactory {
      public create_language_resultTupleScheme getScheme() {
        return new create_language_resultTupleScheme();
      }
    }

    private static class create_language_resultTupleScheme extends TupleScheme<create_language_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_language_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_language_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_language_args implements org.apache.thrift.TBase<edit_language_args, edit_language_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_language_args");

    private static final org.apache.thrift.protocol.TField OLD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("old_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("new_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_language_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_language_argsTupleSchemeFactory());
    }

    public String old_name; // required
    public String new_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_NAME((short)1, "old_name"),
      NEW_NAME((short)2, "new_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_NAME
            return OLD_NAME;
          case 2: // NEW_NAME
            return NEW_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_NAME, new org.apache.thrift.meta_data.FieldMetaData("old_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_NAME, new org.apache.thrift.meta_data.FieldMetaData("new_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_language_args.class, metaDataMap);
    }

    public edit_language_args() {
    }

    public edit_language_args(
      String old_name,
      String new_name)
    {
      this();
      this.old_name = old_name;
      this.new_name = new_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_language_args(edit_language_args other) {
      if (other.isSetOld_name()) {
        this.old_name = other.old_name;
      }
      if (other.isSetNew_name()) {
        this.new_name = other.new_name;
      }
    }

    public edit_language_args deepCopy() {
      return new edit_language_args(this);
    }

    @Override
    public void clear() {
      this.old_name = null;
      this.new_name = null;
    }

    public String getOld_name() {
      return this.old_name;
    }

    public edit_language_args setOld_name(String old_name) {
      this.old_name = old_name;
      return this;
    }

    public void unsetOld_name() {
      this.old_name = null;
    }

    /** Returns true if field old_name is set (has been assigned a value) and false otherwise */
    public boolean isSetOld_name() {
      return this.old_name != null;
    }

    public void setOld_nameIsSet(boolean value) {
      if (!value) {
        this.old_name = null;
      }
    }

    public String getNew_name() {
      return this.new_name;
    }

    public edit_language_args setNew_name(String new_name) {
      this.new_name = new_name;
      return this;
    }

    public void unsetNew_name() {
      this.new_name = null;
    }

    /** Returns true if field new_name is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_name() {
      return this.new_name != null;
    }

    public void setNew_nameIsSet(boolean value) {
      if (!value) {
        this.new_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_NAME:
        if (value == null) {
          unsetOld_name();
        } else {
          setOld_name((String)value);
        }
        break;

      case NEW_NAME:
        if (value == null) {
          unsetNew_name();
        } else {
          setNew_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_NAME:
        return getOld_name();

      case NEW_NAME:
        return getNew_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_NAME:
        return isSetOld_name();
      case NEW_NAME:
        return isSetNew_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_language_args)
        return this.equals((edit_language_args)that);
      return false;
    }

    public boolean equals(edit_language_args that) {
      if (that == null)
        return false;

      boolean this_present_old_name = true && this.isSetOld_name();
      boolean that_present_old_name = true && that.isSetOld_name();
      if (this_present_old_name || that_present_old_name) {
        if (!(this_present_old_name && that_present_old_name))
          return false;
        if (!this.old_name.equals(that.old_name))
          return false;
      }

      boolean this_present_new_name = true && this.isSetNew_name();
      boolean that_present_new_name = true && that.isSetNew_name();
      if (this_present_new_name || that_present_new_name) {
        if (!(this_present_new_name && that_present_new_name))
          return false;
        if (!this.new_name.equals(that.new_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_language_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_language_args typedOther = (edit_language_args)other;

      lastComparison = Boolean.valueOf(isSetOld_name()).compareTo(typedOther.isSetOld_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOld_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_name, typedOther.old_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNew_name()).compareTo(typedOther.isSetNew_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_name, typedOther.new_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_language_args(");
      boolean first = true;

      sb.append("old_name:");
      if (this.old_name == null) {
        sb.append("null");
      } else {
        sb.append(this.old_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_name:");
      if (this.new_name == null) {
        sb.append("null");
      } else {
        sb.append(this.new_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_language_argsStandardSchemeFactory implements SchemeFactory {
      public edit_language_argsStandardScheme getScheme() {
        return new edit_language_argsStandardScheme();
      }
    }

    private static class edit_language_argsStandardScheme extends StandardScheme<edit_language_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_language_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.old_name = iprot.readString();
                struct.setOld_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.new_name = iprot.readString();
                struct.setNew_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_language_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.old_name != null) {
          oprot.writeFieldBegin(OLD_NAME_FIELD_DESC);
          oprot.writeString(struct.old_name);
          oprot.writeFieldEnd();
        }
        if (struct.new_name != null) {
          oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
          oprot.writeString(struct.new_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_language_argsTupleSchemeFactory implements SchemeFactory {
      public edit_language_argsTupleScheme getScheme() {
        return new edit_language_argsTupleScheme();
      }
    }

    private static class edit_language_argsTupleScheme extends TupleScheme<edit_language_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_language_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOld_name()) {
          optionals.set(0);
        }
        if (struct.isSetNew_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOld_name()) {
          oprot.writeString(struct.old_name);
        }
        if (struct.isSetNew_name()) {
          oprot.writeString(struct.new_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_language_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.old_name = iprot.readString();
          struct.setOld_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.new_name = iprot.readString();
          struct.setNew_nameIsSet(true);
        }
      }
    }

  }

  public static class edit_language_result implements org.apache.thrift.TBase<edit_language_result, edit_language_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_language_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_language_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_language_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_language_result.class, metaDataMap);
    }

    public edit_language_result() {
    }

    public edit_language_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_language_result(edit_language_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public edit_language_result deepCopy() {
      return new edit_language_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public edit_language_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_language_result)
        return this.equals((edit_language_result)that);
      return false;
    }

    public boolean equals(edit_language_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_language_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_language_result typedOther = (edit_language_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_language_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_language_resultStandardSchemeFactory implements SchemeFactory {
      public edit_language_resultStandardScheme getScheme() {
        return new edit_language_resultStandardScheme();
      }
    }

    private static class edit_language_resultStandardScheme extends StandardScheme<edit_language_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_language_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_language_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_language_resultTupleSchemeFactory implements SchemeFactory {
      public edit_language_resultTupleScheme getScheme() {
        return new edit_language_resultTupleScheme();
      }
    }

    private static class edit_language_resultTupleScheme extends TupleScheme<edit_language_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_language_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_language_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_language_args implements org.apache.thrift.TBase<delete_language_args, delete_language_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_language_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_language_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_language_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_language_args.class, metaDataMap);
    }

    public delete_language_args() {
    }

    public delete_language_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_language_args(delete_language_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public delete_language_args deepCopy() {
      return new delete_language_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public delete_language_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_language_args)
        return this.equals((delete_language_args)that);
      return false;
    }

    public boolean equals(delete_language_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_language_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_language_args typedOther = (delete_language_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_language_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_language_argsStandardSchemeFactory implements SchemeFactory {
      public delete_language_argsStandardScheme getScheme() {
        return new delete_language_argsStandardScheme();
      }
    }

    private static class delete_language_argsStandardScheme extends StandardScheme<delete_language_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_language_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_language_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_language_argsTupleSchemeFactory implements SchemeFactory {
      public delete_language_argsTupleScheme getScheme() {
        return new delete_language_argsTupleScheme();
      }
    }

    private static class delete_language_argsTupleScheme extends TupleScheme<delete_language_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_language_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_language_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class delete_language_result implements org.apache.thrift.TBase<delete_language_result, delete_language_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_language_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_language_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_language_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_language_result.class, metaDataMap);
    }

    public delete_language_result() {
    }

    public delete_language_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_language_result(delete_language_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delete_language_result deepCopy() {
      return new delete_language_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delete_language_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_language_result)
        return this.equals((delete_language_result)that);
      return false;
    }

    public boolean equals(delete_language_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_language_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_language_result typedOther = (delete_language_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_language_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_language_resultStandardSchemeFactory implements SchemeFactory {
      public delete_language_resultStandardScheme getScheme() {
        return new delete_language_resultStandardScheme();
      }
    }

    private static class delete_language_resultStandardScheme extends StandardScheme<delete_language_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_language_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_language_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_language_resultTupleSchemeFactory implements SchemeFactory {
      public delete_language_resultTupleScheme getScheme() {
        return new delete_language_resultTupleScheme();
      }
    }

    private static class delete_language_resultTupleScheme extends TupleScheme<delete_language_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_language_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_language_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class list_languages_args implements org.apache.thrift.TBase<list_languages_args, list_languages_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_languages_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new list_languages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new list_languages_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_languages_args.class, metaDataMap);
    }

    public list_languages_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_languages_args(list_languages_args other) {
    }

    public list_languages_args deepCopy() {
      return new list_languages_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof list_languages_args)
        return this.equals((list_languages_args)that);
      return false;
    }

    public boolean equals(list_languages_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(list_languages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      list_languages_args typedOther = (list_languages_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("list_languages_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_languages_argsStandardSchemeFactory implements SchemeFactory {
      public list_languages_argsStandardScheme getScheme() {
        return new list_languages_argsStandardScheme();
      }
    }

    private static class list_languages_argsStandardScheme extends StandardScheme<list_languages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_languages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_languages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_languages_argsTupleSchemeFactory implements SchemeFactory {
      public list_languages_argsTupleScheme getScheme() {
        return new list_languages_argsTupleScheme();
      }
    }

    private static class list_languages_argsTupleScheme extends TupleScheme<list_languages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_languages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_languages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class list_languages_result implements org.apache.thrift.TBase<list_languages_result, list_languages_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_languages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new list_languages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new list_languages_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_languages_result.class, metaDataMap);
    }

    public list_languages_result() {
    }

    public list_languages_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_languages_result(list_languages_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public list_languages_result deepCopy() {
      return new list_languages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public list_languages_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof list_languages_result)
        return this.equals((list_languages_result)that);
      return false;
    }

    public boolean equals(list_languages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(list_languages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      list_languages_result typedOther = (list_languages_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("list_languages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_languages_resultStandardSchemeFactory implements SchemeFactory {
      public list_languages_resultStandardScheme getScheme() {
        return new list_languages_resultStandardScheme();
      }
    }

    private static class list_languages_resultStandardScheme extends StandardScheme<list_languages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_languages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_languages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_languages_resultTupleSchemeFactory implements SchemeFactory {
      public list_languages_resultTupleScheme getScheme() {
        return new list_languages_resultTupleScheme();
      }
    }

    private static class list_languages_resultTupleScheme extends TupleScheme<list_languages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_languages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_languages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_user_args implements org.apache.thrift.TBase<create_user_args, create_user_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_user_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FULL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("full_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MOBILE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile_number", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField MOBILE_DIAL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile_dial_code", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DOB_FIELD_DESC = new org.apache.thrift.protocol.TField("dob", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField BIO_FIELD_DESC = new org.apache.thrift.protocol.TField("bio", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField GENRES_FIELD_DESC = new org.apache.thrift.protocol.TField("genres", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField LANGUAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("languages", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField PRIVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("privilege", org.apache.thrift.protocol.TType.I32, (short)13);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)14);
    private static final org.apache.thrift.protocol.TField TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("time_created", org.apache.thrift.protocol.TType.I32, (short)15);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_user_argsTupleSchemeFactory());
    }

    public String id; // required
    public String full_name; // required
    public String user_name; // required
    public String email; // required
    public String mobile_number; // required
    public String mobile_dial_code; // required
    public String dob; // required
    public String gender; // required
    public String address; // required
    public String bio; // required
    public String genres; // required
    public String languages; // required
    public int privilege; // required
    public int status; // required
    public int time_created; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      FULL_NAME((short)2, "full_name"),
      USER_NAME((short)3, "user_name"),
      EMAIL((short)4, "email"),
      MOBILE_NUMBER((short)5, "mobile_number"),
      MOBILE_DIAL_CODE((short)6, "mobile_dial_code"),
      DOB((short)7, "dob"),
      GENDER((short)8, "gender"),
      ADDRESS((short)9, "address"),
      BIO((short)10, "bio"),
      GENRES((short)11, "genres"),
      LANGUAGES((short)12, "languages"),
      PRIVILEGE((short)13, "privilege"),
      STATUS((short)14, "status"),
      TIME_CREATED((short)15, "time_created");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // FULL_NAME
            return FULL_NAME;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // EMAIL
            return EMAIL;
          case 5: // MOBILE_NUMBER
            return MOBILE_NUMBER;
          case 6: // MOBILE_DIAL_CODE
            return MOBILE_DIAL_CODE;
          case 7: // DOB
            return DOB;
          case 8: // GENDER
            return GENDER;
          case 9: // ADDRESS
            return ADDRESS;
          case 10: // BIO
            return BIO;
          case 11: // GENRES
            return GENRES;
          case 12: // LANGUAGES
            return LANGUAGES;
          case 13: // PRIVILEGE
            return PRIVILEGE;
          case 14: // STATUS
            return STATUS;
          case 15: // TIME_CREATED
            return TIME_CREATED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIVILEGE_ISSET_ID = 0;
    private static final int __STATUS_ISSET_ID = 1;
    private static final int __TIME_CREATED_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FULL_NAME, new org.apache.thrift.meta_data.FieldMetaData("full_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("mobile_number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_DIAL_CODE, new org.apache.thrift.meta_data.FieldMetaData("mobile_dial_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOB, new org.apache.thrift.meta_data.FieldMetaData("dob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BIO, new org.apache.thrift.meta_data.FieldMetaData("bio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENRES, new org.apache.thrift.meta_data.FieldMetaData("genres", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LANGUAGES, new org.apache.thrift.meta_data.FieldMetaData("languages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIVILEGE, new org.apache.thrift.meta_data.FieldMetaData("privilege", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_user_args.class, metaDataMap);
    }

    public create_user_args() {
    }

    public create_user_args(
      String id,
      String full_name,
      String user_name,
      String email,
      String mobile_number,
      String mobile_dial_code,
      String dob,
      String gender,
      String address,
      String bio,
      String genres,
      String languages,
      int privilege,
      int status,
      int time_created)
    {
      this();
      this.id = id;
      this.full_name = full_name;
      this.user_name = user_name;
      this.email = email;
      this.mobile_number = mobile_number;
      this.mobile_dial_code = mobile_dial_code;
      this.dob = dob;
      this.gender = gender;
      this.address = address;
      this.bio = bio;
      this.genres = genres;
      this.languages = languages;
      this.privilege = privilege;
      setPrivilegeIsSet(true);
      this.status = status;
      setStatusIsSet(true);
      this.time_created = time_created;
      setTime_createdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_user_args(create_user_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetFull_name()) {
        this.full_name = other.full_name;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetMobile_number()) {
        this.mobile_number = other.mobile_number;
      }
      if (other.isSetMobile_dial_code()) {
        this.mobile_dial_code = other.mobile_dial_code;
      }
      if (other.isSetDob()) {
        this.dob = other.dob;
      }
      if (other.isSetGender()) {
        this.gender = other.gender;
      }
      if (other.isSetAddress()) {
        this.address = other.address;
      }
      if (other.isSetBio()) {
        this.bio = other.bio;
      }
      if (other.isSetGenres()) {
        this.genres = other.genres;
      }
      if (other.isSetLanguages()) {
        this.languages = other.languages;
      }
      this.privilege = other.privilege;
      this.status = other.status;
      this.time_created = other.time_created;
    }

    public create_user_args deepCopy() {
      return new create_user_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.full_name = null;
      this.user_name = null;
      this.email = null;
      this.mobile_number = null;
      this.mobile_dial_code = null;
      this.dob = null;
      this.gender = null;
      this.address = null;
      this.bio = null;
      this.genres = null;
      this.languages = null;
      setPrivilegeIsSet(false);
      this.privilege = 0;
      setStatusIsSet(false);
      this.status = 0;
      setTime_createdIsSet(false);
      this.time_created = 0;
    }

    public String getId() {
      return this.id;
    }

    public create_user_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getFull_name() {
      return this.full_name;
    }

    public create_user_args setFull_name(String full_name) {
      this.full_name = full_name;
      return this;
    }

    public void unsetFull_name() {
      this.full_name = null;
    }

    /** Returns true if field full_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFull_name() {
      return this.full_name != null;
    }

    public void setFull_nameIsSet(boolean value) {
      if (!value) {
        this.full_name = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_user_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public create_user_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getMobile_number() {
      return this.mobile_number;
    }

    public create_user_args setMobile_number(String mobile_number) {
      this.mobile_number = mobile_number;
      return this;
    }

    public void unsetMobile_number() {
      this.mobile_number = null;
    }

    /** Returns true if field mobile_number is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile_number() {
      return this.mobile_number != null;
    }

    public void setMobile_numberIsSet(boolean value) {
      if (!value) {
        this.mobile_number = null;
      }
    }

    public String getMobile_dial_code() {
      return this.mobile_dial_code;
    }

    public create_user_args setMobile_dial_code(String mobile_dial_code) {
      this.mobile_dial_code = mobile_dial_code;
      return this;
    }

    public void unsetMobile_dial_code() {
      this.mobile_dial_code = null;
    }

    /** Returns true if field mobile_dial_code is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile_dial_code() {
      return this.mobile_dial_code != null;
    }

    public void setMobile_dial_codeIsSet(boolean value) {
      if (!value) {
        this.mobile_dial_code = null;
      }
    }

    public String getDob() {
      return this.dob;
    }

    public create_user_args setDob(String dob) {
      this.dob = dob;
      return this;
    }

    public void unsetDob() {
      this.dob = null;
    }

    /** Returns true if field dob is set (has been assigned a value) and false otherwise */
    public boolean isSetDob() {
      return this.dob != null;
    }

    public void setDobIsSet(boolean value) {
      if (!value) {
        this.dob = null;
      }
    }

    public String getGender() {
      return this.gender;
    }

    public create_user_args setGender(String gender) {
      this.gender = gender;
      return this;
    }

    public void unsetGender() {
      this.gender = null;
    }

    /** Returns true if field gender is set (has been assigned a value) and false otherwise */
    public boolean isSetGender() {
      return this.gender != null;
    }

    public void setGenderIsSet(boolean value) {
      if (!value) {
        this.gender = null;
      }
    }

    public String getAddress() {
      return this.address;
    }

    public create_user_args setAddress(String address) {
      this.address = address;
      return this;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public String getBio() {
      return this.bio;
    }

    public create_user_args setBio(String bio) {
      this.bio = bio;
      return this;
    }

    public void unsetBio() {
      this.bio = null;
    }

    /** Returns true if field bio is set (has been assigned a value) and false otherwise */
    public boolean isSetBio() {
      return this.bio != null;
    }

    public void setBioIsSet(boolean value) {
      if (!value) {
        this.bio = null;
      }
    }

    public String getGenres() {
      return this.genres;
    }

    public create_user_args setGenres(String genres) {
      this.genres = genres;
      return this;
    }

    public void unsetGenres() {
      this.genres = null;
    }

    /** Returns true if field genres is set (has been assigned a value) and false otherwise */
    public boolean isSetGenres() {
      return this.genres != null;
    }

    public void setGenresIsSet(boolean value) {
      if (!value) {
        this.genres = null;
      }
    }

    public String getLanguages() {
      return this.languages;
    }

    public create_user_args setLanguages(String languages) {
      this.languages = languages;
      return this;
    }

    public void unsetLanguages() {
      this.languages = null;
    }

    /** Returns true if field languages is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguages() {
      return this.languages != null;
    }

    public void setLanguagesIsSet(boolean value) {
      if (!value) {
        this.languages = null;
      }
    }

    public int getPrivilege() {
      return this.privilege;
    }

    public create_user_args setPrivilege(int privilege) {
      this.privilege = privilege;
      setPrivilegeIsSet(true);
      return this;
    }

    public void unsetPrivilege() {
      __isset_bit_vector.clear(__PRIVILEGE_ISSET_ID);
    }

    /** Returns true if field privilege is set (has been assigned a value) and false otherwise */
    public boolean isSetPrivilege() {
      return __isset_bit_vector.get(__PRIVILEGE_ISSET_ID);
    }

    public void setPrivilegeIsSet(boolean value) {
      __isset_bit_vector.set(__PRIVILEGE_ISSET_ID, value);
    }

    public int getStatus() {
      return this.status;
    }

    public create_user_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bit_vector.clear(__STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return __isset_bit_vector.get(__STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bit_vector.set(__STATUS_ISSET_ID, value);
    }

    public int getTime_created() {
      return this.time_created;
    }

    public create_user_args setTime_created(int time_created) {
      this.time_created = time_created;
      setTime_createdIsSet(true);
      return this;
    }

    public void unsetTime_created() {
      __isset_bit_vector.clear(__TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetTime_created() {
      return __isset_bit_vector.get(__TIME_CREATED_ISSET_ID);
    }

    public void setTime_createdIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_CREATED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case FULL_NAME:
        if (value == null) {
          unsetFull_name();
        } else {
          setFull_name((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case MOBILE_NUMBER:
        if (value == null) {
          unsetMobile_number();
        } else {
          setMobile_number((String)value);
        }
        break;

      case MOBILE_DIAL_CODE:
        if (value == null) {
          unsetMobile_dial_code();
        } else {
          setMobile_dial_code((String)value);
        }
        break;

      case DOB:
        if (value == null) {
          unsetDob();
        } else {
          setDob((String)value);
        }
        break;

      case GENDER:
        if (value == null) {
          unsetGender();
        } else {
          setGender((String)value);
        }
        break;

      case ADDRESS:
        if (value == null) {
          unsetAddress();
        } else {
          setAddress((String)value);
        }
        break;

      case BIO:
        if (value == null) {
          unsetBio();
        } else {
          setBio((String)value);
        }
        break;

      case GENRES:
        if (value == null) {
          unsetGenres();
        } else {
          setGenres((String)value);
        }
        break;

      case LANGUAGES:
        if (value == null) {
          unsetLanguages();
        } else {
          setLanguages((String)value);
        }
        break;

      case PRIVILEGE:
        if (value == null) {
          unsetPrivilege();
        } else {
          setPrivilege((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case TIME_CREATED:
        if (value == null) {
          unsetTime_created();
        } else {
          setTime_created((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case FULL_NAME:
        return getFull_name();

      case USER_NAME:
        return getUser_name();

      case EMAIL:
        return getEmail();

      case MOBILE_NUMBER:
        return getMobile_number();

      case MOBILE_DIAL_CODE:
        return getMobile_dial_code();

      case DOB:
        return getDob();

      case GENDER:
        return getGender();

      case ADDRESS:
        return getAddress();

      case BIO:
        return getBio();

      case GENRES:
        return getGenres();

      case LANGUAGES:
        return getLanguages();

      case PRIVILEGE:
        return Integer.valueOf(getPrivilege());

      case STATUS:
        return Integer.valueOf(getStatus());

      case TIME_CREATED:
        return Integer.valueOf(getTime_created());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case FULL_NAME:
        return isSetFull_name();
      case USER_NAME:
        return isSetUser_name();
      case EMAIL:
        return isSetEmail();
      case MOBILE_NUMBER:
        return isSetMobile_number();
      case MOBILE_DIAL_CODE:
        return isSetMobile_dial_code();
      case DOB:
        return isSetDob();
      case GENDER:
        return isSetGender();
      case ADDRESS:
        return isSetAddress();
      case BIO:
        return isSetBio();
      case GENRES:
        return isSetGenres();
      case LANGUAGES:
        return isSetLanguages();
      case PRIVILEGE:
        return isSetPrivilege();
      case STATUS:
        return isSetStatus();
      case TIME_CREATED:
        return isSetTime_created();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_user_args)
        return this.equals((create_user_args)that);
      return false;
    }

    public boolean equals(create_user_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_full_name = true && this.isSetFull_name();
      boolean that_present_full_name = true && that.isSetFull_name();
      if (this_present_full_name || that_present_full_name) {
        if (!(this_present_full_name && that_present_full_name))
          return false;
        if (!this.full_name.equals(that.full_name))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_mobile_number = true && this.isSetMobile_number();
      boolean that_present_mobile_number = true && that.isSetMobile_number();
      if (this_present_mobile_number || that_present_mobile_number) {
        if (!(this_present_mobile_number && that_present_mobile_number))
          return false;
        if (!this.mobile_number.equals(that.mobile_number))
          return false;
      }

      boolean this_present_mobile_dial_code = true && this.isSetMobile_dial_code();
      boolean that_present_mobile_dial_code = true && that.isSetMobile_dial_code();
      if (this_present_mobile_dial_code || that_present_mobile_dial_code) {
        if (!(this_present_mobile_dial_code && that_present_mobile_dial_code))
          return false;
        if (!this.mobile_dial_code.equals(that.mobile_dial_code))
          return false;
      }

      boolean this_present_dob = true && this.isSetDob();
      boolean that_present_dob = true && that.isSetDob();
      if (this_present_dob || that_present_dob) {
        if (!(this_present_dob && that_present_dob))
          return false;
        if (!this.dob.equals(that.dob))
          return false;
      }

      boolean this_present_gender = true && this.isSetGender();
      boolean that_present_gender = true && that.isSetGender();
      if (this_present_gender || that_present_gender) {
        if (!(this_present_gender && that_present_gender))
          return false;
        if (!this.gender.equals(that.gender))
          return false;
      }

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_bio = true && this.isSetBio();
      boolean that_present_bio = true && that.isSetBio();
      if (this_present_bio || that_present_bio) {
        if (!(this_present_bio && that_present_bio))
          return false;
        if (!this.bio.equals(that.bio))
          return false;
      }

      boolean this_present_genres = true && this.isSetGenres();
      boolean that_present_genres = true && that.isSetGenres();
      if (this_present_genres || that_present_genres) {
        if (!(this_present_genres && that_present_genres))
          return false;
        if (!this.genres.equals(that.genres))
          return false;
      }

      boolean this_present_languages = true && this.isSetLanguages();
      boolean that_present_languages = true && that.isSetLanguages();
      if (this_present_languages || that_present_languages) {
        if (!(this_present_languages && that_present_languages))
          return false;
        if (!this.languages.equals(that.languages))
          return false;
      }

      boolean this_present_privilege = true;
      boolean that_present_privilege = true;
      if (this_present_privilege || that_present_privilege) {
        if (!(this_present_privilege && that_present_privilege))
          return false;
        if (this.privilege != that.privilege)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_time_created = true;
      boolean that_present_time_created = true;
      if (this_present_time_created || that_present_time_created) {
        if (!(this_present_time_created && that_present_time_created))
          return false;
        if (this.time_created != that.time_created)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_user_args typedOther = (create_user_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFull_name()).compareTo(typedOther.isSetFull_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFull_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.full_name, typedOther.full_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile_number()).compareTo(typedOther.isSetMobile_number());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile_number()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile_number, typedOther.mobile_number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile_dial_code()).compareTo(typedOther.isSetMobile_dial_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile_dial_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile_dial_code, typedOther.mobile_dial_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDob()).compareTo(typedOther.isSetDob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dob, typedOther.dob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGender()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBio()).compareTo(typedOther.isSetBio());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBio()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bio, typedOther.bio);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenres()).compareTo(typedOther.isSetGenres());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenres()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genres, typedOther.genres);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLanguages()).compareTo(typedOther.isSetLanguages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languages, typedOther.languages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrivilege()).compareTo(typedOther.isSetPrivilege());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrivilege()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilege, typedOther.privilege);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime_created()).compareTo(typedOther.isSetTime_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_created, typedOther.time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_user_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("full_name:");
      if (this.full_name == null) {
        sb.append("null");
      } else {
        sb.append(this.full_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile_number:");
      if (this.mobile_number == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile_number);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile_dial_code:");
      if (this.mobile_dial_code == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile_dial_code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dob:");
      if (this.dob == null) {
        sb.append("null");
      } else {
        sb.append(this.dob);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gender:");
      if (this.gender == null) {
        sb.append("null");
      } else {
        sb.append(this.gender);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bio:");
      if (this.bio == null) {
        sb.append("null");
      } else {
        sb.append(this.bio);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genres:");
      if (this.genres == null) {
        sb.append("null");
      } else {
        sb.append(this.genres);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("languages:");
      if (this.languages == null) {
        sb.append("null");
      } else {
        sb.append(this.languages);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privilege:");
      sb.append(this.privilege);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time_created:");
      sb.append(this.time_created);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_user_argsStandardSchemeFactory implements SchemeFactory {
      public create_user_argsStandardScheme getScheme() {
        return new create_user_argsStandardScheme();
      }
    }

    private static class create_user_argsStandardScheme extends StandardScheme<create_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FULL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.full_name = iprot.readString();
                struct.setFull_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MOBILE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile_number = iprot.readString();
                struct.setMobile_numberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MOBILE_DIAL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile_dial_code = iprot.readString();
                struct.setMobile_dial_codeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dob = iprot.readString();
                struct.setDobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // GENDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gender = iprot.readString();
                struct.setGenderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.address = iprot.readString();
                struct.setAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // BIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bio = iprot.readString();
                struct.setBioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // GENRES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.genres = iprot.readString();
                struct.setGenresIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // LANGUAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.languages = iprot.readString();
                struct.setLanguagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // PRIVILEGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.privilege = iprot.readI32();
                struct.setPrivilegeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time_created = iprot.readI32();
                struct.setTime_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.full_name != null) {
          oprot.writeFieldBegin(FULL_NAME_FIELD_DESC);
          oprot.writeString(struct.full_name);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.mobile_number != null) {
          oprot.writeFieldBegin(MOBILE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.mobile_number);
          oprot.writeFieldEnd();
        }
        if (struct.mobile_dial_code != null) {
          oprot.writeFieldBegin(MOBILE_DIAL_CODE_FIELD_DESC);
          oprot.writeString(struct.mobile_dial_code);
          oprot.writeFieldEnd();
        }
        if (struct.dob != null) {
          oprot.writeFieldBegin(DOB_FIELD_DESC);
          oprot.writeString(struct.dob);
          oprot.writeFieldEnd();
        }
        if (struct.gender != null) {
          oprot.writeFieldBegin(GENDER_FIELD_DESC);
          oprot.writeString(struct.gender);
          oprot.writeFieldEnd();
        }
        if (struct.address != null) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
        if (struct.bio != null) {
          oprot.writeFieldBegin(BIO_FIELD_DESC);
          oprot.writeString(struct.bio);
          oprot.writeFieldEnd();
        }
        if (struct.genres != null) {
          oprot.writeFieldBegin(GENRES_FIELD_DESC);
          oprot.writeString(struct.genres);
          oprot.writeFieldEnd();
        }
        if (struct.languages != null) {
          oprot.writeFieldBegin(LANGUAGES_FIELD_DESC);
          oprot.writeString(struct.languages);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
        oprot.writeI32(struct.privilege);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_user_argsTupleSchemeFactory implements SchemeFactory {
      public create_user_argsTupleScheme getScheme() {
        return new create_user_argsTupleScheme();
      }
    }

    private static class create_user_argsTupleScheme extends TupleScheme<create_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetFull_name()) {
          optionals.set(1);
        }
        if (struct.isSetUser_name()) {
          optionals.set(2);
        }
        if (struct.isSetEmail()) {
          optionals.set(3);
        }
        if (struct.isSetMobile_number()) {
          optionals.set(4);
        }
        if (struct.isSetMobile_dial_code()) {
          optionals.set(5);
        }
        if (struct.isSetDob()) {
          optionals.set(6);
        }
        if (struct.isSetGender()) {
          optionals.set(7);
        }
        if (struct.isSetAddress()) {
          optionals.set(8);
        }
        if (struct.isSetBio()) {
          optionals.set(9);
        }
        if (struct.isSetGenres()) {
          optionals.set(10);
        }
        if (struct.isSetLanguages()) {
          optionals.set(11);
        }
        if (struct.isSetPrivilege()) {
          optionals.set(12);
        }
        if (struct.isSetStatus()) {
          optionals.set(13);
        }
        if (struct.isSetTime_created()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetFull_name()) {
          oprot.writeString(struct.full_name);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetMobile_number()) {
          oprot.writeString(struct.mobile_number);
        }
        if (struct.isSetMobile_dial_code()) {
          oprot.writeString(struct.mobile_dial_code);
        }
        if (struct.isSetDob()) {
          oprot.writeString(struct.dob);
        }
        if (struct.isSetGender()) {
          oprot.writeString(struct.gender);
        }
        if (struct.isSetAddress()) {
          oprot.writeString(struct.address);
        }
        if (struct.isSetBio()) {
          oprot.writeString(struct.bio);
        }
        if (struct.isSetGenres()) {
          oprot.writeString(struct.genres);
        }
        if (struct.isSetLanguages()) {
          oprot.writeString(struct.languages);
        }
        if (struct.isSetPrivilege()) {
          oprot.writeI32(struct.privilege);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetTime_created()) {
          oprot.writeI32(struct.time_created);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.full_name = iprot.readString();
          struct.setFull_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(4)) {
          struct.mobile_number = iprot.readString();
          struct.setMobile_numberIsSet(true);
        }
        if (incoming.get(5)) {
          struct.mobile_dial_code = iprot.readString();
          struct.setMobile_dial_codeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.dob = iprot.readString();
          struct.setDobIsSet(true);
        }
        if (incoming.get(7)) {
          struct.gender = iprot.readString();
          struct.setGenderIsSet(true);
        }
        if (incoming.get(8)) {
          struct.address = iprot.readString();
          struct.setAddressIsSet(true);
        }
        if (incoming.get(9)) {
          struct.bio = iprot.readString();
          struct.setBioIsSet(true);
        }
        if (incoming.get(10)) {
          struct.genres = iprot.readString();
          struct.setGenresIsSet(true);
        }
        if (incoming.get(11)) {
          struct.languages = iprot.readString();
          struct.setLanguagesIsSet(true);
        }
        if (incoming.get(12)) {
          struct.privilege = iprot.readI32();
          struct.setPrivilegeIsSet(true);
        }
        if (incoming.get(13)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(14)) {
          struct.time_created = iprot.readI32();
          struct.setTime_createdIsSet(true);
        }
      }
    }

  }

  public static class create_user_result implements org.apache.thrift.TBase<create_user_result, create_user_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_user_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_user_result.class, metaDataMap);
    }

    public create_user_result() {
    }

    public create_user_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_user_result(create_user_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_user_result deepCopy() {
      return new create_user_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_user_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_user_result)
        return this.equals((create_user_result)that);
      return false;
    }

    public boolean equals(create_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_user_result typedOther = (create_user_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_user_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_user_resultStandardSchemeFactory implements SchemeFactory {
      public create_user_resultStandardScheme getScheme() {
        return new create_user_resultStandardScheme();
      }
    }

    private static class create_user_resultStandardScheme extends StandardScheme<create_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_user_resultTupleSchemeFactory implements SchemeFactory {
      public create_user_resultTupleScheme getScheme() {
        return new create_user_resultTupleScheme();
      }
    }

    private static class create_user_resultTupleScheme extends TupleScheme<create_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_user_basic_info_args implements org.apache.thrift.TBase<edit_user_basic_info_args, edit_user_basic_info_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_basic_info_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FULL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("full_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DOB_FIELD_DESC = new org.apache.thrift.protocol.TField("dob", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_basic_info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_basic_info_argsTupleSchemeFactory());
    }

    public String id; // required
    public String full_name; // required
    public String gender; // required
    public String dob; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      FULL_NAME((short)2, "full_name"),
      GENDER((short)3, "gender"),
      DOB((short)4, "dob");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // FULL_NAME
            return FULL_NAME;
          case 3: // GENDER
            return GENDER;
          case 4: // DOB
            return DOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FULL_NAME, new org.apache.thrift.meta_data.FieldMetaData("full_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOB, new org.apache.thrift.meta_data.FieldMetaData("dob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_basic_info_args.class, metaDataMap);
    }

    public edit_user_basic_info_args() {
    }

    public edit_user_basic_info_args(
      String id,
      String full_name,
      String gender,
      String dob)
    {
      this();
      this.id = id;
      this.full_name = full_name;
      this.gender = gender;
      this.dob = dob;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_basic_info_args(edit_user_basic_info_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetFull_name()) {
        this.full_name = other.full_name;
      }
      if (other.isSetGender()) {
        this.gender = other.gender;
      }
      if (other.isSetDob()) {
        this.dob = other.dob;
      }
    }

    public edit_user_basic_info_args deepCopy() {
      return new edit_user_basic_info_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.full_name = null;
      this.gender = null;
      this.dob = null;
    }

    public String getId() {
      return this.id;
    }

    public edit_user_basic_info_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getFull_name() {
      return this.full_name;
    }

    public edit_user_basic_info_args setFull_name(String full_name) {
      this.full_name = full_name;
      return this;
    }

    public void unsetFull_name() {
      this.full_name = null;
    }

    /** Returns true if field full_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFull_name() {
      return this.full_name != null;
    }

    public void setFull_nameIsSet(boolean value) {
      if (!value) {
        this.full_name = null;
      }
    }

    public String getGender() {
      return this.gender;
    }

    public edit_user_basic_info_args setGender(String gender) {
      this.gender = gender;
      return this;
    }

    public void unsetGender() {
      this.gender = null;
    }

    /** Returns true if field gender is set (has been assigned a value) and false otherwise */
    public boolean isSetGender() {
      return this.gender != null;
    }

    public void setGenderIsSet(boolean value) {
      if (!value) {
        this.gender = null;
      }
    }

    public String getDob() {
      return this.dob;
    }

    public edit_user_basic_info_args setDob(String dob) {
      this.dob = dob;
      return this;
    }

    public void unsetDob() {
      this.dob = null;
    }

    /** Returns true if field dob is set (has been assigned a value) and false otherwise */
    public boolean isSetDob() {
      return this.dob != null;
    }

    public void setDobIsSet(boolean value) {
      if (!value) {
        this.dob = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case FULL_NAME:
        if (value == null) {
          unsetFull_name();
        } else {
          setFull_name((String)value);
        }
        break;

      case GENDER:
        if (value == null) {
          unsetGender();
        } else {
          setGender((String)value);
        }
        break;

      case DOB:
        if (value == null) {
          unsetDob();
        } else {
          setDob((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case FULL_NAME:
        return getFull_name();

      case GENDER:
        return getGender();

      case DOB:
        return getDob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case FULL_NAME:
        return isSetFull_name();
      case GENDER:
        return isSetGender();
      case DOB:
        return isSetDob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_basic_info_args)
        return this.equals((edit_user_basic_info_args)that);
      return false;
    }

    public boolean equals(edit_user_basic_info_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_full_name = true && this.isSetFull_name();
      boolean that_present_full_name = true && that.isSetFull_name();
      if (this_present_full_name || that_present_full_name) {
        if (!(this_present_full_name && that_present_full_name))
          return false;
        if (!this.full_name.equals(that.full_name))
          return false;
      }

      boolean this_present_gender = true && this.isSetGender();
      boolean that_present_gender = true && that.isSetGender();
      if (this_present_gender || that_present_gender) {
        if (!(this_present_gender && that_present_gender))
          return false;
        if (!this.gender.equals(that.gender))
          return false;
      }

      boolean this_present_dob = true && this.isSetDob();
      boolean that_present_dob = true && that.isSetDob();
      if (this_present_dob || that_present_dob) {
        if (!(this_present_dob && that_present_dob))
          return false;
        if (!this.dob.equals(that.dob))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_basic_info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_basic_info_args typedOther = (edit_user_basic_info_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFull_name()).compareTo(typedOther.isSetFull_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFull_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.full_name, typedOther.full_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGender()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDob()).compareTo(typedOther.isSetDob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dob, typedOther.dob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_basic_info_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("full_name:");
      if (this.full_name == null) {
        sb.append("null");
      } else {
        sb.append(this.full_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gender:");
      if (this.gender == null) {
        sb.append("null");
      } else {
        sb.append(this.gender);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dob:");
      if (this.dob == null) {
        sb.append("null");
      } else {
        sb.append(this.dob);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_basic_info_argsStandardSchemeFactory implements SchemeFactory {
      public edit_user_basic_info_argsStandardScheme getScheme() {
        return new edit_user_basic_info_argsStandardScheme();
      }
    }

    private static class edit_user_basic_info_argsStandardScheme extends StandardScheme<edit_user_basic_info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_basic_info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FULL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.full_name = iprot.readString();
                struct.setFull_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GENDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gender = iprot.readString();
                struct.setGenderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dob = iprot.readString();
                struct.setDobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_basic_info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.full_name != null) {
          oprot.writeFieldBegin(FULL_NAME_FIELD_DESC);
          oprot.writeString(struct.full_name);
          oprot.writeFieldEnd();
        }
        if (struct.gender != null) {
          oprot.writeFieldBegin(GENDER_FIELD_DESC);
          oprot.writeString(struct.gender);
          oprot.writeFieldEnd();
        }
        if (struct.dob != null) {
          oprot.writeFieldBegin(DOB_FIELD_DESC);
          oprot.writeString(struct.dob);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_basic_info_argsTupleSchemeFactory implements SchemeFactory {
      public edit_user_basic_info_argsTupleScheme getScheme() {
        return new edit_user_basic_info_argsTupleScheme();
      }
    }

    private static class edit_user_basic_info_argsTupleScheme extends TupleScheme<edit_user_basic_info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_basic_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetFull_name()) {
          optionals.set(1);
        }
        if (struct.isSetGender()) {
          optionals.set(2);
        }
        if (struct.isSetDob()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetFull_name()) {
          oprot.writeString(struct.full_name);
        }
        if (struct.isSetGender()) {
          oprot.writeString(struct.gender);
        }
        if (struct.isSetDob()) {
          oprot.writeString(struct.dob);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_basic_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.full_name = iprot.readString();
          struct.setFull_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.gender = iprot.readString();
          struct.setGenderIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dob = iprot.readString();
          struct.setDobIsSet(true);
        }
      }
    }

  }

  public static class edit_user_basic_info_result implements org.apache.thrift.TBase<edit_user_basic_info_result, edit_user_basic_info_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_basic_info_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_basic_info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_basic_info_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_basic_info_result.class, metaDataMap);
    }

    public edit_user_basic_info_result() {
    }

    public edit_user_basic_info_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_basic_info_result(edit_user_basic_info_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public edit_user_basic_info_result deepCopy() {
      return new edit_user_basic_info_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public edit_user_basic_info_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_basic_info_result)
        return this.equals((edit_user_basic_info_result)that);
      return false;
    }

    public boolean equals(edit_user_basic_info_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_basic_info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_basic_info_result typedOther = (edit_user_basic_info_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_basic_info_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_basic_info_resultStandardSchemeFactory implements SchemeFactory {
      public edit_user_basic_info_resultStandardScheme getScheme() {
        return new edit_user_basic_info_resultStandardScheme();
      }
    }

    private static class edit_user_basic_info_resultStandardScheme extends StandardScheme<edit_user_basic_info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_basic_info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_basic_info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_basic_info_resultTupleSchemeFactory implements SchemeFactory {
      public edit_user_basic_info_resultTupleScheme getScheme() {
        return new edit_user_basic_info_resultTupleScheme();
      }
    }

    private static class edit_user_basic_info_resultTupleScheme extends TupleScheme<edit_user_basic_info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_basic_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_basic_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_user_contact_details_args implements org.apache.thrift.TBase<edit_user_contact_details_args, edit_user_contact_details_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_contact_details_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MOBILE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile_number", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_contact_details_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_contact_details_argsTupleSchemeFactory());
    }

    public String id; // required
    public String email; // required
    public String mobile_number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      EMAIL((short)2, "email"),
      MOBILE_NUMBER((short)3, "mobile_number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // EMAIL
            return EMAIL;
          case 3: // MOBILE_NUMBER
            return MOBILE_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("mobile_number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_contact_details_args.class, metaDataMap);
    }

    public edit_user_contact_details_args() {
    }

    public edit_user_contact_details_args(
      String id,
      String email,
      String mobile_number)
    {
      this();
      this.id = id;
      this.email = email;
      this.mobile_number = mobile_number;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_contact_details_args(edit_user_contact_details_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetMobile_number()) {
        this.mobile_number = other.mobile_number;
      }
    }

    public edit_user_contact_details_args deepCopy() {
      return new edit_user_contact_details_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.email = null;
      this.mobile_number = null;
    }

    public String getId() {
      return this.id;
    }

    public edit_user_contact_details_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public edit_user_contact_details_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getMobile_number() {
      return this.mobile_number;
    }

    public edit_user_contact_details_args setMobile_number(String mobile_number) {
      this.mobile_number = mobile_number;
      return this;
    }

    public void unsetMobile_number() {
      this.mobile_number = null;
    }

    /** Returns true if field mobile_number is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile_number() {
      return this.mobile_number != null;
    }

    public void setMobile_numberIsSet(boolean value) {
      if (!value) {
        this.mobile_number = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case MOBILE_NUMBER:
        if (value == null) {
          unsetMobile_number();
        } else {
          setMobile_number((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case EMAIL:
        return getEmail();

      case MOBILE_NUMBER:
        return getMobile_number();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case EMAIL:
        return isSetEmail();
      case MOBILE_NUMBER:
        return isSetMobile_number();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_contact_details_args)
        return this.equals((edit_user_contact_details_args)that);
      return false;
    }

    public boolean equals(edit_user_contact_details_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_mobile_number = true && this.isSetMobile_number();
      boolean that_present_mobile_number = true && that.isSetMobile_number();
      if (this_present_mobile_number || that_present_mobile_number) {
        if (!(this_present_mobile_number && that_present_mobile_number))
          return false;
        if (!this.mobile_number.equals(that.mobile_number))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_contact_details_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_contact_details_args typedOther = (edit_user_contact_details_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile_number()).compareTo(typedOther.isSetMobile_number());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile_number()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile_number, typedOther.mobile_number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_contact_details_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile_number:");
      if (this.mobile_number == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile_number);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_contact_details_argsStandardSchemeFactory implements SchemeFactory {
      public edit_user_contact_details_argsStandardScheme getScheme() {
        return new edit_user_contact_details_argsStandardScheme();
      }
    }

    private static class edit_user_contact_details_argsStandardScheme extends StandardScheme<edit_user_contact_details_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_contact_details_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MOBILE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile_number = iprot.readString();
                struct.setMobile_numberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_contact_details_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.mobile_number != null) {
          oprot.writeFieldBegin(MOBILE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.mobile_number);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_contact_details_argsTupleSchemeFactory implements SchemeFactory {
      public edit_user_contact_details_argsTupleScheme getScheme() {
        return new edit_user_contact_details_argsTupleScheme();
      }
    }

    private static class edit_user_contact_details_argsTupleScheme extends TupleScheme<edit_user_contact_details_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_contact_details_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetEmail()) {
          optionals.set(1);
        }
        if (struct.isSetMobile_number()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetMobile_number()) {
          oprot.writeString(struct.mobile_number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_contact_details_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mobile_number = iprot.readString();
          struct.setMobile_numberIsSet(true);
        }
      }
    }

  }

  public static class edit_user_contact_details_result implements org.apache.thrift.TBase<edit_user_contact_details_result, edit_user_contact_details_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_contact_details_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_contact_details_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_contact_details_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_contact_details_result.class, metaDataMap);
    }

    public edit_user_contact_details_result() {
    }

    public edit_user_contact_details_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_contact_details_result(edit_user_contact_details_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public edit_user_contact_details_result deepCopy() {
      return new edit_user_contact_details_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public edit_user_contact_details_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_contact_details_result)
        return this.equals((edit_user_contact_details_result)that);
      return false;
    }

    public boolean equals(edit_user_contact_details_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_contact_details_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_contact_details_result typedOther = (edit_user_contact_details_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_contact_details_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_contact_details_resultStandardSchemeFactory implements SchemeFactory {
      public edit_user_contact_details_resultStandardScheme getScheme() {
        return new edit_user_contact_details_resultStandardScheme();
      }
    }

    private static class edit_user_contact_details_resultStandardScheme extends StandardScheme<edit_user_contact_details_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_contact_details_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_contact_details_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_contact_details_resultTupleSchemeFactory implements SchemeFactory {
      public edit_user_contact_details_resultTupleScheme getScheme() {
        return new edit_user_contact_details_resultTupleScheme();
      }
    }

    private static class edit_user_contact_details_resultTupleScheme extends TupleScheme<edit_user_contact_details_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_contact_details_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_contact_details_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_user_security_details_args implements org.apache.thrift.TBase<edit_user_security_details_args, edit_user_security_details_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_security_details_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_security_details_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_security_details_argsTupleSchemeFactory());
    }

    public String id; // required
    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      USER_NAME((short)2, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_security_details_args.class, metaDataMap);
    }

    public edit_user_security_details_args() {
    }

    public edit_user_security_details_args(
      String id,
      String user_name)
    {
      this();
      this.id = id;
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_security_details_args(edit_user_security_details_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public edit_user_security_details_args deepCopy() {
      return new edit_user_security_details_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.user_name = null;
    }

    public String getId() {
      return this.id;
    }

    public edit_user_security_details_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public edit_user_security_details_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_security_details_args)
        return this.equals((edit_user_security_details_args)that);
      return false;
    }

    public boolean equals(edit_user_security_details_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_security_details_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_security_details_args typedOther = (edit_user_security_details_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_security_details_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_security_details_argsStandardSchemeFactory implements SchemeFactory {
      public edit_user_security_details_argsStandardScheme getScheme() {
        return new edit_user_security_details_argsStandardScheme();
      }
    }

    private static class edit_user_security_details_argsStandardScheme extends StandardScheme<edit_user_security_details_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_security_details_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_security_details_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_security_details_argsTupleSchemeFactory implements SchemeFactory {
      public edit_user_security_details_argsTupleScheme getScheme() {
        return new edit_user_security_details_argsTupleScheme();
      }
    }

    private static class edit_user_security_details_argsTupleScheme extends TupleScheme<edit_user_security_details_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_security_details_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_security_details_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class edit_user_security_details_result implements org.apache.thrift.TBase<edit_user_security_details_result, edit_user_security_details_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_security_details_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_security_details_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_security_details_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_security_details_result.class, metaDataMap);
    }

    public edit_user_security_details_result() {
    }

    public edit_user_security_details_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_security_details_result(edit_user_security_details_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public edit_user_security_details_result deepCopy() {
      return new edit_user_security_details_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public edit_user_security_details_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_security_details_result)
        return this.equals((edit_user_security_details_result)that);
      return false;
    }

    public boolean equals(edit_user_security_details_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_security_details_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_security_details_result typedOther = (edit_user_security_details_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_security_details_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_security_details_resultStandardSchemeFactory implements SchemeFactory {
      public edit_user_security_details_resultStandardScheme getScheme() {
        return new edit_user_security_details_resultStandardScheme();
      }
    }

    private static class edit_user_security_details_resultStandardScheme extends StandardScheme<edit_user_security_details_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_security_details_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_security_details_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_security_details_resultTupleSchemeFactory implements SchemeFactory {
      public edit_user_security_details_resultTupleScheme getScheme() {
        return new edit_user_security_details_resultTupleScheme();
      }
    }

    private static class edit_user_security_details_resultTupleScheme extends TupleScheme<edit_user_security_details_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_security_details_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_security_details_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_user_languages_args implements org.apache.thrift.TBase<edit_user_languages_args, edit_user_languages_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_languages_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LANGUAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("languages", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_languages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_languages_argsTupleSchemeFactory());
    }

    public String id; // required
    public String languages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      LANGUAGES((short)2, "languages");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // LANGUAGES
            return LANGUAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LANGUAGES, new org.apache.thrift.meta_data.FieldMetaData("languages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_languages_args.class, metaDataMap);
    }

    public edit_user_languages_args() {
    }

    public edit_user_languages_args(
      String id,
      String languages)
    {
      this();
      this.id = id;
      this.languages = languages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_languages_args(edit_user_languages_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetLanguages()) {
        this.languages = other.languages;
      }
    }

    public edit_user_languages_args deepCopy() {
      return new edit_user_languages_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.languages = null;
    }

    public String getId() {
      return this.id;
    }

    public edit_user_languages_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getLanguages() {
      return this.languages;
    }

    public edit_user_languages_args setLanguages(String languages) {
      this.languages = languages;
      return this;
    }

    public void unsetLanguages() {
      this.languages = null;
    }

    /** Returns true if field languages is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguages() {
      return this.languages != null;
    }

    public void setLanguagesIsSet(boolean value) {
      if (!value) {
        this.languages = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case LANGUAGES:
        if (value == null) {
          unsetLanguages();
        } else {
          setLanguages((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case LANGUAGES:
        return getLanguages();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case LANGUAGES:
        return isSetLanguages();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_languages_args)
        return this.equals((edit_user_languages_args)that);
      return false;
    }

    public boolean equals(edit_user_languages_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_languages = true && this.isSetLanguages();
      boolean that_present_languages = true && that.isSetLanguages();
      if (this_present_languages || that_present_languages) {
        if (!(this_present_languages && that_present_languages))
          return false;
        if (!this.languages.equals(that.languages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_languages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_languages_args typedOther = (edit_user_languages_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLanguages()).compareTo(typedOther.isSetLanguages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languages, typedOther.languages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_languages_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("languages:");
      if (this.languages == null) {
        sb.append("null");
      } else {
        sb.append(this.languages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_languages_argsStandardSchemeFactory implements SchemeFactory {
      public edit_user_languages_argsStandardScheme getScheme() {
        return new edit_user_languages_argsStandardScheme();
      }
    }

    private static class edit_user_languages_argsStandardScheme extends StandardScheme<edit_user_languages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_languages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LANGUAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.languages = iprot.readString();
                struct.setLanguagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_languages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.languages != null) {
          oprot.writeFieldBegin(LANGUAGES_FIELD_DESC);
          oprot.writeString(struct.languages);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_languages_argsTupleSchemeFactory implements SchemeFactory {
      public edit_user_languages_argsTupleScheme getScheme() {
        return new edit_user_languages_argsTupleScheme();
      }
    }

    private static class edit_user_languages_argsTupleScheme extends TupleScheme<edit_user_languages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_languages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetLanguages()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetLanguages()) {
          oprot.writeString(struct.languages);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_languages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.languages = iprot.readString();
          struct.setLanguagesIsSet(true);
        }
      }
    }

  }

  public static class edit_user_languages_result implements org.apache.thrift.TBase<edit_user_languages_result, edit_user_languages_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_languages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_languages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_languages_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_languages_result.class, metaDataMap);
    }

    public edit_user_languages_result() {
    }

    public edit_user_languages_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_languages_result(edit_user_languages_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public edit_user_languages_result deepCopy() {
      return new edit_user_languages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public edit_user_languages_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_languages_result)
        return this.equals((edit_user_languages_result)that);
      return false;
    }

    public boolean equals(edit_user_languages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_languages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_languages_result typedOther = (edit_user_languages_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_languages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_languages_resultStandardSchemeFactory implements SchemeFactory {
      public edit_user_languages_resultStandardScheme getScheme() {
        return new edit_user_languages_resultStandardScheme();
      }
    }

    private static class edit_user_languages_resultStandardScheme extends StandardScheme<edit_user_languages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_languages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_languages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_languages_resultTupleSchemeFactory implements SchemeFactory {
      public edit_user_languages_resultTupleScheme getScheme() {
        return new edit_user_languages_resultTupleScheme();
      }
    }

    private static class edit_user_languages_resultTupleScheme extends TupleScheme<edit_user_languages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_languages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_languages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_user_genres_args implements org.apache.thrift.TBase<edit_user_genres_args, edit_user_genres_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_genres_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GENRES_FIELD_DESC = new org.apache.thrift.protocol.TField("genres", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_genres_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_genres_argsTupleSchemeFactory());
    }

    public String id; // required
    public String genres; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      GENRES((short)2, "genres");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // GENRES
            return GENRES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENRES, new org.apache.thrift.meta_data.FieldMetaData("genres", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_genres_args.class, metaDataMap);
    }

    public edit_user_genres_args() {
    }

    public edit_user_genres_args(
      String id,
      String genres)
    {
      this();
      this.id = id;
      this.genres = genres;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_genres_args(edit_user_genres_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetGenres()) {
        this.genres = other.genres;
      }
    }

    public edit_user_genres_args deepCopy() {
      return new edit_user_genres_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.genres = null;
    }

    public String getId() {
      return this.id;
    }

    public edit_user_genres_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getGenres() {
      return this.genres;
    }

    public edit_user_genres_args setGenres(String genres) {
      this.genres = genres;
      return this;
    }

    public void unsetGenres() {
      this.genres = null;
    }

    /** Returns true if field genres is set (has been assigned a value) and false otherwise */
    public boolean isSetGenres() {
      return this.genres != null;
    }

    public void setGenresIsSet(boolean value) {
      if (!value) {
        this.genres = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case GENRES:
        if (value == null) {
          unsetGenres();
        } else {
          setGenres((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case GENRES:
        return getGenres();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case GENRES:
        return isSetGenres();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_genres_args)
        return this.equals((edit_user_genres_args)that);
      return false;
    }

    public boolean equals(edit_user_genres_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_genres = true && this.isSetGenres();
      boolean that_present_genres = true && that.isSetGenres();
      if (this_present_genres || that_present_genres) {
        if (!(this_present_genres && that_present_genres))
          return false;
        if (!this.genres.equals(that.genres))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_genres_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_genres_args typedOther = (edit_user_genres_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenres()).compareTo(typedOther.isSetGenres());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenres()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genres, typedOther.genres);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_genres_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genres:");
      if (this.genres == null) {
        sb.append("null");
      } else {
        sb.append(this.genres);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_genres_argsStandardSchemeFactory implements SchemeFactory {
      public edit_user_genres_argsStandardScheme getScheme() {
        return new edit_user_genres_argsStandardScheme();
      }
    }

    private static class edit_user_genres_argsStandardScheme extends StandardScheme<edit_user_genres_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_genres_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GENRES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.genres = iprot.readString();
                struct.setGenresIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_genres_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.genres != null) {
          oprot.writeFieldBegin(GENRES_FIELD_DESC);
          oprot.writeString(struct.genres);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_genres_argsTupleSchemeFactory implements SchemeFactory {
      public edit_user_genres_argsTupleScheme getScheme() {
        return new edit_user_genres_argsTupleScheme();
      }
    }

    private static class edit_user_genres_argsTupleScheme extends TupleScheme<edit_user_genres_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_genres_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetGenres()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetGenres()) {
          oprot.writeString(struct.genres);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_genres_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.genres = iprot.readString();
          struct.setGenresIsSet(true);
        }
      }
    }

  }

  public static class edit_user_genres_result implements org.apache.thrift.TBase<edit_user_genres_result, edit_user_genres_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_genres_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_genres_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_genres_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_genres_result.class, metaDataMap);
    }

    public edit_user_genres_result() {
    }

    public edit_user_genres_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_genres_result(edit_user_genres_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public edit_user_genres_result deepCopy() {
      return new edit_user_genres_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public edit_user_genres_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_genres_result)
        return this.equals((edit_user_genres_result)that);
      return false;
    }

    public boolean equals(edit_user_genres_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_genres_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_genres_result typedOther = (edit_user_genres_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_genres_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_genres_resultStandardSchemeFactory implements SchemeFactory {
      public edit_user_genres_resultStandardScheme getScheme() {
        return new edit_user_genres_resultStandardScheme();
      }
    }

    private static class edit_user_genres_resultStandardScheme extends StandardScheme<edit_user_genres_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_genres_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_genres_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_genres_resultTupleSchemeFactory implements SchemeFactory {
      public edit_user_genres_resultTupleScheme getScheme() {
        return new edit_user_genres_resultTupleScheme();
      }
    }

    private static class edit_user_genres_resultTupleScheme extends TupleScheme<edit_user_genres_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_genres_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_genres_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class follow_user_args implements org.apache.thrift.TBase<follow_user_args, follow_user_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("follow_user_args");

    private static final org.apache.thrift.protocol.TField USER_ID_1_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id_1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_2_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id_2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new follow_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new follow_user_argsTupleSchemeFactory());
    }

    public String user_id_1; // required
    public String user_id_2; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID_1((short)1, "user_id_1"),
      USER_ID_2((short)2, "user_id_2"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID_1
            return USER_ID_1;
          case 2: // USER_ID_2
            return USER_ID_2;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID_1, new org.apache.thrift.meta_data.FieldMetaData("user_id_1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_2, new org.apache.thrift.meta_data.FieldMetaData("user_id_2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(follow_user_args.class, metaDataMap);
    }

    public follow_user_args() {
    }

    public follow_user_args(
      String user_id_1,
      String user_id_2,
      int time)
    {
      this();
      this.user_id_1 = user_id_1;
      this.user_id_2 = user_id_2;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public follow_user_args(follow_user_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_id_1()) {
        this.user_id_1 = other.user_id_1;
      }
      if (other.isSetUser_id_2()) {
        this.user_id_2 = other.user_id_2;
      }
      this.time = other.time;
    }

    public follow_user_args deepCopy() {
      return new follow_user_args(this);
    }

    @Override
    public void clear() {
      this.user_id_1 = null;
      this.user_id_2 = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_id_1() {
      return this.user_id_1;
    }

    public follow_user_args setUser_id_1(String user_id_1) {
      this.user_id_1 = user_id_1;
      return this;
    }

    public void unsetUser_id_1() {
      this.user_id_1 = null;
    }

    /** Returns true if field user_id_1 is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id_1() {
      return this.user_id_1 != null;
    }

    public void setUser_id_1IsSet(boolean value) {
      if (!value) {
        this.user_id_1 = null;
      }
    }

    public String getUser_id_2() {
      return this.user_id_2;
    }

    public follow_user_args setUser_id_2(String user_id_2) {
      this.user_id_2 = user_id_2;
      return this;
    }

    public void unsetUser_id_2() {
      this.user_id_2 = null;
    }

    /** Returns true if field user_id_2 is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id_2() {
      return this.user_id_2 != null;
    }

    public void setUser_id_2IsSet(boolean value) {
      if (!value) {
        this.user_id_2 = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public follow_user_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID_1:
        if (value == null) {
          unsetUser_id_1();
        } else {
          setUser_id_1((String)value);
        }
        break;

      case USER_ID_2:
        if (value == null) {
          unsetUser_id_2();
        } else {
          setUser_id_2((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID_1:
        return getUser_id_1();

      case USER_ID_2:
        return getUser_id_2();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID_1:
        return isSetUser_id_1();
      case USER_ID_2:
        return isSetUser_id_2();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof follow_user_args)
        return this.equals((follow_user_args)that);
      return false;
    }

    public boolean equals(follow_user_args that) {
      if (that == null)
        return false;

      boolean this_present_user_id_1 = true && this.isSetUser_id_1();
      boolean that_present_user_id_1 = true && that.isSetUser_id_1();
      if (this_present_user_id_1 || that_present_user_id_1) {
        if (!(this_present_user_id_1 && that_present_user_id_1))
          return false;
        if (!this.user_id_1.equals(that.user_id_1))
          return false;
      }

      boolean this_present_user_id_2 = true && this.isSetUser_id_2();
      boolean that_present_user_id_2 = true && that.isSetUser_id_2();
      if (this_present_user_id_2 || that_present_user_id_2) {
        if (!(this_present_user_id_2 && that_present_user_id_2))
          return false;
        if (!this.user_id_2.equals(that.user_id_2))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(follow_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      follow_user_args typedOther = (follow_user_args)other;

      lastComparison = Boolean.valueOf(isSetUser_id_1()).compareTo(typedOther.isSetUser_id_1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id_1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id_1, typedOther.user_id_1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id_2()).compareTo(typedOther.isSetUser_id_2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id_2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id_2, typedOther.user_id_2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("follow_user_args(");
      boolean first = true;

      sb.append("user_id_1:");
      if (this.user_id_1 == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id_1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id_2:");
      if (this.user_id_2 == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id_2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class follow_user_argsStandardSchemeFactory implements SchemeFactory {
      public follow_user_argsStandardScheme getScheme() {
        return new follow_user_argsStandardScheme();
      }
    }

    private static class follow_user_argsStandardScheme extends StandardScheme<follow_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, follow_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID_1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id_1 = iprot.readString();
                struct.setUser_id_1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID_2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id_2 = iprot.readString();
                struct.setUser_id_2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, follow_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_id_1 != null) {
          oprot.writeFieldBegin(USER_ID_1_FIELD_DESC);
          oprot.writeString(struct.user_id_1);
          oprot.writeFieldEnd();
        }
        if (struct.user_id_2 != null) {
          oprot.writeFieldBegin(USER_ID_2_FIELD_DESC);
          oprot.writeString(struct.user_id_2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class follow_user_argsTupleSchemeFactory implements SchemeFactory {
      public follow_user_argsTupleScheme getScheme() {
        return new follow_user_argsTupleScheme();
      }
    }

    private static class follow_user_argsTupleScheme extends TupleScheme<follow_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, follow_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_id_1()) {
          optionals.set(0);
        }
        if (struct.isSetUser_id_2()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_id_1()) {
          oprot.writeString(struct.user_id_1);
        }
        if (struct.isSetUser_id_2()) {
          oprot.writeString(struct.user_id_2);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, follow_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_id_1 = iprot.readString();
          struct.setUser_id_1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_id_2 = iprot.readString();
          struct.setUser_id_2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class follow_user_result implements org.apache.thrift.TBase<follow_user_result, follow_user_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("follow_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new follow_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new follow_user_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(follow_user_result.class, metaDataMap);
    }

    public follow_user_result() {
    }

    public follow_user_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public follow_user_result(follow_user_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public follow_user_result deepCopy() {
      return new follow_user_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public follow_user_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof follow_user_result)
        return this.equals((follow_user_result)that);
      return false;
    }

    public boolean equals(follow_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(follow_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      follow_user_result typedOther = (follow_user_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("follow_user_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class follow_user_resultStandardSchemeFactory implements SchemeFactory {
      public follow_user_resultStandardScheme getScheme() {
        return new follow_user_resultStandardScheme();
      }
    }

    private static class follow_user_resultStandardScheme extends StandardScheme<follow_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, follow_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, follow_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class follow_user_resultTupleSchemeFactory implements SchemeFactory {
      public follow_user_resultTupleScheme getScheme() {
        return new follow_user_resultTupleScheme();
      }
    }

    private static class follow_user_resultTupleScheme extends TupleScheme<follow_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, follow_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, follow_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deactivate_user_args implements org.apache.thrift.TBase<deactivate_user_args, deactivate_user_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivate_user_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivate_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivate_user_argsTupleSchemeFactory());
    }

    public String user_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "user_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivate_user_args.class, metaDataMap);
    }

    public deactivate_user_args() {
    }

    public deactivate_user_args(
      String user_id)
    {
      this();
      this.user_id = user_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivate_user_args(deactivate_user_args other) {
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
    }

    public deactivate_user_args deepCopy() {
      return new deactivate_user_args(this);
    }

    @Override
    public void clear() {
      this.user_id = null;
    }

    public String getUser_id() {
      return this.user_id;
    }

    public deactivate_user_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUser_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUser_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivate_user_args)
        return this.equals((deactivate_user_args)that);
      return false;
    }

    public boolean equals(deactivate_user_args that) {
      if (that == null)
        return false;

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deactivate_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deactivate_user_args typedOther = (deactivate_user_args)other;

      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivate_user_args(");
      boolean first = true;

      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivate_user_argsStandardSchemeFactory implements SchemeFactory {
      public deactivate_user_argsStandardScheme getScheme() {
        return new deactivate_user_argsStandardScheme();
      }
    }

    private static class deactivate_user_argsStandardScheme extends StandardScheme<deactivate_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivate_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivate_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivate_user_argsTupleSchemeFactory implements SchemeFactory {
      public deactivate_user_argsTupleScheme getScheme() {
        return new deactivate_user_argsTupleScheme();
      }
    }

    private static class deactivate_user_argsTupleScheme extends TupleScheme<deactivate_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivate_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivate_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
      }
    }

  }

  public static class deactivate_user_result implements org.apache.thrift.TBase<deactivate_user_result, deactivate_user_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivate_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivate_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivate_user_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivate_user_result.class, metaDataMap);
    }

    public deactivate_user_result() {
    }

    public deactivate_user_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivate_user_result(deactivate_user_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deactivate_user_result deepCopy() {
      return new deactivate_user_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deactivate_user_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivate_user_result)
        return this.equals((deactivate_user_result)that);
      return false;
    }

    public boolean equals(deactivate_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deactivate_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deactivate_user_result typedOther = (deactivate_user_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivate_user_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivate_user_resultStandardSchemeFactory implements SchemeFactory {
      public deactivate_user_resultStandardScheme getScheme() {
        return new deactivate_user_resultStandardScheme();
      }
    }

    private static class deactivate_user_resultStandardScheme extends StandardScheme<deactivate_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivate_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivate_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivate_user_resultTupleSchemeFactory implements SchemeFactory {
      public deactivate_user_resultTupleScheme getScheme() {
        return new deactivate_user_resultTupleScheme();
      }
    }

    private static class deactivate_user_resultTupleScheme extends TupleScheme<deactivate_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivate_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivate_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_or_edit_series_args implements org.apache.thrift.TBase<create_or_edit_series_args, create_or_edit_series_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_or_edit_series_args");

    private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("series_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("title_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TAG_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_line", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField FEATURE_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_image", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField GENRE_FIELD_DESC = new org.apache.thrift.protocol.TField("genre", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField COPYRIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("copyrights", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField DD_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("dd_img", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField DD_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("dd_summary", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField SERIES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("series_type", org.apache.thrift.protocol.TType.I32, (short)13);
    private static final org.apache.thrift.protocol.TField TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("time_created", org.apache.thrift.protocol.TType.I32, (short)14);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)15);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_or_edit_series_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_or_edit_series_argsTupleSchemeFactory());
    }

    public String series_id; // required
    public String user_id; // required
    public String title; // required
    public String title_id; // required
    public String tag_line; // required
    public String feature_image; // required
    public String genre; // required
    public String language; // required
    public String keywords; // required
    public String copyrights; // required
    public String dd_img; // required
    public String dd_summary; // required
    public int series_type; // required
    public int time_created; // required
    public int is_edit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERIES_ID((short)1, "series_id"),
      USER_ID((short)2, "user_id"),
      TITLE((short)3, "title"),
      TITLE_ID((short)4, "title_id"),
      TAG_LINE((short)5, "tag_line"),
      FEATURE_IMAGE((short)6, "feature_image"),
      GENRE((short)7, "genre"),
      LANGUAGE((short)8, "language"),
      KEYWORDS((short)9, "keywords"),
      COPYRIGHTS((short)10, "copyrights"),
      DD_IMG((short)11, "dd_img"),
      DD_SUMMARY((short)12, "dd_summary"),
      SERIES_TYPE((short)13, "series_type"),
      TIME_CREATED((short)14, "time_created"),
      IS_EDIT((short)15, "is_edit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERIES_ID
            return SERIES_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TITLE
            return TITLE;
          case 4: // TITLE_ID
            return TITLE_ID;
          case 5: // TAG_LINE
            return TAG_LINE;
          case 6: // FEATURE_IMAGE
            return FEATURE_IMAGE;
          case 7: // GENRE
            return GENRE;
          case 8: // LANGUAGE
            return LANGUAGE;
          case 9: // KEYWORDS
            return KEYWORDS;
          case 10: // COPYRIGHTS
            return COPYRIGHTS;
          case 11: // DD_IMG
            return DD_IMG;
          case 12: // DD_SUMMARY
            return DD_SUMMARY;
          case 13: // SERIES_TYPE
            return SERIES_TYPE;
          case 14: // TIME_CREATED
            return TIME_CREATED;
          case 15: // IS_EDIT
            return IS_EDIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERIES_TYPE_ISSET_ID = 0;
    private static final int __TIME_CREATED_ISSET_ID = 1;
    private static final int __IS_EDIT_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("series_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("title_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_LINE, new org.apache.thrift.meta_data.FieldMetaData("tag_line", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEATURE_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("feature_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENRE, new org.apache.thrift.meta_data.FieldMetaData("genre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COPYRIGHTS, new org.apache.thrift.meta_data.FieldMetaData("copyrights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DD_IMG, new org.apache.thrift.meta_data.FieldMetaData("dd_img", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DD_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("dd_summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("series_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_or_edit_series_args.class, metaDataMap);
    }

    public create_or_edit_series_args() {
    }

    public create_or_edit_series_args(
      String series_id,
      String user_id,
      String title,
      String title_id,
      String tag_line,
      String feature_image,
      String genre,
      String language,
      String keywords,
      String copyrights,
      String dd_img,
      String dd_summary,
      int series_type,
      int time_created,
      int is_edit)
    {
      this();
      this.series_id = series_id;
      this.user_id = user_id;
      this.title = title;
      this.title_id = title_id;
      this.tag_line = tag_line;
      this.feature_image = feature_image;
      this.genre = genre;
      this.language = language;
      this.keywords = keywords;
      this.copyrights = copyrights;
      this.dd_img = dd_img;
      this.dd_summary = dd_summary;
      this.series_type = series_type;
      setSeries_typeIsSet(true);
      this.time_created = time_created;
      setTime_createdIsSet(true);
      this.is_edit = is_edit;
      setIs_editIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_or_edit_series_args(create_or_edit_series_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSeries_id()) {
        this.series_id = other.series_id;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetTitle_id()) {
        this.title_id = other.title_id;
      }
      if (other.isSetTag_line()) {
        this.tag_line = other.tag_line;
      }
      if (other.isSetFeature_image()) {
        this.feature_image = other.feature_image;
      }
      if (other.isSetGenre()) {
        this.genre = other.genre;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetKeywords()) {
        this.keywords = other.keywords;
      }
      if (other.isSetCopyrights()) {
        this.copyrights = other.copyrights;
      }
      if (other.isSetDd_img()) {
        this.dd_img = other.dd_img;
      }
      if (other.isSetDd_summary()) {
        this.dd_summary = other.dd_summary;
      }
      this.series_type = other.series_type;
      this.time_created = other.time_created;
      this.is_edit = other.is_edit;
    }

    public create_or_edit_series_args deepCopy() {
      return new create_or_edit_series_args(this);
    }

    @Override
    public void clear() {
      this.series_id = null;
      this.user_id = null;
      this.title = null;
      this.title_id = null;
      this.tag_line = null;
      this.feature_image = null;
      this.genre = null;
      this.language = null;
      this.keywords = null;
      this.copyrights = null;
      this.dd_img = null;
      this.dd_summary = null;
      setSeries_typeIsSet(false);
      this.series_type = 0;
      setTime_createdIsSet(false);
      this.time_created = 0;
      setIs_editIsSet(false);
      this.is_edit = 0;
    }

    public String getSeries_id() {
      return this.series_id;
    }

    public create_or_edit_series_args setSeries_id(String series_id) {
      this.series_id = series_id;
      return this;
    }

    public void unsetSeries_id() {
      this.series_id = null;
    }

    /** Returns true if field series_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_id() {
      return this.series_id != null;
    }

    public void setSeries_idIsSet(boolean value) {
      if (!value) {
        this.series_id = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public create_or_edit_series_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public create_or_edit_series_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getTitle_id() {
      return this.title_id;
    }

    public create_or_edit_series_args setTitle_id(String title_id) {
      this.title_id = title_id;
      return this;
    }

    public void unsetTitle_id() {
      this.title_id = null;
    }

    /** Returns true if field title_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle_id() {
      return this.title_id != null;
    }

    public void setTitle_idIsSet(boolean value) {
      if (!value) {
        this.title_id = null;
      }
    }

    public String getTag_line() {
      return this.tag_line;
    }

    public create_or_edit_series_args setTag_line(String tag_line) {
      this.tag_line = tag_line;
      return this;
    }

    public void unsetTag_line() {
      this.tag_line = null;
    }

    /** Returns true if field tag_line is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_line() {
      return this.tag_line != null;
    }

    public void setTag_lineIsSet(boolean value) {
      if (!value) {
        this.tag_line = null;
      }
    }

    public String getFeature_image() {
      return this.feature_image;
    }

    public create_or_edit_series_args setFeature_image(String feature_image) {
      this.feature_image = feature_image;
      return this;
    }

    public void unsetFeature_image() {
      this.feature_image = null;
    }

    /** Returns true if field feature_image is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_image() {
      return this.feature_image != null;
    }

    public void setFeature_imageIsSet(boolean value) {
      if (!value) {
        this.feature_image = null;
      }
    }

    public String getGenre() {
      return this.genre;
    }

    public create_or_edit_series_args setGenre(String genre) {
      this.genre = genre;
      return this;
    }

    public void unsetGenre() {
      this.genre = null;
    }

    /** Returns true if field genre is set (has been assigned a value) and false otherwise */
    public boolean isSetGenre() {
      return this.genre != null;
    }

    public void setGenreIsSet(boolean value) {
      if (!value) {
        this.genre = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public create_or_edit_series_args setLanguage(String language) {
      this.language = language;
      return this;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getKeywords() {
      return this.keywords;
    }

    public create_or_edit_series_args setKeywords(String keywords) {
      this.keywords = keywords;
      return this;
    }

    public void unsetKeywords() {
      this.keywords = null;
    }

    /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
    public boolean isSetKeywords() {
      return this.keywords != null;
    }

    public void setKeywordsIsSet(boolean value) {
      if (!value) {
        this.keywords = null;
      }
    }

    public String getCopyrights() {
      return this.copyrights;
    }

    public create_or_edit_series_args setCopyrights(String copyrights) {
      this.copyrights = copyrights;
      return this;
    }

    public void unsetCopyrights() {
      this.copyrights = null;
    }

    /** Returns true if field copyrights is set (has been assigned a value) and false otherwise */
    public boolean isSetCopyrights() {
      return this.copyrights != null;
    }

    public void setCopyrightsIsSet(boolean value) {
      if (!value) {
        this.copyrights = null;
      }
    }

    public String getDd_img() {
      return this.dd_img;
    }

    public create_or_edit_series_args setDd_img(String dd_img) {
      this.dd_img = dd_img;
      return this;
    }

    public void unsetDd_img() {
      this.dd_img = null;
    }

    /** Returns true if field dd_img is set (has been assigned a value) and false otherwise */
    public boolean isSetDd_img() {
      return this.dd_img != null;
    }

    public void setDd_imgIsSet(boolean value) {
      if (!value) {
        this.dd_img = null;
      }
    }

    public String getDd_summary() {
      return this.dd_summary;
    }

    public create_or_edit_series_args setDd_summary(String dd_summary) {
      this.dd_summary = dd_summary;
      return this;
    }

    public void unsetDd_summary() {
      this.dd_summary = null;
    }

    /** Returns true if field dd_summary is set (has been assigned a value) and false otherwise */
    public boolean isSetDd_summary() {
      return this.dd_summary != null;
    }

    public void setDd_summaryIsSet(boolean value) {
      if (!value) {
        this.dd_summary = null;
      }
    }

    public int getSeries_type() {
      return this.series_type;
    }

    public create_or_edit_series_args setSeries_type(int series_type) {
      this.series_type = series_type;
      setSeries_typeIsSet(true);
      return this;
    }

    public void unsetSeries_type() {
      __isset_bit_vector.clear(__SERIES_TYPE_ISSET_ID);
    }

    /** Returns true if field series_type is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_type() {
      return __isset_bit_vector.get(__SERIES_TYPE_ISSET_ID);
    }

    public void setSeries_typeIsSet(boolean value) {
      __isset_bit_vector.set(__SERIES_TYPE_ISSET_ID, value);
    }

    public int getTime_created() {
      return this.time_created;
    }

    public create_or_edit_series_args setTime_created(int time_created) {
      this.time_created = time_created;
      setTime_createdIsSet(true);
      return this;
    }

    public void unsetTime_created() {
      __isset_bit_vector.clear(__TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetTime_created() {
      return __isset_bit_vector.get(__TIME_CREATED_ISSET_ID);
    }

    public void setTime_createdIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_CREATED_ISSET_ID, value);
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_or_edit_series_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERIES_ID:
        if (value == null) {
          unsetSeries_id();
        } else {
          setSeries_id((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case TITLE_ID:
        if (value == null) {
          unsetTitle_id();
        } else {
          setTitle_id((String)value);
        }
        break;

      case TAG_LINE:
        if (value == null) {
          unsetTag_line();
        } else {
          setTag_line((String)value);
        }
        break;

      case FEATURE_IMAGE:
        if (value == null) {
          unsetFeature_image();
        } else {
          setFeature_image((String)value);
        }
        break;

      case GENRE:
        if (value == null) {
          unsetGenre();
        } else {
          setGenre((String)value);
        }
        break;

      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          setLanguage((String)value);
        }
        break;

      case KEYWORDS:
        if (value == null) {
          unsetKeywords();
        } else {
          setKeywords((String)value);
        }
        break;

      case COPYRIGHTS:
        if (value == null) {
          unsetCopyrights();
        } else {
          setCopyrights((String)value);
        }
        break;

      case DD_IMG:
        if (value == null) {
          unsetDd_img();
        } else {
          setDd_img((String)value);
        }
        break;

      case DD_SUMMARY:
        if (value == null) {
          unsetDd_summary();
        } else {
          setDd_summary((String)value);
        }
        break;

      case SERIES_TYPE:
        if (value == null) {
          unsetSeries_type();
        } else {
          setSeries_type((Integer)value);
        }
        break;

      case TIME_CREATED:
        if (value == null) {
          unsetTime_created();
        } else {
          setTime_created((Integer)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERIES_ID:
        return getSeries_id();

      case USER_ID:
        return getUser_id();

      case TITLE:
        return getTitle();

      case TITLE_ID:
        return getTitle_id();

      case TAG_LINE:
        return getTag_line();

      case FEATURE_IMAGE:
        return getFeature_image();

      case GENRE:
        return getGenre();

      case LANGUAGE:
        return getLanguage();

      case KEYWORDS:
        return getKeywords();

      case COPYRIGHTS:
        return getCopyrights();

      case DD_IMG:
        return getDd_img();

      case DD_SUMMARY:
        return getDd_summary();

      case SERIES_TYPE:
        return Integer.valueOf(getSeries_type());

      case TIME_CREATED:
        return Integer.valueOf(getTime_created());

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERIES_ID:
        return isSetSeries_id();
      case USER_ID:
        return isSetUser_id();
      case TITLE:
        return isSetTitle();
      case TITLE_ID:
        return isSetTitle_id();
      case TAG_LINE:
        return isSetTag_line();
      case FEATURE_IMAGE:
        return isSetFeature_image();
      case GENRE:
        return isSetGenre();
      case LANGUAGE:
        return isSetLanguage();
      case KEYWORDS:
        return isSetKeywords();
      case COPYRIGHTS:
        return isSetCopyrights();
      case DD_IMG:
        return isSetDd_img();
      case DD_SUMMARY:
        return isSetDd_summary();
      case SERIES_TYPE:
        return isSetSeries_type();
      case TIME_CREATED:
        return isSetTime_created();
      case IS_EDIT:
        return isSetIs_edit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_or_edit_series_args)
        return this.equals((create_or_edit_series_args)that);
      return false;
    }

    public boolean equals(create_or_edit_series_args that) {
      if (that == null)
        return false;

      boolean this_present_series_id = true && this.isSetSeries_id();
      boolean that_present_series_id = true && that.isSetSeries_id();
      if (this_present_series_id || that_present_series_id) {
        if (!(this_present_series_id && that_present_series_id))
          return false;
        if (!this.series_id.equals(that.series_id))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_title_id = true && this.isSetTitle_id();
      boolean that_present_title_id = true && that.isSetTitle_id();
      if (this_present_title_id || that_present_title_id) {
        if (!(this_present_title_id && that_present_title_id))
          return false;
        if (!this.title_id.equals(that.title_id))
          return false;
      }

      boolean this_present_tag_line = true && this.isSetTag_line();
      boolean that_present_tag_line = true && that.isSetTag_line();
      if (this_present_tag_line || that_present_tag_line) {
        if (!(this_present_tag_line && that_present_tag_line))
          return false;
        if (!this.tag_line.equals(that.tag_line))
          return false;
      }

      boolean this_present_feature_image = true && this.isSetFeature_image();
      boolean that_present_feature_image = true && that.isSetFeature_image();
      if (this_present_feature_image || that_present_feature_image) {
        if (!(this_present_feature_image && that_present_feature_image))
          return false;
        if (!this.feature_image.equals(that.feature_image))
          return false;
      }

      boolean this_present_genre = true && this.isSetGenre();
      boolean that_present_genre = true && that.isSetGenre();
      if (this_present_genre || that_present_genre) {
        if (!(this_present_genre && that_present_genre))
          return false;
        if (!this.genre.equals(that.genre))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_keywords = true && this.isSetKeywords();
      boolean that_present_keywords = true && that.isSetKeywords();
      if (this_present_keywords || that_present_keywords) {
        if (!(this_present_keywords && that_present_keywords))
          return false;
        if (!this.keywords.equals(that.keywords))
          return false;
      }

      boolean this_present_copyrights = true && this.isSetCopyrights();
      boolean that_present_copyrights = true && that.isSetCopyrights();
      if (this_present_copyrights || that_present_copyrights) {
        if (!(this_present_copyrights && that_present_copyrights))
          return false;
        if (!this.copyrights.equals(that.copyrights))
          return false;
      }

      boolean this_present_dd_img = true && this.isSetDd_img();
      boolean that_present_dd_img = true && that.isSetDd_img();
      if (this_present_dd_img || that_present_dd_img) {
        if (!(this_present_dd_img && that_present_dd_img))
          return false;
        if (!this.dd_img.equals(that.dd_img))
          return false;
      }

      boolean this_present_dd_summary = true && this.isSetDd_summary();
      boolean that_present_dd_summary = true && that.isSetDd_summary();
      if (this_present_dd_summary || that_present_dd_summary) {
        if (!(this_present_dd_summary && that_present_dd_summary))
          return false;
        if (!this.dd_summary.equals(that.dd_summary))
          return false;
      }

      boolean this_present_series_type = true;
      boolean that_present_series_type = true;
      if (this_present_series_type || that_present_series_type) {
        if (!(this_present_series_type && that_present_series_type))
          return false;
        if (this.series_type != that.series_type)
          return false;
      }

      boolean this_present_time_created = true;
      boolean that_present_time_created = true;
      if (this_present_time_created || that_present_time_created) {
        if (!(this_present_time_created && that_present_time_created))
          return false;
        if (this.time_created != that.time_created)
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_or_edit_series_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_or_edit_series_args typedOther = (create_or_edit_series_args)other;

      lastComparison = Boolean.valueOf(isSetSeries_id()).compareTo(typedOther.isSetSeries_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_id, typedOther.series_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle_id()).compareTo(typedOther.isSetTitle_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title_id, typedOther.title_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag_line()).compareTo(typedOther.isSetTag_line());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_line()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_line, typedOther.tag_line);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_image()).compareTo(typedOther.isSetFeature_image());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_image()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_image, typedOther.feature_image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenre()).compareTo(typedOther.isSetGenre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genre, typedOther.genre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(typedOther.isSetKeywords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeywords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, typedOther.keywords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCopyrights()).compareTo(typedOther.isSetCopyrights());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCopyrights()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copyrights, typedOther.copyrights);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDd_img()).compareTo(typedOther.isSetDd_img());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDd_img()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dd_img, typedOther.dd_img);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDd_summary()).compareTo(typedOther.isSetDd_summary());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDd_summary()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dd_summary, typedOther.dd_summary);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries_type()).compareTo(typedOther.isSetSeries_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_type, typedOther.series_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime_created()).compareTo(typedOther.isSetTime_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_created, typedOther.time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_or_edit_series_args(");
      boolean first = true;

      sb.append("series_id:");
      if (this.series_id == null) {
        sb.append("null");
      } else {
        sb.append(this.series_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title_id:");
      if (this.title_id == null) {
        sb.append("null");
      } else {
        sb.append(this.title_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_line:");
      if (this.tag_line == null) {
        sb.append("null");
      } else {
        sb.append(this.tag_line);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_image:");
      if (this.feature_image == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genre:");
      if (this.genre == null) {
        sb.append("null");
      } else {
        sb.append(this.genre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("copyrights:");
      if (this.copyrights == null) {
        sb.append("null");
      } else {
        sb.append(this.copyrights);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dd_img:");
      if (this.dd_img == null) {
        sb.append("null");
      } else {
        sb.append(this.dd_img);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dd_summary:");
      if (this.dd_summary == null) {
        sb.append("null");
      } else {
        sb.append(this.dd_summary);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series_type:");
      sb.append(this.series_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time_created:");
      sb.append(this.time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_or_edit_series_argsStandardSchemeFactory implements SchemeFactory {
      public create_or_edit_series_argsStandardScheme getScheme() {
        return new create_or_edit_series_argsStandardScheme();
      }
    }

    private static class create_or_edit_series_argsStandardScheme extends StandardScheme<create_or_edit_series_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_or_edit_series_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERIES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_id = iprot.readString();
                struct.setSeries_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TITLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title_id = iprot.readString();
                struct.setTitle_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TAG_LINE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tag_line = iprot.readString();
                struct.setTag_lineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FEATURE_IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature_image = iprot.readString();
                struct.setFeature_imageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // GENRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.genre = iprot.readString();
                struct.setGenreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LANGUAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.language = iprot.readString();
                struct.setLanguageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // KEYWORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keywords = iprot.readString();
                struct.setKeywordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // COPYRIGHTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.copyrights = iprot.readString();
                struct.setCopyrightsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DD_IMG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dd_img = iprot.readString();
                struct.setDd_imgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // DD_SUMMARY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dd_summary = iprot.readString();
                struct.setDd_summaryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // SERIES_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.series_type = iprot.readI32();
                struct.setSeries_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time_created = iprot.readI32();
                struct.setTime_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_or_edit_series_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.series_id != null) {
          oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
          oprot.writeString(struct.series_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.title_id != null) {
          oprot.writeFieldBegin(TITLE_ID_FIELD_DESC);
          oprot.writeString(struct.title_id);
          oprot.writeFieldEnd();
        }
        if (struct.tag_line != null) {
          oprot.writeFieldBegin(TAG_LINE_FIELD_DESC);
          oprot.writeString(struct.tag_line);
          oprot.writeFieldEnd();
        }
        if (struct.feature_image != null) {
          oprot.writeFieldBegin(FEATURE_IMAGE_FIELD_DESC);
          oprot.writeString(struct.feature_image);
          oprot.writeFieldEnd();
        }
        if (struct.genre != null) {
          oprot.writeFieldBegin(GENRE_FIELD_DESC);
          oprot.writeString(struct.genre);
          oprot.writeFieldEnd();
        }
        if (struct.language != null) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.language);
          oprot.writeFieldEnd();
        }
        if (struct.keywords != null) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          oprot.writeString(struct.keywords);
          oprot.writeFieldEnd();
        }
        if (struct.copyrights != null) {
          oprot.writeFieldBegin(COPYRIGHTS_FIELD_DESC);
          oprot.writeString(struct.copyrights);
          oprot.writeFieldEnd();
        }
        if (struct.dd_img != null) {
          oprot.writeFieldBegin(DD_IMG_FIELD_DESC);
          oprot.writeString(struct.dd_img);
          oprot.writeFieldEnd();
        }
        if (struct.dd_summary != null) {
          oprot.writeFieldBegin(DD_SUMMARY_FIELD_DESC);
          oprot.writeString(struct.dd_summary);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERIES_TYPE_FIELD_DESC);
        oprot.writeI32(struct.series_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_or_edit_series_argsTupleSchemeFactory implements SchemeFactory {
      public create_or_edit_series_argsTupleScheme getScheme() {
        return new create_or_edit_series_argsTupleScheme();
      }
    }

    private static class create_or_edit_series_argsTupleScheme extends TupleScheme<create_or_edit_series_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_or_edit_series_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSeries_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_id()) {
          optionals.set(1);
        }
        if (struct.isSetTitle()) {
          optionals.set(2);
        }
        if (struct.isSetTitle_id()) {
          optionals.set(3);
        }
        if (struct.isSetTag_line()) {
          optionals.set(4);
        }
        if (struct.isSetFeature_image()) {
          optionals.set(5);
        }
        if (struct.isSetGenre()) {
          optionals.set(6);
        }
        if (struct.isSetLanguage()) {
          optionals.set(7);
        }
        if (struct.isSetKeywords()) {
          optionals.set(8);
        }
        if (struct.isSetCopyrights()) {
          optionals.set(9);
        }
        if (struct.isSetDd_img()) {
          optionals.set(10);
        }
        if (struct.isSetDd_summary()) {
          optionals.set(11);
        }
        if (struct.isSetSeries_type()) {
          optionals.set(12);
        }
        if (struct.isSetTime_created()) {
          optionals.set(13);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetSeries_id()) {
          oprot.writeString(struct.series_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetTitle_id()) {
          oprot.writeString(struct.title_id);
        }
        if (struct.isSetTag_line()) {
          oprot.writeString(struct.tag_line);
        }
        if (struct.isSetFeature_image()) {
          oprot.writeString(struct.feature_image);
        }
        if (struct.isSetGenre()) {
          oprot.writeString(struct.genre);
        }
        if (struct.isSetLanguage()) {
          oprot.writeString(struct.language);
        }
        if (struct.isSetKeywords()) {
          oprot.writeString(struct.keywords);
        }
        if (struct.isSetCopyrights()) {
          oprot.writeString(struct.copyrights);
        }
        if (struct.isSetDd_img()) {
          oprot.writeString(struct.dd_img);
        }
        if (struct.isSetDd_summary()) {
          oprot.writeString(struct.dd_summary);
        }
        if (struct.isSetSeries_type()) {
          oprot.writeI32(struct.series_type);
        }
        if (struct.isSetTime_created()) {
          oprot.writeI32(struct.time_created);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_or_edit_series_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.series_id = iprot.readString();
          struct.setSeries_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.title_id = iprot.readString();
          struct.setTitle_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tag_line = iprot.readString();
          struct.setTag_lineIsSet(true);
        }
        if (incoming.get(5)) {
          struct.feature_image = iprot.readString();
          struct.setFeature_imageIsSet(true);
        }
        if (incoming.get(6)) {
          struct.genre = iprot.readString();
          struct.setGenreIsSet(true);
        }
        if (incoming.get(7)) {
          struct.language = iprot.readString();
          struct.setLanguageIsSet(true);
        }
        if (incoming.get(8)) {
          struct.keywords = iprot.readString();
          struct.setKeywordsIsSet(true);
        }
        if (incoming.get(9)) {
          struct.copyrights = iprot.readString();
          struct.setCopyrightsIsSet(true);
        }
        if (incoming.get(10)) {
          struct.dd_img = iprot.readString();
          struct.setDd_imgIsSet(true);
        }
        if (incoming.get(11)) {
          struct.dd_summary = iprot.readString();
          struct.setDd_summaryIsSet(true);
        }
        if (incoming.get(12)) {
          struct.series_type = iprot.readI32();
          struct.setSeries_typeIsSet(true);
        }
        if (incoming.get(13)) {
          struct.time_created = iprot.readI32();
          struct.setTime_createdIsSet(true);
        }
        if (incoming.get(14)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
      }
    }

  }

  public static class create_or_edit_series_result implements org.apache.thrift.TBase<create_or_edit_series_result, create_or_edit_series_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_or_edit_series_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_or_edit_series_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_or_edit_series_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_or_edit_series_result.class, metaDataMap);
    }

    public create_or_edit_series_result() {
    }

    public create_or_edit_series_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_or_edit_series_result(create_or_edit_series_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_or_edit_series_result deepCopy() {
      return new create_or_edit_series_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_or_edit_series_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_or_edit_series_result)
        return this.equals((create_or_edit_series_result)that);
      return false;
    }

    public boolean equals(create_or_edit_series_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_or_edit_series_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_or_edit_series_result typedOther = (create_or_edit_series_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_or_edit_series_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_or_edit_series_resultStandardSchemeFactory implements SchemeFactory {
      public create_or_edit_series_resultStandardScheme getScheme() {
        return new create_or_edit_series_resultStandardScheme();
      }
    }

    private static class create_or_edit_series_resultStandardScheme extends StandardScheme<create_or_edit_series_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_or_edit_series_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_or_edit_series_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_or_edit_series_resultTupleSchemeFactory implements SchemeFactory {
      public create_or_edit_series_resultTupleScheme getScheme() {
        return new create_or_edit_series_resultTupleScheme();
      }
    }

    private static class create_or_edit_series_resultTupleScheme extends TupleScheme<create_or_edit_series_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_or_edit_series_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_or_edit_series_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_or_edit_review_args implements org.apache.thrift.TBase<create_or_edit_review_args, create_or_edit_review_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_or_edit_review_args");

    private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("series_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REVIEW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("review_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("time_created", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_or_edit_review_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_or_edit_review_argsTupleSchemeFactory());
    }

    public String series_id; // required
    public String review_id; // required
    public String data; // required
    public String user_id; // required
    public int time_created; // required
    public int is_edit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERIES_ID((short)1, "series_id"),
      REVIEW_ID((short)2, "review_id"),
      DATA((short)3, "data"),
      USER_ID((short)4, "user_id"),
      TIME_CREATED((short)5, "time_created"),
      IS_EDIT((short)6, "is_edit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERIES_ID
            return SERIES_ID;
          case 2: // REVIEW_ID
            return REVIEW_ID;
          case 3: // DATA
            return DATA;
          case 4: // USER_ID
            return USER_ID;
          case 5: // TIME_CREATED
            return TIME_CREATED;
          case 6: // IS_EDIT
            return IS_EDIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_CREATED_ISSET_ID = 0;
    private static final int __IS_EDIT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("series_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVIEW_ID, new org.apache.thrift.meta_data.FieldMetaData("review_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_or_edit_review_args.class, metaDataMap);
    }

    public create_or_edit_review_args() {
    }

    public create_or_edit_review_args(
      String series_id,
      String review_id,
      String data,
      String user_id,
      int time_created,
      int is_edit)
    {
      this();
      this.series_id = series_id;
      this.review_id = review_id;
      this.data = data;
      this.user_id = user_id;
      this.time_created = time_created;
      setTime_createdIsSet(true);
      this.is_edit = is_edit;
      setIs_editIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_or_edit_review_args(create_or_edit_review_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSeries_id()) {
        this.series_id = other.series_id;
      }
      if (other.isSetReview_id()) {
        this.review_id = other.review_id;
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      this.time_created = other.time_created;
      this.is_edit = other.is_edit;
    }

    public create_or_edit_review_args deepCopy() {
      return new create_or_edit_review_args(this);
    }

    @Override
    public void clear() {
      this.series_id = null;
      this.review_id = null;
      this.data = null;
      this.user_id = null;
      setTime_createdIsSet(false);
      this.time_created = 0;
      setIs_editIsSet(false);
      this.is_edit = 0;
    }

    public String getSeries_id() {
      return this.series_id;
    }

    public create_or_edit_review_args setSeries_id(String series_id) {
      this.series_id = series_id;
      return this;
    }

    public void unsetSeries_id() {
      this.series_id = null;
    }

    /** Returns true if field series_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_id() {
      return this.series_id != null;
    }

    public void setSeries_idIsSet(boolean value) {
      if (!value) {
        this.series_id = null;
      }
    }

    public String getReview_id() {
      return this.review_id;
    }

    public create_or_edit_review_args setReview_id(String review_id) {
      this.review_id = review_id;
      return this;
    }

    public void unsetReview_id() {
      this.review_id = null;
    }

    /** Returns true if field review_id is set (has been assigned a value) and false otherwise */
    public boolean isSetReview_id() {
      return this.review_id != null;
    }

    public void setReview_idIsSet(boolean value) {
      if (!value) {
        this.review_id = null;
      }
    }

    public String getData() {
      return this.data;
    }

    public create_or_edit_review_args setData(String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public create_or_edit_review_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public int getTime_created() {
      return this.time_created;
    }

    public create_or_edit_review_args setTime_created(int time_created) {
      this.time_created = time_created;
      setTime_createdIsSet(true);
      return this;
    }

    public void unsetTime_created() {
      __isset_bit_vector.clear(__TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetTime_created() {
      return __isset_bit_vector.get(__TIME_CREATED_ISSET_ID);
    }

    public void setTime_createdIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_CREATED_ISSET_ID, value);
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_or_edit_review_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERIES_ID:
        if (value == null) {
          unsetSeries_id();
        } else {
          setSeries_id((String)value);
        }
        break;

      case REVIEW_ID:
        if (value == null) {
          unsetReview_id();
        } else {
          setReview_id((String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TIME_CREATED:
        if (value == null) {
          unsetTime_created();
        } else {
          setTime_created((Integer)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERIES_ID:
        return getSeries_id();

      case REVIEW_ID:
        return getReview_id();

      case DATA:
        return getData();

      case USER_ID:
        return getUser_id();

      case TIME_CREATED:
        return Integer.valueOf(getTime_created());

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERIES_ID:
        return isSetSeries_id();
      case REVIEW_ID:
        return isSetReview_id();
      case DATA:
        return isSetData();
      case USER_ID:
        return isSetUser_id();
      case TIME_CREATED:
        return isSetTime_created();
      case IS_EDIT:
        return isSetIs_edit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_or_edit_review_args)
        return this.equals((create_or_edit_review_args)that);
      return false;
    }

    public boolean equals(create_or_edit_review_args that) {
      if (that == null)
        return false;

      boolean this_present_series_id = true && this.isSetSeries_id();
      boolean that_present_series_id = true && that.isSetSeries_id();
      if (this_present_series_id || that_present_series_id) {
        if (!(this_present_series_id && that_present_series_id))
          return false;
        if (!this.series_id.equals(that.series_id))
          return false;
      }

      boolean this_present_review_id = true && this.isSetReview_id();
      boolean that_present_review_id = true && that.isSetReview_id();
      if (this_present_review_id || that_present_review_id) {
        if (!(this_present_review_id && that_present_review_id))
          return false;
        if (!this.review_id.equals(that.review_id))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_time_created = true;
      boolean that_present_time_created = true;
      if (this_present_time_created || that_present_time_created) {
        if (!(this_present_time_created && that_present_time_created))
          return false;
        if (this.time_created != that.time_created)
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_or_edit_review_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_or_edit_review_args typedOther = (create_or_edit_review_args)other;

      lastComparison = Boolean.valueOf(isSetSeries_id()).compareTo(typedOther.isSetSeries_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_id, typedOther.series_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReview_id()).compareTo(typedOther.isSetReview_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReview_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.review_id, typedOther.review_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime_created()).compareTo(typedOther.isSetTime_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_created, typedOther.time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_or_edit_review_args(");
      boolean first = true;

      sb.append("series_id:");
      if (this.series_id == null) {
        sb.append("null");
      } else {
        sb.append(this.series_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("review_id:");
      if (this.review_id == null) {
        sb.append("null");
      } else {
        sb.append(this.review_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time_created:");
      sb.append(this.time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_or_edit_review_argsStandardSchemeFactory implements SchemeFactory {
      public create_or_edit_review_argsStandardScheme getScheme() {
        return new create_or_edit_review_argsStandardScheme();
      }
    }

    private static class create_or_edit_review_argsStandardScheme extends StandardScheme<create_or_edit_review_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_or_edit_review_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERIES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_id = iprot.readString();
                struct.setSeries_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REVIEW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.review_id = iprot.readString();
                struct.setReview_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time_created = iprot.readI32();
                struct.setTime_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_or_edit_review_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.series_id != null) {
          oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
          oprot.writeString(struct.series_id);
          oprot.writeFieldEnd();
        }
        if (struct.review_id != null) {
          oprot.writeFieldBegin(REVIEW_ID_FIELD_DESC);
          oprot.writeString(struct.review_id);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_or_edit_review_argsTupleSchemeFactory implements SchemeFactory {
      public create_or_edit_review_argsTupleScheme getScheme() {
        return new create_or_edit_review_argsTupleScheme();
      }
    }

    private static class create_or_edit_review_argsTupleScheme extends TupleScheme<create_or_edit_review_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_or_edit_review_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSeries_id()) {
          optionals.set(0);
        }
        if (struct.isSetReview_id()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        if (struct.isSetUser_id()) {
          optionals.set(3);
        }
        if (struct.isSetTime_created()) {
          optionals.set(4);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSeries_id()) {
          oprot.writeString(struct.series_id);
        }
        if (struct.isSetReview_id()) {
          oprot.writeString(struct.review_id);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTime_created()) {
          oprot.writeI32(struct.time_created);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_or_edit_review_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.series_id = iprot.readString();
          struct.setSeries_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.review_id = iprot.readString();
          struct.setReview_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
        if (incoming.get(3)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.time_created = iprot.readI32();
          struct.setTime_createdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
      }
    }

  }

  public static class create_or_edit_review_result implements org.apache.thrift.TBase<create_or_edit_review_result, create_or_edit_review_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_or_edit_review_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_or_edit_review_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_or_edit_review_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_or_edit_review_result.class, metaDataMap);
    }

    public create_or_edit_review_result() {
    }

    public create_or_edit_review_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_or_edit_review_result(create_or_edit_review_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_or_edit_review_result deepCopy() {
      return new create_or_edit_review_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_or_edit_review_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_or_edit_review_result)
        return this.equals((create_or_edit_review_result)that);
      return false;
    }

    public boolean equals(create_or_edit_review_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_or_edit_review_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_or_edit_review_result typedOther = (create_or_edit_review_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_or_edit_review_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_or_edit_review_resultStandardSchemeFactory implements SchemeFactory {
      public create_or_edit_review_resultStandardScheme getScheme() {
        return new create_or_edit_review_resultStandardScheme();
      }
    }

    private static class create_or_edit_review_resultStandardScheme extends StandardScheme<create_or_edit_review_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_or_edit_review_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_or_edit_review_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_or_edit_review_resultTupleSchemeFactory implements SchemeFactory {
      public create_or_edit_review_resultTupleScheme getScheme() {
        return new create_or_edit_review_resultTupleScheme();
      }
    }

    private static class create_or_edit_review_resultTupleScheme extends TupleScheme<create_or_edit_review_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_or_edit_review_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_or_edit_review_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_or_edit_chapter_args implements org.apache.thrift.TBase<create_or_edit_chapter_args, create_or_edit_chapter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_or_edit_chapter_args");

    private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapter_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("series_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SERIES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("series_type", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("title_id", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField FEAT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("feat_image", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("time_created", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField FREE_OR_PAID_FIELD_DESC = new org.apache.thrift.protocol.TField("free_or_paid", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_or_edit_chapter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_or_edit_chapter_argsTupleSchemeFactory());
    }

    public String chapter_id; // required
    public String series_id; // required
    public String series_type; // required
    public String user_id; // required
    public String title_id; // required
    public String title; // required
    public String feat_image; // required
    public int time_created; // required
    public int free_or_paid; // required
    public int is_edit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAPTER_ID((short)1, "chapter_id"),
      SERIES_ID((short)2, "series_id"),
      SERIES_TYPE((short)3, "series_type"),
      USER_ID((short)4, "user_id"),
      TITLE_ID((short)5, "title_id"),
      TITLE((short)6, "title"),
      FEAT_IMAGE((short)7, "feat_image"),
      TIME_CREATED((short)8, "time_created"),
      FREE_OR_PAID((short)9, "free_or_paid"),
      IS_EDIT((short)10, "is_edit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHAPTER_ID
            return CHAPTER_ID;
          case 2: // SERIES_ID
            return SERIES_ID;
          case 3: // SERIES_TYPE
            return SERIES_TYPE;
          case 4: // USER_ID
            return USER_ID;
          case 5: // TITLE_ID
            return TITLE_ID;
          case 6: // TITLE
            return TITLE;
          case 7: // FEAT_IMAGE
            return FEAT_IMAGE;
          case 8: // TIME_CREATED
            return TIME_CREATED;
          case 9: // FREE_OR_PAID
            return FREE_OR_PAID;
          case 10: // IS_EDIT
            return IS_EDIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_CREATED_ISSET_ID = 0;
    private static final int __FREE_OR_PAID_ISSET_ID = 1;
    private static final int __IS_EDIT_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapter_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("series_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("series_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("title_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEAT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("feat_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FREE_OR_PAID, new org.apache.thrift.meta_data.FieldMetaData("free_or_paid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_or_edit_chapter_args.class, metaDataMap);
    }

    public create_or_edit_chapter_args() {
    }

    public create_or_edit_chapter_args(
      String chapter_id,
      String series_id,
      String series_type,
      String user_id,
      String title_id,
      String title,
      String feat_image,
      int time_created,
      int free_or_paid,
      int is_edit)
    {
      this();
      this.chapter_id = chapter_id;
      this.series_id = series_id;
      this.series_type = series_type;
      this.user_id = user_id;
      this.title_id = title_id;
      this.title = title;
      this.feat_image = feat_image;
      this.time_created = time_created;
      setTime_createdIsSet(true);
      this.free_or_paid = free_or_paid;
      setFree_or_paidIsSet(true);
      this.is_edit = is_edit;
      setIs_editIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_or_edit_chapter_args(create_or_edit_chapter_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetChapter_id()) {
        this.chapter_id = other.chapter_id;
      }
      if (other.isSetSeries_id()) {
        this.series_id = other.series_id;
      }
      if (other.isSetSeries_type()) {
        this.series_type = other.series_type;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      if (other.isSetTitle_id()) {
        this.title_id = other.title_id;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetFeat_image()) {
        this.feat_image = other.feat_image;
      }
      this.time_created = other.time_created;
      this.free_or_paid = other.free_or_paid;
      this.is_edit = other.is_edit;
    }

    public create_or_edit_chapter_args deepCopy() {
      return new create_or_edit_chapter_args(this);
    }

    @Override
    public void clear() {
      this.chapter_id = null;
      this.series_id = null;
      this.series_type = null;
      this.user_id = null;
      this.title_id = null;
      this.title = null;
      this.feat_image = null;
      setTime_createdIsSet(false);
      this.time_created = 0;
      setFree_or_paidIsSet(false);
      this.free_or_paid = 0;
      setIs_editIsSet(false);
      this.is_edit = 0;
    }

    public String getChapter_id() {
      return this.chapter_id;
    }

    public create_or_edit_chapter_args setChapter_id(String chapter_id) {
      this.chapter_id = chapter_id;
      return this;
    }

    public void unsetChapter_id() {
      this.chapter_id = null;
    }

    /** Returns true if field chapter_id is set (has been assigned a value) and false otherwise */
    public boolean isSetChapter_id() {
      return this.chapter_id != null;
    }

    public void setChapter_idIsSet(boolean value) {
      if (!value) {
        this.chapter_id = null;
      }
    }

    public String getSeries_id() {
      return this.series_id;
    }

    public create_or_edit_chapter_args setSeries_id(String series_id) {
      this.series_id = series_id;
      return this;
    }

    public void unsetSeries_id() {
      this.series_id = null;
    }

    /** Returns true if field series_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_id() {
      return this.series_id != null;
    }

    public void setSeries_idIsSet(boolean value) {
      if (!value) {
        this.series_id = null;
      }
    }

    public String getSeries_type() {
      return this.series_type;
    }

    public create_or_edit_chapter_args setSeries_type(String series_type) {
      this.series_type = series_type;
      return this;
    }

    public void unsetSeries_type() {
      this.series_type = null;
    }

    /** Returns true if field series_type is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_type() {
      return this.series_type != null;
    }

    public void setSeries_typeIsSet(boolean value) {
      if (!value) {
        this.series_type = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public create_or_edit_chapter_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public String getTitle_id() {
      return this.title_id;
    }

    public create_or_edit_chapter_args setTitle_id(String title_id) {
      this.title_id = title_id;
      return this;
    }

    public void unsetTitle_id() {
      this.title_id = null;
    }

    /** Returns true if field title_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle_id() {
      return this.title_id != null;
    }

    public void setTitle_idIsSet(boolean value) {
      if (!value) {
        this.title_id = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public create_or_edit_chapter_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getFeat_image() {
      return this.feat_image;
    }

    public create_or_edit_chapter_args setFeat_image(String feat_image) {
      this.feat_image = feat_image;
      return this;
    }

    public void unsetFeat_image() {
      this.feat_image = null;
    }

    /** Returns true if field feat_image is set (has been assigned a value) and false otherwise */
    public boolean isSetFeat_image() {
      return this.feat_image != null;
    }

    public void setFeat_imageIsSet(boolean value) {
      if (!value) {
        this.feat_image = null;
      }
    }

    public int getTime_created() {
      return this.time_created;
    }

    public create_or_edit_chapter_args setTime_created(int time_created) {
      this.time_created = time_created;
      setTime_createdIsSet(true);
      return this;
    }

    public void unsetTime_created() {
      __isset_bit_vector.clear(__TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetTime_created() {
      return __isset_bit_vector.get(__TIME_CREATED_ISSET_ID);
    }

    public void setTime_createdIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_CREATED_ISSET_ID, value);
    }

    public int getFree_or_paid() {
      return this.free_or_paid;
    }

    public create_or_edit_chapter_args setFree_or_paid(int free_or_paid) {
      this.free_or_paid = free_or_paid;
      setFree_or_paidIsSet(true);
      return this;
    }

    public void unsetFree_or_paid() {
      __isset_bit_vector.clear(__FREE_OR_PAID_ISSET_ID);
    }

    /** Returns true if field free_or_paid is set (has been assigned a value) and false otherwise */
    public boolean isSetFree_or_paid() {
      return __isset_bit_vector.get(__FREE_OR_PAID_ISSET_ID);
    }

    public void setFree_or_paidIsSet(boolean value) {
      __isset_bit_vector.set(__FREE_OR_PAID_ISSET_ID, value);
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_or_edit_chapter_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAPTER_ID:
        if (value == null) {
          unsetChapter_id();
        } else {
          setChapter_id((String)value);
        }
        break;

      case SERIES_ID:
        if (value == null) {
          unsetSeries_id();
        } else {
          setSeries_id((String)value);
        }
        break;

      case SERIES_TYPE:
        if (value == null) {
          unsetSeries_type();
        } else {
          setSeries_type((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TITLE_ID:
        if (value == null) {
          unsetTitle_id();
        } else {
          setTitle_id((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case FEAT_IMAGE:
        if (value == null) {
          unsetFeat_image();
        } else {
          setFeat_image((String)value);
        }
        break;

      case TIME_CREATED:
        if (value == null) {
          unsetTime_created();
        } else {
          setTime_created((Integer)value);
        }
        break;

      case FREE_OR_PAID:
        if (value == null) {
          unsetFree_or_paid();
        } else {
          setFree_or_paid((Integer)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAPTER_ID:
        return getChapter_id();

      case SERIES_ID:
        return getSeries_id();

      case SERIES_TYPE:
        return getSeries_type();

      case USER_ID:
        return getUser_id();

      case TITLE_ID:
        return getTitle_id();

      case TITLE:
        return getTitle();

      case FEAT_IMAGE:
        return getFeat_image();

      case TIME_CREATED:
        return Integer.valueOf(getTime_created());

      case FREE_OR_PAID:
        return Integer.valueOf(getFree_or_paid());

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAPTER_ID:
        return isSetChapter_id();
      case SERIES_ID:
        return isSetSeries_id();
      case SERIES_TYPE:
        return isSetSeries_type();
      case USER_ID:
        return isSetUser_id();
      case TITLE_ID:
        return isSetTitle_id();
      case TITLE:
        return isSetTitle();
      case FEAT_IMAGE:
        return isSetFeat_image();
      case TIME_CREATED:
        return isSetTime_created();
      case FREE_OR_PAID:
        return isSetFree_or_paid();
      case IS_EDIT:
        return isSetIs_edit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_or_edit_chapter_args)
        return this.equals((create_or_edit_chapter_args)that);
      return false;
    }

    public boolean equals(create_or_edit_chapter_args that) {
      if (that == null)
        return false;

      boolean this_present_chapter_id = true && this.isSetChapter_id();
      boolean that_present_chapter_id = true && that.isSetChapter_id();
      if (this_present_chapter_id || that_present_chapter_id) {
        if (!(this_present_chapter_id && that_present_chapter_id))
          return false;
        if (!this.chapter_id.equals(that.chapter_id))
          return false;
      }

      boolean this_present_series_id = true && this.isSetSeries_id();
      boolean that_present_series_id = true && that.isSetSeries_id();
      if (this_present_series_id || that_present_series_id) {
        if (!(this_present_series_id && that_present_series_id))
          return false;
        if (!this.series_id.equals(that.series_id))
          return false;
      }

      boolean this_present_series_type = true && this.isSetSeries_type();
      boolean that_present_series_type = true && that.isSetSeries_type();
      if (this_present_series_type || that_present_series_type) {
        if (!(this_present_series_type && that_present_series_type))
          return false;
        if (!this.series_type.equals(that.series_type))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_title_id = true && this.isSetTitle_id();
      boolean that_present_title_id = true && that.isSetTitle_id();
      if (this_present_title_id || that_present_title_id) {
        if (!(this_present_title_id && that_present_title_id))
          return false;
        if (!this.title_id.equals(that.title_id))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_feat_image = true && this.isSetFeat_image();
      boolean that_present_feat_image = true && that.isSetFeat_image();
      if (this_present_feat_image || that_present_feat_image) {
        if (!(this_present_feat_image && that_present_feat_image))
          return false;
        if (!this.feat_image.equals(that.feat_image))
          return false;
      }

      boolean this_present_time_created = true;
      boolean that_present_time_created = true;
      if (this_present_time_created || that_present_time_created) {
        if (!(this_present_time_created && that_present_time_created))
          return false;
        if (this.time_created != that.time_created)
          return false;
      }

      boolean this_present_free_or_paid = true;
      boolean that_present_free_or_paid = true;
      if (this_present_free_or_paid || that_present_free_or_paid) {
        if (!(this_present_free_or_paid && that_present_free_or_paid))
          return false;
        if (this.free_or_paid != that.free_or_paid)
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_or_edit_chapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_or_edit_chapter_args typedOther = (create_or_edit_chapter_args)other;

      lastComparison = Boolean.valueOf(isSetChapter_id()).compareTo(typedOther.isSetChapter_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapter_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapter_id, typedOther.chapter_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries_id()).compareTo(typedOther.isSetSeries_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_id, typedOther.series_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries_type()).compareTo(typedOther.isSetSeries_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_type, typedOther.series_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle_id()).compareTo(typedOther.isSetTitle_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title_id, typedOther.title_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeat_image()).compareTo(typedOther.isSetFeat_image());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeat_image()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feat_image, typedOther.feat_image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime_created()).compareTo(typedOther.isSetTime_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_created, typedOther.time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFree_or_paid()).compareTo(typedOther.isSetFree_or_paid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFree_or_paid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.free_or_paid, typedOther.free_or_paid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_or_edit_chapter_args(");
      boolean first = true;

      sb.append("chapter_id:");
      if (this.chapter_id == null) {
        sb.append("null");
      } else {
        sb.append(this.chapter_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series_id:");
      if (this.series_id == null) {
        sb.append("null");
      } else {
        sb.append(this.series_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series_type:");
      if (this.series_type == null) {
        sb.append("null");
      } else {
        sb.append(this.series_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title_id:");
      if (this.title_id == null) {
        sb.append("null");
      } else {
        sb.append(this.title_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feat_image:");
      if (this.feat_image == null) {
        sb.append("null");
      } else {
        sb.append(this.feat_image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time_created:");
      sb.append(this.time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("free_or_paid:");
      sb.append(this.free_or_paid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_or_edit_chapter_argsStandardSchemeFactory implements SchemeFactory {
      public create_or_edit_chapter_argsStandardScheme getScheme() {
        return new create_or_edit_chapter_argsStandardScheme();
      }
    }

    private static class create_or_edit_chapter_argsStandardScheme extends StandardScheme<create_or_edit_chapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_or_edit_chapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHAPTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapter_id = iprot.readString();
                struct.setChapter_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERIES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_id = iprot.readString();
                struct.setSeries_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERIES_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_type = iprot.readString();
                struct.setSeries_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TITLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title_id = iprot.readString();
                struct.setTitle_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FEAT_IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feat_image = iprot.readString();
                struct.setFeat_imageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time_created = iprot.readI32();
                struct.setTime_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // FREE_OR_PAID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.free_or_paid = iprot.readI32();
                struct.setFree_or_paidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_or_edit_chapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chapter_id != null) {
          oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
          oprot.writeString(struct.chapter_id);
          oprot.writeFieldEnd();
        }
        if (struct.series_id != null) {
          oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
          oprot.writeString(struct.series_id);
          oprot.writeFieldEnd();
        }
        if (struct.series_type != null) {
          oprot.writeFieldBegin(SERIES_TYPE_FIELD_DESC);
          oprot.writeString(struct.series_type);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        if (struct.title_id != null) {
          oprot.writeFieldBegin(TITLE_ID_FIELD_DESC);
          oprot.writeString(struct.title_id);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.feat_image != null) {
          oprot.writeFieldBegin(FEAT_IMAGE_FIELD_DESC);
          oprot.writeString(struct.feat_image);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FREE_OR_PAID_FIELD_DESC);
        oprot.writeI32(struct.free_or_paid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_or_edit_chapter_argsTupleSchemeFactory implements SchemeFactory {
      public create_or_edit_chapter_argsTupleScheme getScheme() {
        return new create_or_edit_chapter_argsTupleScheme();
      }
    }

    private static class create_or_edit_chapter_argsTupleScheme extends TupleScheme<create_or_edit_chapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_or_edit_chapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChapter_id()) {
          optionals.set(0);
        }
        if (struct.isSetSeries_id()) {
          optionals.set(1);
        }
        if (struct.isSetSeries_type()) {
          optionals.set(2);
        }
        if (struct.isSetUser_id()) {
          optionals.set(3);
        }
        if (struct.isSetTitle_id()) {
          optionals.set(4);
        }
        if (struct.isSetTitle()) {
          optionals.set(5);
        }
        if (struct.isSetFeat_image()) {
          optionals.set(6);
        }
        if (struct.isSetTime_created()) {
          optionals.set(7);
        }
        if (struct.isSetFree_or_paid()) {
          optionals.set(8);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetChapter_id()) {
          oprot.writeString(struct.chapter_id);
        }
        if (struct.isSetSeries_id()) {
          oprot.writeString(struct.series_id);
        }
        if (struct.isSetSeries_type()) {
          oprot.writeString(struct.series_type);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTitle_id()) {
          oprot.writeString(struct.title_id);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetFeat_image()) {
          oprot.writeString(struct.feat_image);
        }
        if (struct.isSetTime_created()) {
          oprot.writeI32(struct.time_created);
        }
        if (struct.isSetFree_or_paid()) {
          oprot.writeI32(struct.free_or_paid);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_or_edit_chapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.chapter_id = iprot.readString();
          struct.setChapter_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.series_id = iprot.readString();
          struct.setSeries_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.series_type = iprot.readString();
          struct.setSeries_typeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.title_id = iprot.readString();
          struct.setTitle_idIsSet(true);
        }
        if (incoming.get(5)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(6)) {
          struct.feat_image = iprot.readString();
          struct.setFeat_imageIsSet(true);
        }
        if (incoming.get(7)) {
          struct.time_created = iprot.readI32();
          struct.setTime_createdIsSet(true);
        }
        if (incoming.get(8)) {
          struct.free_or_paid = iprot.readI32();
          struct.setFree_or_paidIsSet(true);
        }
        if (incoming.get(9)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
      }
    }

  }

  public static class create_or_edit_chapter_result implements org.apache.thrift.TBase<create_or_edit_chapter_result, create_or_edit_chapter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_or_edit_chapter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_or_edit_chapter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_or_edit_chapter_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_or_edit_chapter_result.class, metaDataMap);
    }

    public create_or_edit_chapter_result() {
    }

    public create_or_edit_chapter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_or_edit_chapter_result(create_or_edit_chapter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_or_edit_chapter_result deepCopy() {
      return new create_or_edit_chapter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_or_edit_chapter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_or_edit_chapter_result)
        return this.equals((create_or_edit_chapter_result)that);
      return false;
    }

    public boolean equals(create_or_edit_chapter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_or_edit_chapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_or_edit_chapter_result typedOther = (create_or_edit_chapter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_or_edit_chapter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_or_edit_chapter_resultStandardSchemeFactory implements SchemeFactory {
      public create_or_edit_chapter_resultStandardScheme getScheme() {
        return new create_or_edit_chapter_resultStandardScheme();
      }
    }

    private static class create_or_edit_chapter_resultStandardScheme extends StandardScheme<create_or_edit_chapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_or_edit_chapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_or_edit_chapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_or_edit_chapter_resultTupleSchemeFactory implements SchemeFactory {
      public create_or_edit_chapter_resultTupleScheme getScheme() {
        return new create_or_edit_chapter_resultTupleScheme();
      }
    }

    private static class create_or_edit_chapter_resultTupleScheme extends TupleScheme<create_or_edit_chapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_or_edit_chapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_or_edit_chapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class subscribe_series_args implements org.apache.thrift.TBase<subscribe_series_args, subscribe_series_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribe_series_args");

    private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("series_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subscribe_series_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subscribe_series_argsTupleSchemeFactory());
    }

    public String series_id; // required
    public String user_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERIES_ID((short)1, "series_id"),
      USER_ID((short)2, "user_id"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERIES_ID
            return SERIES_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("series_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribe_series_args.class, metaDataMap);
    }

    public subscribe_series_args() {
    }

    public subscribe_series_args(
      String series_id,
      String user_id,
      int time)
    {
      this();
      this.series_id = series_id;
      this.user_id = user_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribe_series_args(subscribe_series_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSeries_id()) {
        this.series_id = other.series_id;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      this.time = other.time;
    }

    public subscribe_series_args deepCopy() {
      return new subscribe_series_args(this);
    }

    @Override
    public void clear() {
      this.series_id = null;
      this.user_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getSeries_id() {
      return this.series_id;
    }

    public subscribe_series_args setSeries_id(String series_id) {
      this.series_id = series_id;
      return this;
    }

    public void unsetSeries_id() {
      this.series_id = null;
    }

    /** Returns true if field series_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_id() {
      return this.series_id != null;
    }

    public void setSeries_idIsSet(boolean value) {
      if (!value) {
        this.series_id = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public subscribe_series_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public subscribe_series_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERIES_ID:
        if (value == null) {
          unsetSeries_id();
        } else {
          setSeries_id((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERIES_ID:
        return getSeries_id();

      case USER_ID:
        return getUser_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERIES_ID:
        return isSetSeries_id();
      case USER_ID:
        return isSetUser_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribe_series_args)
        return this.equals((subscribe_series_args)that);
      return false;
    }

    public boolean equals(subscribe_series_args that) {
      if (that == null)
        return false;

      boolean this_present_series_id = true && this.isSetSeries_id();
      boolean that_present_series_id = true && that.isSetSeries_id();
      if (this_present_series_id || that_present_series_id) {
        if (!(this_present_series_id && that_present_series_id))
          return false;
        if (!this.series_id.equals(that.series_id))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(subscribe_series_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      subscribe_series_args typedOther = (subscribe_series_args)other;

      lastComparison = Boolean.valueOf(isSetSeries_id()).compareTo(typedOther.isSetSeries_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_id, typedOther.series_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subscribe_series_args(");
      boolean first = true;

      sb.append("series_id:");
      if (this.series_id == null) {
        sb.append("null");
      } else {
        sb.append(this.series_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribe_series_argsStandardSchemeFactory implements SchemeFactory {
      public subscribe_series_argsStandardScheme getScheme() {
        return new subscribe_series_argsStandardScheme();
      }
    }

    private static class subscribe_series_argsStandardScheme extends StandardScheme<subscribe_series_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribe_series_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERIES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_id = iprot.readString();
                struct.setSeries_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribe_series_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.series_id != null) {
          oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
          oprot.writeString(struct.series_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribe_series_argsTupleSchemeFactory implements SchemeFactory {
      public subscribe_series_argsTupleScheme getScheme() {
        return new subscribe_series_argsTupleScheme();
      }
    }

    private static class subscribe_series_argsTupleScheme extends TupleScheme<subscribe_series_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribe_series_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSeries_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_id()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSeries_id()) {
          oprot.writeString(struct.series_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribe_series_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.series_id = iprot.readString();
          struct.setSeries_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class subscribe_series_result implements org.apache.thrift.TBase<subscribe_series_result, subscribe_series_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribe_series_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subscribe_series_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subscribe_series_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribe_series_result.class, metaDataMap);
    }

    public subscribe_series_result() {
    }

    public subscribe_series_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribe_series_result(subscribe_series_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public subscribe_series_result deepCopy() {
      return new subscribe_series_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public subscribe_series_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribe_series_result)
        return this.equals((subscribe_series_result)that);
      return false;
    }

    public boolean equals(subscribe_series_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(subscribe_series_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      subscribe_series_result typedOther = (subscribe_series_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subscribe_series_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribe_series_resultStandardSchemeFactory implements SchemeFactory {
      public subscribe_series_resultStandardScheme getScheme() {
        return new subscribe_series_resultStandardScheme();
      }
    }

    private static class subscribe_series_resultStandardScheme extends StandardScheme<subscribe_series_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribe_series_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribe_series_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribe_series_resultTupleSchemeFactory implements SchemeFactory {
      public subscribe_series_resultTupleScheme getScheme() {
        return new subscribe_series_resultTupleScheme();
      }
    }

    private static class subscribe_series_resultTupleScheme extends TupleScheme<subscribe_series_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribe_series_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribe_series_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class favourite_chapter_args implements org.apache.thrift.TBase<favourite_chapter_args, favourite_chapter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("favourite_chapter_args");

    private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapter_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("series_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new favourite_chapter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new favourite_chapter_argsTupleSchemeFactory());
    }

    public String chapter_id; // required
    public String series_id; // required
    public String user_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAPTER_ID((short)1, "chapter_id"),
      SERIES_ID((short)2, "series_id"),
      USER_ID((short)3, "user_id"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHAPTER_ID
            return CHAPTER_ID;
          case 2: // SERIES_ID
            return SERIES_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapter_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("series_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(favourite_chapter_args.class, metaDataMap);
    }

    public favourite_chapter_args() {
    }

    public favourite_chapter_args(
      String chapter_id,
      String series_id,
      String user_id,
      int time)
    {
      this();
      this.chapter_id = chapter_id;
      this.series_id = series_id;
      this.user_id = user_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public favourite_chapter_args(favourite_chapter_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetChapter_id()) {
        this.chapter_id = other.chapter_id;
      }
      if (other.isSetSeries_id()) {
        this.series_id = other.series_id;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      this.time = other.time;
    }

    public favourite_chapter_args deepCopy() {
      return new favourite_chapter_args(this);
    }

    @Override
    public void clear() {
      this.chapter_id = null;
      this.series_id = null;
      this.user_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getChapter_id() {
      return this.chapter_id;
    }

    public favourite_chapter_args setChapter_id(String chapter_id) {
      this.chapter_id = chapter_id;
      return this;
    }

    public void unsetChapter_id() {
      this.chapter_id = null;
    }

    /** Returns true if field chapter_id is set (has been assigned a value) and false otherwise */
    public boolean isSetChapter_id() {
      return this.chapter_id != null;
    }

    public void setChapter_idIsSet(boolean value) {
      if (!value) {
        this.chapter_id = null;
      }
    }

    public String getSeries_id() {
      return this.series_id;
    }

    public favourite_chapter_args setSeries_id(String series_id) {
      this.series_id = series_id;
      return this;
    }

    public void unsetSeries_id() {
      this.series_id = null;
    }

    /** Returns true if field series_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_id() {
      return this.series_id != null;
    }

    public void setSeries_idIsSet(boolean value) {
      if (!value) {
        this.series_id = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public favourite_chapter_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public favourite_chapter_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAPTER_ID:
        if (value == null) {
          unsetChapter_id();
        } else {
          setChapter_id((String)value);
        }
        break;

      case SERIES_ID:
        if (value == null) {
          unsetSeries_id();
        } else {
          setSeries_id((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAPTER_ID:
        return getChapter_id();

      case SERIES_ID:
        return getSeries_id();

      case USER_ID:
        return getUser_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAPTER_ID:
        return isSetChapter_id();
      case SERIES_ID:
        return isSetSeries_id();
      case USER_ID:
        return isSetUser_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof favourite_chapter_args)
        return this.equals((favourite_chapter_args)that);
      return false;
    }

    public boolean equals(favourite_chapter_args that) {
      if (that == null)
        return false;

      boolean this_present_chapter_id = true && this.isSetChapter_id();
      boolean that_present_chapter_id = true && that.isSetChapter_id();
      if (this_present_chapter_id || that_present_chapter_id) {
        if (!(this_present_chapter_id && that_present_chapter_id))
          return false;
        if (!this.chapter_id.equals(that.chapter_id))
          return false;
      }

      boolean this_present_series_id = true && this.isSetSeries_id();
      boolean that_present_series_id = true && that.isSetSeries_id();
      if (this_present_series_id || that_present_series_id) {
        if (!(this_present_series_id && that_present_series_id))
          return false;
        if (!this.series_id.equals(that.series_id))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(favourite_chapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      favourite_chapter_args typedOther = (favourite_chapter_args)other;

      lastComparison = Boolean.valueOf(isSetChapter_id()).compareTo(typedOther.isSetChapter_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapter_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapter_id, typedOther.chapter_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries_id()).compareTo(typedOther.isSetSeries_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_id, typedOther.series_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("favourite_chapter_args(");
      boolean first = true;

      sb.append("chapter_id:");
      if (this.chapter_id == null) {
        sb.append("null");
      } else {
        sb.append(this.chapter_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series_id:");
      if (this.series_id == null) {
        sb.append("null");
      } else {
        sb.append(this.series_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class favourite_chapter_argsStandardSchemeFactory implements SchemeFactory {
      public favourite_chapter_argsStandardScheme getScheme() {
        return new favourite_chapter_argsStandardScheme();
      }
    }

    private static class favourite_chapter_argsStandardScheme extends StandardScheme<favourite_chapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, favourite_chapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHAPTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapter_id = iprot.readString();
                struct.setChapter_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERIES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_id = iprot.readString();
                struct.setSeries_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, favourite_chapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chapter_id != null) {
          oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
          oprot.writeString(struct.chapter_id);
          oprot.writeFieldEnd();
        }
        if (struct.series_id != null) {
          oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
          oprot.writeString(struct.series_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class favourite_chapter_argsTupleSchemeFactory implements SchemeFactory {
      public favourite_chapter_argsTupleScheme getScheme() {
        return new favourite_chapter_argsTupleScheme();
      }
    }

    private static class favourite_chapter_argsTupleScheme extends TupleScheme<favourite_chapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, favourite_chapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChapter_id()) {
          optionals.set(0);
        }
        if (struct.isSetSeries_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetChapter_id()) {
          oprot.writeString(struct.chapter_id);
        }
        if (struct.isSetSeries_id()) {
          oprot.writeString(struct.series_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, favourite_chapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.chapter_id = iprot.readString();
          struct.setChapter_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.series_id = iprot.readString();
          struct.setSeries_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class favourite_chapter_result implements org.apache.thrift.TBase<favourite_chapter_result, favourite_chapter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("favourite_chapter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new favourite_chapter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new favourite_chapter_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(favourite_chapter_result.class, metaDataMap);
    }

    public favourite_chapter_result() {
    }

    public favourite_chapter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public favourite_chapter_result(favourite_chapter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public favourite_chapter_result deepCopy() {
      return new favourite_chapter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public favourite_chapter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof favourite_chapter_result)
        return this.equals((favourite_chapter_result)that);
      return false;
    }

    public boolean equals(favourite_chapter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(favourite_chapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      favourite_chapter_result typedOther = (favourite_chapter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("favourite_chapter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class favourite_chapter_resultStandardSchemeFactory implements SchemeFactory {
      public favourite_chapter_resultStandardScheme getScheme() {
        return new favourite_chapter_resultStandardScheme();
      }
    }

    private static class favourite_chapter_resultStandardScheme extends StandardScheme<favourite_chapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, favourite_chapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, favourite_chapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class favourite_chapter_resultTupleSchemeFactory implements SchemeFactory {
      public favourite_chapter_resultTupleScheme getScheme() {
        return new favourite_chapter_resultTupleScheme();
      }
    }

    private static class favourite_chapter_resultTupleScheme extends TupleScheme<favourite_chapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, favourite_chapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, favourite_chapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bookmark_chapter_args implements org.apache.thrift.TBase<bookmark_chapter_args, bookmark_chapter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bookmark_chapter_args");

    private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapter_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("series_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bookmark_chapter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bookmark_chapter_argsTupleSchemeFactory());
    }

    public String chapter_id; // required
    public String series_id; // required
    public String user_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAPTER_ID((short)1, "chapter_id"),
      SERIES_ID((short)2, "series_id"),
      USER_ID((short)3, "user_id"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHAPTER_ID
            return CHAPTER_ID;
          case 2: // SERIES_ID
            return SERIES_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapter_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("series_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bookmark_chapter_args.class, metaDataMap);
    }

    public bookmark_chapter_args() {
    }

    public bookmark_chapter_args(
      String chapter_id,
      String series_id,
      String user_id,
      int time)
    {
      this();
      this.chapter_id = chapter_id;
      this.series_id = series_id;
      this.user_id = user_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bookmark_chapter_args(bookmark_chapter_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetChapter_id()) {
        this.chapter_id = other.chapter_id;
      }
      if (other.isSetSeries_id()) {
        this.series_id = other.series_id;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      this.time = other.time;
    }

    public bookmark_chapter_args deepCopy() {
      return new bookmark_chapter_args(this);
    }

    @Override
    public void clear() {
      this.chapter_id = null;
      this.series_id = null;
      this.user_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getChapter_id() {
      return this.chapter_id;
    }

    public bookmark_chapter_args setChapter_id(String chapter_id) {
      this.chapter_id = chapter_id;
      return this;
    }

    public void unsetChapter_id() {
      this.chapter_id = null;
    }

    /** Returns true if field chapter_id is set (has been assigned a value) and false otherwise */
    public boolean isSetChapter_id() {
      return this.chapter_id != null;
    }

    public void setChapter_idIsSet(boolean value) {
      if (!value) {
        this.chapter_id = null;
      }
    }

    public String getSeries_id() {
      return this.series_id;
    }

    public bookmark_chapter_args setSeries_id(String series_id) {
      this.series_id = series_id;
      return this;
    }

    public void unsetSeries_id() {
      this.series_id = null;
    }

    /** Returns true if field series_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_id() {
      return this.series_id != null;
    }

    public void setSeries_idIsSet(boolean value) {
      if (!value) {
        this.series_id = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public bookmark_chapter_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public bookmark_chapter_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAPTER_ID:
        if (value == null) {
          unsetChapter_id();
        } else {
          setChapter_id((String)value);
        }
        break;

      case SERIES_ID:
        if (value == null) {
          unsetSeries_id();
        } else {
          setSeries_id((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAPTER_ID:
        return getChapter_id();

      case SERIES_ID:
        return getSeries_id();

      case USER_ID:
        return getUser_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAPTER_ID:
        return isSetChapter_id();
      case SERIES_ID:
        return isSetSeries_id();
      case USER_ID:
        return isSetUser_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bookmark_chapter_args)
        return this.equals((bookmark_chapter_args)that);
      return false;
    }

    public boolean equals(bookmark_chapter_args that) {
      if (that == null)
        return false;

      boolean this_present_chapter_id = true && this.isSetChapter_id();
      boolean that_present_chapter_id = true && that.isSetChapter_id();
      if (this_present_chapter_id || that_present_chapter_id) {
        if (!(this_present_chapter_id && that_present_chapter_id))
          return false;
        if (!this.chapter_id.equals(that.chapter_id))
          return false;
      }

      boolean this_present_series_id = true && this.isSetSeries_id();
      boolean that_present_series_id = true && that.isSetSeries_id();
      if (this_present_series_id || that_present_series_id) {
        if (!(this_present_series_id && that_present_series_id))
          return false;
        if (!this.series_id.equals(that.series_id))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bookmark_chapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bookmark_chapter_args typedOther = (bookmark_chapter_args)other;

      lastComparison = Boolean.valueOf(isSetChapter_id()).compareTo(typedOther.isSetChapter_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapter_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapter_id, typedOther.chapter_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries_id()).compareTo(typedOther.isSetSeries_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_id, typedOther.series_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bookmark_chapter_args(");
      boolean first = true;

      sb.append("chapter_id:");
      if (this.chapter_id == null) {
        sb.append("null");
      } else {
        sb.append(this.chapter_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series_id:");
      if (this.series_id == null) {
        sb.append("null");
      } else {
        sb.append(this.series_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bookmark_chapter_argsStandardSchemeFactory implements SchemeFactory {
      public bookmark_chapter_argsStandardScheme getScheme() {
        return new bookmark_chapter_argsStandardScheme();
      }
    }

    private static class bookmark_chapter_argsStandardScheme extends StandardScheme<bookmark_chapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bookmark_chapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHAPTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapter_id = iprot.readString();
                struct.setChapter_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERIES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_id = iprot.readString();
                struct.setSeries_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bookmark_chapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chapter_id != null) {
          oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
          oprot.writeString(struct.chapter_id);
          oprot.writeFieldEnd();
        }
        if (struct.series_id != null) {
          oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
          oprot.writeString(struct.series_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bookmark_chapter_argsTupleSchemeFactory implements SchemeFactory {
      public bookmark_chapter_argsTupleScheme getScheme() {
        return new bookmark_chapter_argsTupleScheme();
      }
    }

    private static class bookmark_chapter_argsTupleScheme extends TupleScheme<bookmark_chapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bookmark_chapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChapter_id()) {
          optionals.set(0);
        }
        if (struct.isSetSeries_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetChapter_id()) {
          oprot.writeString(struct.chapter_id);
        }
        if (struct.isSetSeries_id()) {
          oprot.writeString(struct.series_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bookmark_chapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.chapter_id = iprot.readString();
          struct.setChapter_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.series_id = iprot.readString();
          struct.setSeries_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class bookmark_chapter_result implements org.apache.thrift.TBase<bookmark_chapter_result, bookmark_chapter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bookmark_chapter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bookmark_chapter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bookmark_chapter_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bookmark_chapter_result.class, metaDataMap);
    }

    public bookmark_chapter_result() {
    }

    public bookmark_chapter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bookmark_chapter_result(bookmark_chapter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public bookmark_chapter_result deepCopy() {
      return new bookmark_chapter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public bookmark_chapter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bookmark_chapter_result)
        return this.equals((bookmark_chapter_result)that);
      return false;
    }

    public boolean equals(bookmark_chapter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bookmark_chapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bookmark_chapter_result typedOther = (bookmark_chapter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bookmark_chapter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bookmark_chapter_resultStandardSchemeFactory implements SchemeFactory {
      public bookmark_chapter_resultStandardScheme getScheme() {
        return new bookmark_chapter_resultStandardScheme();
      }
    }

    private static class bookmark_chapter_resultStandardScheme extends StandardScheme<bookmark_chapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bookmark_chapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bookmark_chapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bookmark_chapter_resultTupleSchemeFactory implements SchemeFactory {
      public bookmark_chapter_resultTupleScheme getScheme() {
        return new bookmark_chapter_resultTupleScheme();
      }
    }

    private static class bookmark_chapter_resultTupleScheme extends TupleScheme<bookmark_chapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bookmark_chapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bookmark_chapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rate_chapter_args implements org.apache.thrift.TBase<rate_chapter_args, rate_chapter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rate_chapter_args");

    private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapter_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("series_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rating", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rate_chapter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rate_chapter_argsTupleSchemeFactory());
    }

    public String chapter_id; // required
    public String series_id; // required
    public int rating; // required
    public String user_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAPTER_ID((short)1, "chapter_id"),
      SERIES_ID((short)2, "series_id"),
      RATING((short)3, "rating"),
      USER_ID((short)4, "user_id"),
      TIME((short)5, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHAPTER_ID
            return CHAPTER_ID;
          case 2: // SERIES_ID
            return SERIES_ID;
          case 3: // RATING
            return RATING;
          case 4: // USER_ID
            return USER_ID;
          case 5: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RATING_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapter_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("series_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RATING, new org.apache.thrift.meta_data.FieldMetaData("rating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rate_chapter_args.class, metaDataMap);
    }

    public rate_chapter_args() {
    }

    public rate_chapter_args(
      String chapter_id,
      String series_id,
      int rating,
      String user_id,
      int time)
    {
      this();
      this.chapter_id = chapter_id;
      this.series_id = series_id;
      this.rating = rating;
      setRatingIsSet(true);
      this.user_id = user_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rate_chapter_args(rate_chapter_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetChapter_id()) {
        this.chapter_id = other.chapter_id;
      }
      if (other.isSetSeries_id()) {
        this.series_id = other.series_id;
      }
      this.rating = other.rating;
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      this.time = other.time;
    }

    public rate_chapter_args deepCopy() {
      return new rate_chapter_args(this);
    }

    @Override
    public void clear() {
      this.chapter_id = null;
      this.series_id = null;
      setRatingIsSet(false);
      this.rating = 0;
      this.user_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getChapter_id() {
      return this.chapter_id;
    }

    public rate_chapter_args setChapter_id(String chapter_id) {
      this.chapter_id = chapter_id;
      return this;
    }

    public void unsetChapter_id() {
      this.chapter_id = null;
    }

    /** Returns true if field chapter_id is set (has been assigned a value) and false otherwise */
    public boolean isSetChapter_id() {
      return this.chapter_id != null;
    }

    public void setChapter_idIsSet(boolean value) {
      if (!value) {
        this.chapter_id = null;
      }
    }

    public String getSeries_id() {
      return this.series_id;
    }

    public rate_chapter_args setSeries_id(String series_id) {
      this.series_id = series_id;
      return this;
    }

    public void unsetSeries_id() {
      this.series_id = null;
    }

    /** Returns true if field series_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_id() {
      return this.series_id != null;
    }

    public void setSeries_idIsSet(boolean value) {
      if (!value) {
        this.series_id = null;
      }
    }

    public int getRating() {
      return this.rating;
    }

    public rate_chapter_args setRating(int rating) {
      this.rating = rating;
      setRatingIsSet(true);
      return this;
    }

    public void unsetRating() {
      __isset_bit_vector.clear(__RATING_ISSET_ID);
    }

    /** Returns true if field rating is set (has been assigned a value) and false otherwise */
    public boolean isSetRating() {
      return __isset_bit_vector.get(__RATING_ISSET_ID);
    }

    public void setRatingIsSet(boolean value) {
      __isset_bit_vector.set(__RATING_ISSET_ID, value);
    }

    public String getUser_id() {
      return this.user_id;
    }

    public rate_chapter_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public rate_chapter_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAPTER_ID:
        if (value == null) {
          unsetChapter_id();
        } else {
          setChapter_id((String)value);
        }
        break;

      case SERIES_ID:
        if (value == null) {
          unsetSeries_id();
        } else {
          setSeries_id((String)value);
        }
        break;

      case RATING:
        if (value == null) {
          unsetRating();
        } else {
          setRating((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAPTER_ID:
        return getChapter_id();

      case SERIES_ID:
        return getSeries_id();

      case RATING:
        return Integer.valueOf(getRating());

      case USER_ID:
        return getUser_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAPTER_ID:
        return isSetChapter_id();
      case SERIES_ID:
        return isSetSeries_id();
      case RATING:
        return isSetRating();
      case USER_ID:
        return isSetUser_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rate_chapter_args)
        return this.equals((rate_chapter_args)that);
      return false;
    }

    public boolean equals(rate_chapter_args that) {
      if (that == null)
        return false;

      boolean this_present_chapter_id = true && this.isSetChapter_id();
      boolean that_present_chapter_id = true && that.isSetChapter_id();
      if (this_present_chapter_id || that_present_chapter_id) {
        if (!(this_present_chapter_id && that_present_chapter_id))
          return false;
        if (!this.chapter_id.equals(that.chapter_id))
          return false;
      }

      boolean this_present_series_id = true && this.isSetSeries_id();
      boolean that_present_series_id = true && that.isSetSeries_id();
      if (this_present_series_id || that_present_series_id) {
        if (!(this_present_series_id && that_present_series_id))
          return false;
        if (!this.series_id.equals(that.series_id))
          return false;
      }

      boolean this_present_rating = true;
      boolean that_present_rating = true;
      if (this_present_rating || that_present_rating) {
        if (!(this_present_rating && that_present_rating))
          return false;
        if (this.rating != that.rating)
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rate_chapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rate_chapter_args typedOther = (rate_chapter_args)other;

      lastComparison = Boolean.valueOf(isSetChapter_id()).compareTo(typedOther.isSetChapter_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapter_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapter_id, typedOther.chapter_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries_id()).compareTo(typedOther.isSetSeries_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_id, typedOther.series_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRating()).compareTo(typedOther.isSetRating());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRating()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rating, typedOther.rating);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rate_chapter_args(");
      boolean first = true;

      sb.append("chapter_id:");
      if (this.chapter_id == null) {
        sb.append("null");
      } else {
        sb.append(this.chapter_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series_id:");
      if (this.series_id == null) {
        sb.append("null");
      } else {
        sb.append(this.series_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rating:");
      sb.append(this.rating);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rate_chapter_argsStandardSchemeFactory implements SchemeFactory {
      public rate_chapter_argsStandardScheme getScheme() {
        return new rate_chapter_argsStandardScheme();
      }
    }

    private static class rate_chapter_argsStandardScheme extends StandardScheme<rate_chapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rate_chapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHAPTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapter_id = iprot.readString();
                struct.setChapter_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERIES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_id = iprot.readString();
                struct.setSeries_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RATING
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rating = iprot.readI32();
                struct.setRatingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rate_chapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chapter_id != null) {
          oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
          oprot.writeString(struct.chapter_id);
          oprot.writeFieldEnd();
        }
        if (struct.series_id != null) {
          oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
          oprot.writeString(struct.series_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RATING_FIELD_DESC);
        oprot.writeI32(struct.rating);
        oprot.writeFieldEnd();
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rate_chapter_argsTupleSchemeFactory implements SchemeFactory {
      public rate_chapter_argsTupleScheme getScheme() {
        return new rate_chapter_argsTupleScheme();
      }
    }

    private static class rate_chapter_argsTupleScheme extends TupleScheme<rate_chapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rate_chapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChapter_id()) {
          optionals.set(0);
        }
        if (struct.isSetSeries_id()) {
          optionals.set(1);
        }
        if (struct.isSetRating()) {
          optionals.set(2);
        }
        if (struct.isSetUser_id()) {
          optionals.set(3);
        }
        if (struct.isSetTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetChapter_id()) {
          oprot.writeString(struct.chapter_id);
        }
        if (struct.isSetSeries_id()) {
          oprot.writeString(struct.series_id);
        }
        if (struct.isSetRating()) {
          oprot.writeI32(struct.rating);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rate_chapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.chapter_id = iprot.readString();
          struct.setChapter_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.series_id = iprot.readString();
          struct.setSeries_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rating = iprot.readI32();
          struct.setRatingIsSet(true);
        }
        if (incoming.get(3)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class rate_chapter_result implements org.apache.thrift.TBase<rate_chapter_result, rate_chapter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rate_chapter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rate_chapter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rate_chapter_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rate_chapter_result.class, metaDataMap);
    }

    public rate_chapter_result() {
    }

    public rate_chapter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rate_chapter_result(rate_chapter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public rate_chapter_result deepCopy() {
      return new rate_chapter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public rate_chapter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rate_chapter_result)
        return this.equals((rate_chapter_result)that);
      return false;
    }

    public boolean equals(rate_chapter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rate_chapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rate_chapter_result typedOther = (rate_chapter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rate_chapter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rate_chapter_resultStandardSchemeFactory implements SchemeFactory {
      public rate_chapter_resultStandardScheme getScheme() {
        return new rate_chapter_resultStandardScheme();
      }
    }

    private static class rate_chapter_resultStandardScheme extends StandardScheme<rate_chapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rate_chapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rate_chapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rate_chapter_resultTupleSchemeFactory implements SchemeFactory {
      public rate_chapter_resultTupleScheme getScheme() {
        return new rate_chapter_resultTupleScheme();
      }
    }

    private static class rate_chapter_resultTupleScheme extends TupleScheme<rate_chapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rate_chapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rate_chapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class recored_chapter_view_args implements org.apache.thrift.TBase<recored_chapter_view_args, recored_chapter_view_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recored_chapter_view_args");

    private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapter_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("series_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recored_chapter_view_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recored_chapter_view_argsTupleSchemeFactory());
    }

    public String chapter_id; // required
    public String series_id; // required
    public String user_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAPTER_ID((short)1, "chapter_id"),
      SERIES_ID((short)2, "series_id"),
      USER_ID((short)3, "user_id"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHAPTER_ID
            return CHAPTER_ID;
          case 2: // SERIES_ID
            return SERIES_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapter_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("series_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recored_chapter_view_args.class, metaDataMap);
    }

    public recored_chapter_view_args() {
    }

    public recored_chapter_view_args(
      String chapter_id,
      String series_id,
      String user_id,
      int time)
    {
      this();
      this.chapter_id = chapter_id;
      this.series_id = series_id;
      this.user_id = user_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recored_chapter_view_args(recored_chapter_view_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetChapter_id()) {
        this.chapter_id = other.chapter_id;
      }
      if (other.isSetSeries_id()) {
        this.series_id = other.series_id;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      this.time = other.time;
    }

    public recored_chapter_view_args deepCopy() {
      return new recored_chapter_view_args(this);
    }

    @Override
    public void clear() {
      this.chapter_id = null;
      this.series_id = null;
      this.user_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getChapter_id() {
      return this.chapter_id;
    }

    public recored_chapter_view_args setChapter_id(String chapter_id) {
      this.chapter_id = chapter_id;
      return this;
    }

    public void unsetChapter_id() {
      this.chapter_id = null;
    }

    /** Returns true if field chapter_id is set (has been assigned a value) and false otherwise */
    public boolean isSetChapter_id() {
      return this.chapter_id != null;
    }

    public void setChapter_idIsSet(boolean value) {
      if (!value) {
        this.chapter_id = null;
      }
    }

    public String getSeries_id() {
      return this.series_id;
    }

    public recored_chapter_view_args setSeries_id(String series_id) {
      this.series_id = series_id;
      return this;
    }

    public void unsetSeries_id() {
      this.series_id = null;
    }

    /** Returns true if field series_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries_id() {
      return this.series_id != null;
    }

    public void setSeries_idIsSet(boolean value) {
      if (!value) {
        this.series_id = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public recored_chapter_view_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public recored_chapter_view_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAPTER_ID:
        if (value == null) {
          unsetChapter_id();
        } else {
          setChapter_id((String)value);
        }
        break;

      case SERIES_ID:
        if (value == null) {
          unsetSeries_id();
        } else {
          setSeries_id((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAPTER_ID:
        return getChapter_id();

      case SERIES_ID:
        return getSeries_id();

      case USER_ID:
        return getUser_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAPTER_ID:
        return isSetChapter_id();
      case SERIES_ID:
        return isSetSeries_id();
      case USER_ID:
        return isSetUser_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recored_chapter_view_args)
        return this.equals((recored_chapter_view_args)that);
      return false;
    }

    public boolean equals(recored_chapter_view_args that) {
      if (that == null)
        return false;

      boolean this_present_chapter_id = true && this.isSetChapter_id();
      boolean that_present_chapter_id = true && that.isSetChapter_id();
      if (this_present_chapter_id || that_present_chapter_id) {
        if (!(this_present_chapter_id && that_present_chapter_id))
          return false;
        if (!this.chapter_id.equals(that.chapter_id))
          return false;
      }

      boolean this_present_series_id = true && this.isSetSeries_id();
      boolean that_present_series_id = true && that.isSetSeries_id();
      if (this_present_series_id || that_present_series_id) {
        if (!(this_present_series_id && that_present_series_id))
          return false;
        if (!this.series_id.equals(that.series_id))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(recored_chapter_view_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      recored_chapter_view_args typedOther = (recored_chapter_view_args)other;

      lastComparison = Boolean.valueOf(isSetChapter_id()).compareTo(typedOther.isSetChapter_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapter_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapter_id, typedOther.chapter_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries_id()).compareTo(typedOther.isSetSeries_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series_id, typedOther.series_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recored_chapter_view_args(");
      boolean first = true;

      sb.append("chapter_id:");
      if (this.chapter_id == null) {
        sb.append("null");
      } else {
        sb.append(this.chapter_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series_id:");
      if (this.series_id == null) {
        sb.append("null");
      } else {
        sb.append(this.series_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recored_chapter_view_argsStandardSchemeFactory implements SchemeFactory {
      public recored_chapter_view_argsStandardScheme getScheme() {
        return new recored_chapter_view_argsStandardScheme();
      }
    }

    private static class recored_chapter_view_argsStandardScheme extends StandardScheme<recored_chapter_view_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recored_chapter_view_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHAPTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapter_id = iprot.readString();
                struct.setChapter_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERIES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.series_id = iprot.readString();
                struct.setSeries_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recored_chapter_view_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chapter_id != null) {
          oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
          oprot.writeString(struct.chapter_id);
          oprot.writeFieldEnd();
        }
        if (struct.series_id != null) {
          oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
          oprot.writeString(struct.series_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recored_chapter_view_argsTupleSchemeFactory implements SchemeFactory {
      public recored_chapter_view_argsTupleScheme getScheme() {
        return new recored_chapter_view_argsTupleScheme();
      }
    }

    private static class recored_chapter_view_argsTupleScheme extends TupleScheme<recored_chapter_view_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recored_chapter_view_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChapter_id()) {
          optionals.set(0);
        }
        if (struct.isSetSeries_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetChapter_id()) {
          oprot.writeString(struct.chapter_id);
        }
        if (struct.isSetSeries_id()) {
          oprot.writeString(struct.series_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recored_chapter_view_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.chapter_id = iprot.readString();
          struct.setChapter_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.series_id = iprot.readString();
          struct.setSeries_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class recored_chapter_view_result implements org.apache.thrift.TBase<recored_chapter_view_result, recored_chapter_view_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recored_chapter_view_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recored_chapter_view_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recored_chapter_view_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recored_chapter_view_result.class, metaDataMap);
    }

    public recored_chapter_view_result() {
    }

    public recored_chapter_view_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recored_chapter_view_result(recored_chapter_view_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public recored_chapter_view_result deepCopy() {
      return new recored_chapter_view_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public recored_chapter_view_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recored_chapter_view_result)
        return this.equals((recored_chapter_view_result)that);
      return false;
    }

    public boolean equals(recored_chapter_view_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(recored_chapter_view_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      recored_chapter_view_result typedOther = (recored_chapter_view_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recored_chapter_view_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recored_chapter_view_resultStandardSchemeFactory implements SchemeFactory {
      public recored_chapter_view_resultStandardScheme getScheme() {
        return new recored_chapter_view_resultStandardScheme();
      }
    }

    private static class recored_chapter_view_resultStandardScheme extends StandardScheme<recored_chapter_view_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recored_chapter_view_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recored_chapter_view_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recored_chapter_view_resultTupleSchemeFactory implements SchemeFactory {
      public recored_chapter_view_resultTupleScheme getScheme() {
        return new recored_chapter_view_resultTupleScheme();
      }
    }

    private static class recored_chapter_view_resultTupleScheme extends TupleScheme<recored_chapter_view_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recored_chapter_view_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recored_chapter_view_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_feed_args implements org.apache.thrift.TBase<get_feed_args, get_feed_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feed_args");

    private static final org.apache.thrift.protocol.TField TITLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("titleType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("feedType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField GENRE_FIELD_DESC = new org.apache.thrift.protocol.TField("genre", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField S_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("s_user_id", org.apache.thrift.protocol.TType.STRING, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feed_argsTupleSchemeFactory());
    }

    public String titleType; // required
    public String feedType; // required
    public String filter; // required
    public int prev_cnt; // required
    public int count; // required
    public String user_id; // required
    public String genre; // required
    public String lang; // required
    public String s_user_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TITLE_TYPE((short)1, "titleType"),
      FEED_TYPE((short)2, "feedType"),
      FILTER((short)3, "filter"),
      PREV_CNT((short)4, "prev_cnt"),
      COUNT((short)5, "count"),
      USER_ID((short)6, "user_id"),
      GENRE((short)7, "genre"),
      LANG((short)8, "lang"),
      S_USER_ID((short)9, "s_user_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TITLE_TYPE
            return TITLE_TYPE;
          case 2: // FEED_TYPE
            return FEED_TYPE;
          case 3: // FILTER
            return FILTER;
          case 4: // PREV_CNT
            return PREV_CNT;
          case 5: // COUNT
            return COUNT;
          case 6: // USER_ID
            return USER_ID;
          case 7: // GENRE
            return GENRE;
          case 8: // LANG
            return LANG;
          case 9: // S_USER_ID
            return S_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PREV_CNT_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TITLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("titleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("feedType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENRE, new org.apache.thrift.meta_data.FieldMetaData("genre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("s_user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feed_args.class, metaDataMap);
    }

    public get_feed_args() {
    }

    public get_feed_args(
      String titleType,
      String feedType,
      String filter,
      int prev_cnt,
      int count,
      String user_id,
      String genre,
      String lang,
      String s_user_id)
    {
      this();
      this.titleType = titleType;
      this.feedType = feedType;
      this.filter = filter;
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.count = count;
      setCountIsSet(true);
      this.user_id = user_id;
      this.genre = genre;
      this.lang = lang;
      this.s_user_id = s_user_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feed_args(get_feed_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTitleType()) {
        this.titleType = other.titleType;
      }
      if (other.isSetFeedType()) {
        this.feedType = other.feedType;
      }
      if (other.isSetFilter()) {
        this.filter = other.filter;
      }
      this.prev_cnt = other.prev_cnt;
      this.count = other.count;
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      if (other.isSetGenre()) {
        this.genre = other.genre;
      }
      if (other.isSetLang()) {
        this.lang = other.lang;
      }
      if (other.isSetS_user_id()) {
        this.s_user_id = other.s_user_id;
      }
    }

    public get_feed_args deepCopy() {
      return new get_feed_args(this);
    }

    @Override
    public void clear() {
      this.titleType = null;
      this.feedType = null;
      this.filter = null;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      setCountIsSet(false);
      this.count = 0;
      this.user_id = null;
      this.genre = null;
      this.lang = null;
      this.s_user_id = null;
    }

    public String getTitleType() {
      return this.titleType;
    }

    public get_feed_args setTitleType(String titleType) {
      this.titleType = titleType;
      return this;
    }

    public void unsetTitleType() {
      this.titleType = null;
    }

    /** Returns true if field titleType is set (has been assigned a value) and false otherwise */
    public boolean isSetTitleType() {
      return this.titleType != null;
    }

    public void setTitleTypeIsSet(boolean value) {
      if (!value) {
        this.titleType = null;
      }
    }

    public String getFeedType() {
      return this.feedType;
    }

    public get_feed_args setFeedType(String feedType) {
      this.feedType = feedType;
      return this;
    }

    public void unsetFeedType() {
      this.feedType = null;
    }

    /** Returns true if field feedType is set (has been assigned a value) and false otherwise */
    public boolean isSetFeedType() {
      return this.feedType != null;
    }

    public void setFeedTypeIsSet(boolean value) {
      if (!value) {
        this.feedType = null;
      }
    }

    public String getFilter() {
      return this.filter;
    }

    public get_feed_args setFilter(String filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_feed_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public get_feed_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public String getUser_id() {
      return this.user_id;
    }

    public get_feed_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public String getGenre() {
      return this.genre;
    }

    public get_feed_args setGenre(String genre) {
      this.genre = genre;
      return this;
    }

    public void unsetGenre() {
      this.genre = null;
    }

    /** Returns true if field genre is set (has been assigned a value) and false otherwise */
    public boolean isSetGenre() {
      return this.genre != null;
    }

    public void setGenreIsSet(boolean value) {
      if (!value) {
        this.genre = null;
      }
    }

    public String getLang() {
      return this.lang;
    }

    public get_feed_args setLang(String lang) {
      this.lang = lang;
      return this;
    }

    public void unsetLang() {
      this.lang = null;
    }

    /** Returns true if field lang is set (has been assigned a value) and false otherwise */
    public boolean isSetLang() {
      return this.lang != null;
    }

    public void setLangIsSet(boolean value) {
      if (!value) {
        this.lang = null;
      }
    }

    public String getS_user_id() {
      return this.s_user_id;
    }

    public get_feed_args setS_user_id(String s_user_id) {
      this.s_user_id = s_user_id;
      return this;
    }

    public void unsetS_user_id() {
      this.s_user_id = null;
    }

    /** Returns true if field s_user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetS_user_id() {
      return this.s_user_id != null;
    }

    public void setS_user_idIsSet(boolean value) {
      if (!value) {
        this.s_user_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TITLE_TYPE:
        if (value == null) {
          unsetTitleType();
        } else {
          setTitleType((String)value);
        }
        break;

      case FEED_TYPE:
        if (value == null) {
          unsetFeedType();
        } else {
          setFeedType((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((String)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case GENRE:
        if (value == null) {
          unsetGenre();
        } else {
          setGenre((String)value);
        }
        break;

      case LANG:
        if (value == null) {
          unsetLang();
        } else {
          setLang((String)value);
        }
        break;

      case S_USER_ID:
        if (value == null) {
          unsetS_user_id();
        } else {
          setS_user_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TITLE_TYPE:
        return getTitleType();

      case FEED_TYPE:
        return getFeedType();

      case FILTER:
        return getFilter();

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case COUNT:
        return Integer.valueOf(getCount());

      case USER_ID:
        return getUser_id();

      case GENRE:
        return getGenre();

      case LANG:
        return getLang();

      case S_USER_ID:
        return getS_user_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TITLE_TYPE:
        return isSetTitleType();
      case FEED_TYPE:
        return isSetFeedType();
      case FILTER:
        return isSetFilter();
      case PREV_CNT:
        return isSetPrev_cnt();
      case COUNT:
        return isSetCount();
      case USER_ID:
        return isSetUser_id();
      case GENRE:
        return isSetGenre();
      case LANG:
        return isSetLang();
      case S_USER_ID:
        return isSetS_user_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feed_args)
        return this.equals((get_feed_args)that);
      return false;
    }

    public boolean equals(get_feed_args that) {
      if (that == null)
        return false;

      boolean this_present_titleType = true && this.isSetTitleType();
      boolean that_present_titleType = true && that.isSetTitleType();
      if (this_present_titleType || that_present_titleType) {
        if (!(this_present_titleType && that_present_titleType))
          return false;
        if (!this.titleType.equals(that.titleType))
          return false;
      }

      boolean this_present_feedType = true && this.isSetFeedType();
      boolean that_present_feedType = true && that.isSetFeedType();
      if (this_present_feedType || that_present_feedType) {
        if (!(this_present_feedType && that_present_feedType))
          return false;
        if (!this.feedType.equals(that.feedType))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_genre = true && this.isSetGenre();
      boolean that_present_genre = true && that.isSetGenre();
      if (this_present_genre || that_present_genre) {
        if (!(this_present_genre && that_present_genre))
          return false;
        if (!this.genre.equals(that.genre))
          return false;
      }

      boolean this_present_lang = true && this.isSetLang();
      boolean that_present_lang = true && that.isSetLang();
      if (this_present_lang || that_present_lang) {
        if (!(this_present_lang && that_present_lang))
          return false;
        if (!this.lang.equals(that.lang))
          return false;
      }

      boolean this_present_s_user_id = true && this.isSetS_user_id();
      boolean that_present_s_user_id = true && that.isSetS_user_id();
      if (this_present_s_user_id || that_present_s_user_id) {
        if (!(this_present_s_user_id && that_present_s_user_id))
          return false;
        if (!this.s_user_id.equals(that.s_user_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_feed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_feed_args typedOther = (get_feed_args)other;

      lastComparison = Boolean.valueOf(isSetTitleType()).compareTo(typedOther.isSetTitleType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitleType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleType, typedOther.titleType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeedType()).compareTo(typedOther.isSetFeedType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeedType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedType, typedOther.feedType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenre()).compareTo(typedOther.isSetGenre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genre, typedOther.genre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLang()).compareTo(typedOther.isSetLang());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLang()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, typedOther.lang);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS_user_id()).compareTo(typedOther.isSetS_user_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS_user_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_user_id, typedOther.s_user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feed_args(");
      boolean first = true;

      sb.append("titleType:");
      if (this.titleType == null) {
        sb.append("null");
      } else {
        sb.append(this.titleType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feedType:");
      if (this.feedType == null) {
        sb.append("null");
      } else {
        sb.append(this.feedType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genre:");
      if (this.genre == null) {
        sb.append("null");
      } else {
        sb.append(this.genre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s_user_id:");
      if (this.s_user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.s_user_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feed_argsStandardSchemeFactory implements SchemeFactory {
      public get_feed_argsStandardScheme getScheme() {
        return new get_feed_argsStandardScheme();
      }
    }

    private static class get_feed_argsStandardScheme extends StandardScheme<get_feed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TITLE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.titleType = iprot.readString();
                struct.setTitleTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEED_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feedType = iprot.readString();
                struct.setFeedTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filter = iprot.readString();
                struct.setFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // GENRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.genre = iprot.readString();
                struct.setGenreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LANG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lang = iprot.readString();
                struct.setLangIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // S_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s_user_id = iprot.readString();
                struct.setS_user_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.titleType != null) {
          oprot.writeFieldBegin(TITLE_TYPE_FIELD_DESC);
          oprot.writeString(struct.titleType);
          oprot.writeFieldEnd();
        }
        if (struct.feedType != null) {
          oprot.writeFieldBegin(FEED_TYPE_FIELD_DESC);
          oprot.writeString(struct.feedType);
          oprot.writeFieldEnd();
        }
        if (struct.filter != null) {
          oprot.writeFieldBegin(FILTER_FIELD_DESC);
          oprot.writeString(struct.filter);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        if (struct.genre != null) {
          oprot.writeFieldBegin(GENRE_FIELD_DESC);
          oprot.writeString(struct.genre);
          oprot.writeFieldEnd();
        }
        if (struct.lang != null) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeString(struct.lang);
          oprot.writeFieldEnd();
        }
        if (struct.s_user_id != null) {
          oprot.writeFieldBegin(S_USER_ID_FIELD_DESC);
          oprot.writeString(struct.s_user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feed_argsTupleSchemeFactory implements SchemeFactory {
      public get_feed_argsTupleScheme getScheme() {
        return new get_feed_argsTupleScheme();
      }
    }

    private static class get_feed_argsTupleScheme extends TupleScheme<get_feed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTitleType()) {
          optionals.set(0);
        }
        if (struct.isSetFeedType()) {
          optionals.set(1);
        }
        if (struct.isSetFilter()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        if (struct.isSetCount()) {
          optionals.set(4);
        }
        if (struct.isSetUser_id()) {
          optionals.set(5);
        }
        if (struct.isSetGenre()) {
          optionals.set(6);
        }
        if (struct.isSetLang()) {
          optionals.set(7);
        }
        if (struct.isSetS_user_id()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetTitleType()) {
          oprot.writeString(struct.titleType);
        }
        if (struct.isSetFeedType()) {
          oprot.writeString(struct.feedType);
        }
        if (struct.isSetFilter()) {
          oprot.writeString(struct.filter);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetGenre()) {
          oprot.writeString(struct.genre);
        }
        if (struct.isSetLang()) {
          oprot.writeString(struct.lang);
        }
        if (struct.isSetS_user_id()) {
          oprot.writeString(struct.s_user_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.titleType = iprot.readString();
          struct.setTitleTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feedType = iprot.readString();
          struct.setFeedTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.filter = iprot.readString();
          struct.setFilterIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(4)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(5)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(6)) {
          struct.genre = iprot.readString();
          struct.setGenreIsSet(true);
        }
        if (incoming.get(7)) {
          struct.lang = iprot.readString();
          struct.setLangIsSet(true);
        }
        if (incoming.get(8)) {
          struct.s_user_id = iprot.readString();
          struct.setS_user_idIsSet(true);
        }
      }
    }

  }

  public static class get_feed_result implements org.apache.thrift.TBase<get_feed_result, get_feed_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feed_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feed_result.class, metaDataMap);
    }

    public get_feed_result() {
    }

    public get_feed_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feed_result(get_feed_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_feed_result deepCopy() {
      return new get_feed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_feed_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feed_result)
        return this.equals((get_feed_result)that);
      return false;
    }

    public boolean equals(get_feed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_feed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_feed_result typedOther = (get_feed_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feed_resultStandardSchemeFactory implements SchemeFactory {
      public get_feed_resultStandardScheme getScheme() {
        return new get_feed_resultStandardScheme();
      }
    }

    private static class get_feed_resultStandardScheme extends StandardScheme<get_feed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feed_resultTupleSchemeFactory implements SchemeFactory {
      public get_feed_resultTupleScheme getScheme() {
        return new get_feed_resultTupleScheme();
      }
    }

    private static class get_feed_resultTupleScheme extends TupleScheme<get_feed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_or_edit_comment_args implements org.apache.thrift.TBase<create_or_edit_comment_args, create_or_edit_comment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_or_edit_comment_args");

    private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapter_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comment_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARENT_CMNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_cmnt_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_or_edit_comment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_or_edit_comment_argsTupleSchemeFactory());
    }

    public String chapter_id; // required
    public String comment_id; // required
    public String content; // required
    public String parent_cmnt_id; // required
    public String user_id; // required
    public int time; // required
    public int is_edit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAPTER_ID((short)1, "chapter_id"),
      COMMENT_ID((short)2, "comment_id"),
      CONTENT((short)3, "content"),
      PARENT_CMNT_ID((short)4, "parent_cmnt_id"),
      USER_ID((short)5, "user_id"),
      TIME((short)6, "time"),
      IS_EDIT((short)7, "is_edit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHAPTER_ID
            return CHAPTER_ID;
          case 2: // COMMENT_ID
            return COMMENT_ID;
          case 3: // CONTENT
            return CONTENT;
          case 4: // PARENT_CMNT_ID
            return PARENT_CMNT_ID;
          case 5: // USER_ID
            return USER_ID;
          case 6: // TIME
            return TIME;
          case 7: // IS_EDIT
            return IS_EDIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private static final int __IS_EDIT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapter_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("comment_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_CMNT_ID, new org.apache.thrift.meta_data.FieldMetaData("parent_cmnt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_or_edit_comment_args.class, metaDataMap);
    }

    public create_or_edit_comment_args() {
    }

    public create_or_edit_comment_args(
      String chapter_id,
      String comment_id,
      String content,
      String parent_cmnt_id,
      String user_id,
      int time,
      int is_edit)
    {
      this();
      this.chapter_id = chapter_id;
      this.comment_id = comment_id;
      this.content = content;
      this.parent_cmnt_id = parent_cmnt_id;
      this.user_id = user_id;
      this.time = time;
      setTimeIsSet(true);
      this.is_edit = is_edit;
      setIs_editIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_or_edit_comment_args(create_or_edit_comment_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetChapter_id()) {
        this.chapter_id = other.chapter_id;
      }
      if (other.isSetComment_id()) {
        this.comment_id = other.comment_id;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetParent_cmnt_id()) {
        this.parent_cmnt_id = other.parent_cmnt_id;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      this.time = other.time;
      this.is_edit = other.is_edit;
    }

    public create_or_edit_comment_args deepCopy() {
      return new create_or_edit_comment_args(this);
    }

    @Override
    public void clear() {
      this.chapter_id = null;
      this.comment_id = null;
      this.content = null;
      this.parent_cmnt_id = null;
      this.user_id = null;
      setTimeIsSet(false);
      this.time = 0;
      setIs_editIsSet(false);
      this.is_edit = 0;
    }

    public String getChapter_id() {
      return this.chapter_id;
    }

    public create_or_edit_comment_args setChapter_id(String chapter_id) {
      this.chapter_id = chapter_id;
      return this;
    }

    public void unsetChapter_id() {
      this.chapter_id = null;
    }

    /** Returns true if field chapter_id is set (has been assigned a value) and false otherwise */
    public boolean isSetChapter_id() {
      return this.chapter_id != null;
    }

    public void setChapter_idIsSet(boolean value) {
      if (!value) {
        this.chapter_id = null;
      }
    }

    public String getComment_id() {
      return this.comment_id;
    }

    public create_or_edit_comment_args setComment_id(String comment_id) {
      this.comment_id = comment_id;
      return this;
    }

    public void unsetComment_id() {
      this.comment_id = null;
    }

    /** Returns true if field comment_id is set (has been assigned a value) and false otherwise */
    public boolean isSetComment_id() {
      return this.comment_id != null;
    }

    public void setComment_idIsSet(boolean value) {
      if (!value) {
        this.comment_id = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public create_or_edit_comment_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getParent_cmnt_id() {
      return this.parent_cmnt_id;
    }

    public create_or_edit_comment_args setParent_cmnt_id(String parent_cmnt_id) {
      this.parent_cmnt_id = parent_cmnt_id;
      return this;
    }

    public void unsetParent_cmnt_id() {
      this.parent_cmnt_id = null;
    }

    /** Returns true if field parent_cmnt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetParent_cmnt_id() {
      return this.parent_cmnt_id != null;
    }

    public void setParent_cmnt_idIsSet(boolean value) {
      if (!value) {
        this.parent_cmnt_id = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public create_or_edit_comment_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public create_or_edit_comment_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_or_edit_comment_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAPTER_ID:
        if (value == null) {
          unsetChapter_id();
        } else {
          setChapter_id((String)value);
        }
        break;

      case COMMENT_ID:
        if (value == null) {
          unsetComment_id();
        } else {
          setComment_id((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case PARENT_CMNT_ID:
        if (value == null) {
          unsetParent_cmnt_id();
        } else {
          setParent_cmnt_id((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAPTER_ID:
        return getChapter_id();

      case COMMENT_ID:
        return getComment_id();

      case CONTENT:
        return getContent();

      case PARENT_CMNT_ID:
        return getParent_cmnt_id();

      case USER_ID:
        return getUser_id();

      case TIME:
        return Integer.valueOf(getTime());

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAPTER_ID:
        return isSetChapter_id();
      case COMMENT_ID:
        return isSetComment_id();
      case CONTENT:
        return isSetContent();
      case PARENT_CMNT_ID:
        return isSetParent_cmnt_id();
      case USER_ID:
        return isSetUser_id();
      case TIME:
        return isSetTime();
      case IS_EDIT:
        return isSetIs_edit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_or_edit_comment_args)
        return this.equals((create_or_edit_comment_args)that);
      return false;
    }

    public boolean equals(create_or_edit_comment_args that) {
      if (that == null)
        return false;

      boolean this_present_chapter_id = true && this.isSetChapter_id();
      boolean that_present_chapter_id = true && that.isSetChapter_id();
      if (this_present_chapter_id || that_present_chapter_id) {
        if (!(this_present_chapter_id && that_present_chapter_id))
          return false;
        if (!this.chapter_id.equals(that.chapter_id))
          return false;
      }

      boolean this_present_comment_id = true && this.isSetComment_id();
      boolean that_present_comment_id = true && that.isSetComment_id();
      if (this_present_comment_id || that_present_comment_id) {
        if (!(this_present_comment_id && that_present_comment_id))
          return false;
        if (!this.comment_id.equals(that.comment_id))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_parent_cmnt_id = true && this.isSetParent_cmnt_id();
      boolean that_present_parent_cmnt_id = true && that.isSetParent_cmnt_id();
      if (this_present_parent_cmnt_id || that_present_parent_cmnt_id) {
        if (!(this_present_parent_cmnt_id && that_present_parent_cmnt_id))
          return false;
        if (!this.parent_cmnt_id.equals(that.parent_cmnt_id))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_or_edit_comment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_or_edit_comment_args typedOther = (create_or_edit_comment_args)other;

      lastComparison = Boolean.valueOf(isSetChapter_id()).compareTo(typedOther.isSetChapter_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapter_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapter_id, typedOther.chapter_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetComment_id()).compareTo(typedOther.isSetComment_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComment_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment_id, typedOther.comment_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParent_cmnt_id()).compareTo(typedOther.isSetParent_cmnt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParent_cmnt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_cmnt_id, typedOther.parent_cmnt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_or_edit_comment_args(");
      boolean first = true;

      sb.append("chapter_id:");
      if (this.chapter_id == null) {
        sb.append("null");
      } else {
        sb.append(this.chapter_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("comment_id:");
      if (this.comment_id == null) {
        sb.append("null");
      } else {
        sb.append(this.comment_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parent_cmnt_id:");
      if (this.parent_cmnt_id == null) {
        sb.append("null");
      } else {
        sb.append(this.parent_cmnt_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_or_edit_comment_argsStandardSchemeFactory implements SchemeFactory {
      public create_or_edit_comment_argsStandardScheme getScheme() {
        return new create_or_edit_comment_argsStandardScheme();
      }
    }

    private static class create_or_edit_comment_argsStandardScheme extends StandardScheme<create_or_edit_comment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_or_edit_comment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHAPTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapter_id = iprot.readString();
                struct.setChapter_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.comment_id = iprot.readString();
                struct.setComment_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARENT_CMNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parent_cmnt_id = iprot.readString();
                struct.setParent_cmnt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_or_edit_comment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chapter_id != null) {
          oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
          oprot.writeString(struct.chapter_id);
          oprot.writeFieldEnd();
        }
        if (struct.comment_id != null) {
          oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
          oprot.writeString(struct.comment_id);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.parent_cmnt_id != null) {
          oprot.writeFieldBegin(PARENT_CMNT_ID_FIELD_DESC);
          oprot.writeString(struct.parent_cmnt_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_or_edit_comment_argsTupleSchemeFactory implements SchemeFactory {
      public create_or_edit_comment_argsTupleScheme getScheme() {
        return new create_or_edit_comment_argsTupleScheme();
      }
    }

    private static class create_or_edit_comment_argsTupleScheme extends TupleScheme<create_or_edit_comment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_or_edit_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChapter_id()) {
          optionals.set(0);
        }
        if (struct.isSetComment_id()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetParent_cmnt_id()) {
          optionals.set(3);
        }
        if (struct.isSetUser_id()) {
          optionals.set(4);
        }
        if (struct.isSetTime()) {
          optionals.set(5);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetChapter_id()) {
          oprot.writeString(struct.chapter_id);
        }
        if (struct.isSetComment_id()) {
          oprot.writeString(struct.comment_id);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetParent_cmnt_id()) {
          oprot.writeString(struct.parent_cmnt_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_or_edit_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.chapter_id = iprot.readString();
          struct.setChapter_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.comment_id = iprot.readString();
          struct.setComment_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.parent_cmnt_id = iprot.readString();
          struct.setParent_cmnt_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(5)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
      }
    }

  }

  public static class create_or_edit_comment_result implements org.apache.thrift.TBase<create_or_edit_comment_result, create_or_edit_comment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_or_edit_comment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_or_edit_comment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_or_edit_comment_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_or_edit_comment_result.class, metaDataMap);
    }

    public create_or_edit_comment_result() {
    }

    public create_or_edit_comment_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_or_edit_comment_result(create_or_edit_comment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_or_edit_comment_result deepCopy() {
      return new create_or_edit_comment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_or_edit_comment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_or_edit_comment_result)
        return this.equals((create_or_edit_comment_result)that);
      return false;
    }

    public boolean equals(create_or_edit_comment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_or_edit_comment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_or_edit_comment_result typedOther = (create_or_edit_comment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_or_edit_comment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_or_edit_comment_resultStandardSchemeFactory implements SchemeFactory {
      public create_or_edit_comment_resultStandardScheme getScheme() {
        return new create_or_edit_comment_resultStandardScheme();
      }
    }

    private static class create_or_edit_comment_resultStandardScheme extends StandardScheme<create_or_edit_comment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_or_edit_comment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_or_edit_comment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_or_edit_comment_resultTupleSchemeFactory implements SchemeFactory {
      public create_or_edit_comment_resultTupleScheme getScheme() {
        return new create_or_edit_comment_resultTupleScheme();
      }
    }

    private static class create_or_edit_comment_resultTupleScheme extends TupleScheme<create_or_edit_comment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_or_edit_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_or_edit_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_comment_args implements org.apache.thrift.TBase<delete_comment_args, delete_comment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_comment_args");

    private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comment_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_comment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_comment_argsTupleSchemeFactory());
    }

    public String comment_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMENT_ID((short)1, "comment_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMENT_ID
            return COMMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("comment_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_comment_args.class, metaDataMap);
    }

    public delete_comment_args() {
    }

    public delete_comment_args(
      String comment_id)
    {
      this();
      this.comment_id = comment_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_comment_args(delete_comment_args other) {
      if (other.isSetComment_id()) {
        this.comment_id = other.comment_id;
      }
    }

    public delete_comment_args deepCopy() {
      return new delete_comment_args(this);
    }

    @Override
    public void clear() {
      this.comment_id = null;
    }

    public String getComment_id() {
      return this.comment_id;
    }

    public delete_comment_args setComment_id(String comment_id) {
      this.comment_id = comment_id;
      return this;
    }

    public void unsetComment_id() {
      this.comment_id = null;
    }

    /** Returns true if field comment_id is set (has been assigned a value) and false otherwise */
    public boolean isSetComment_id() {
      return this.comment_id != null;
    }

    public void setComment_idIsSet(boolean value) {
      if (!value) {
        this.comment_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMENT_ID:
        if (value == null) {
          unsetComment_id();
        } else {
          setComment_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMENT_ID:
        return getComment_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMENT_ID:
        return isSetComment_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_comment_args)
        return this.equals((delete_comment_args)that);
      return false;
    }

    public boolean equals(delete_comment_args that) {
      if (that == null)
        return false;

      boolean this_present_comment_id = true && this.isSetComment_id();
      boolean that_present_comment_id = true && that.isSetComment_id();
      if (this_present_comment_id || that_present_comment_id) {
        if (!(this_present_comment_id && that_present_comment_id))
          return false;
        if (!this.comment_id.equals(that.comment_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_comment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_comment_args typedOther = (delete_comment_args)other;

      lastComparison = Boolean.valueOf(isSetComment_id()).compareTo(typedOther.isSetComment_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComment_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment_id, typedOther.comment_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_comment_args(");
      boolean first = true;

      sb.append("comment_id:");
      if (this.comment_id == null) {
        sb.append("null");
      } else {
        sb.append(this.comment_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_comment_argsStandardSchemeFactory implements SchemeFactory {
      public delete_comment_argsStandardScheme getScheme() {
        return new delete_comment_argsStandardScheme();
      }
    }

    private static class delete_comment_argsStandardScheme extends StandardScheme<delete_comment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_comment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.comment_id = iprot.readString();
                struct.setComment_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_comment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.comment_id != null) {
          oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
          oprot.writeString(struct.comment_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_comment_argsTupleSchemeFactory implements SchemeFactory {
      public delete_comment_argsTupleScheme getScheme() {
        return new delete_comment_argsTupleScheme();
      }
    }

    private static class delete_comment_argsTupleScheme extends TupleScheme<delete_comment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetComment_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetComment_id()) {
          oprot.writeString(struct.comment_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.comment_id = iprot.readString();
          struct.setComment_idIsSet(true);
        }
      }
    }

  }

  public static class delete_comment_result implements org.apache.thrift.TBase<delete_comment_result, delete_comment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_comment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_comment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_comment_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_comment_result.class, metaDataMap);
    }

    public delete_comment_result() {
    }

    public delete_comment_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_comment_result(delete_comment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delete_comment_result deepCopy() {
      return new delete_comment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delete_comment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_comment_result)
        return this.equals((delete_comment_result)that);
      return false;
    }

    public boolean equals(delete_comment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_comment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_comment_result typedOther = (delete_comment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_comment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_comment_resultStandardSchemeFactory implements SchemeFactory {
      public delete_comment_resultStandardScheme getScheme() {
        return new delete_comment_resultStandardScheme();
      }
    }

    private static class delete_comment_resultStandardScheme extends StandardScheme<delete_comment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_comment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_comment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_comment_resultTupleSchemeFactory implements SchemeFactory {
      public delete_comment_resultTupleScheme getScheme() {
        return new delete_comment_resultTupleScheme();
      }
    }

    private static class delete_comment_resultTupleScheme extends TupleScheme<delete_comment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_comments_args implements org.apache.thrift.TBase<get_comments_args, get_comments_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_comments_args");

    private static final org.apache.thrift.protocol.TField CHAPTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapter_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_comments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_comments_argsTupleSchemeFactory());
    }

    public String chapter_id; // required
    public int prev_cnt; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAPTER_ID((short)1, "chapter_id"),
      PREV_CNT((short)2, "prev_cnt"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHAPTER_ID
            return CHAPTER_ID;
          case 2: // PREV_CNT
            return PREV_CNT;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PREV_CNT_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAPTER_ID, new org.apache.thrift.meta_data.FieldMetaData("chapter_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_comments_args.class, metaDataMap);
    }

    public get_comments_args() {
    }

    public get_comments_args(
      String chapter_id,
      int prev_cnt,
      int count)
    {
      this();
      this.chapter_id = chapter_id;
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_comments_args(get_comments_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetChapter_id()) {
        this.chapter_id = other.chapter_id;
      }
      this.prev_cnt = other.prev_cnt;
      this.count = other.count;
    }

    public get_comments_args deepCopy() {
      return new get_comments_args(this);
    }

    @Override
    public void clear() {
      this.chapter_id = null;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public String getChapter_id() {
      return this.chapter_id;
    }

    public get_comments_args setChapter_id(String chapter_id) {
      this.chapter_id = chapter_id;
      return this;
    }

    public void unsetChapter_id() {
      this.chapter_id = null;
    }

    /** Returns true if field chapter_id is set (has been assigned a value) and false otherwise */
    public boolean isSetChapter_id() {
      return this.chapter_id != null;
    }

    public void setChapter_idIsSet(boolean value) {
      if (!value) {
        this.chapter_id = null;
      }
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_comments_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public get_comments_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAPTER_ID:
        if (value == null) {
          unsetChapter_id();
        } else {
          setChapter_id((String)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAPTER_ID:
        return getChapter_id();

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAPTER_ID:
        return isSetChapter_id();
      case PREV_CNT:
        return isSetPrev_cnt();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_comments_args)
        return this.equals((get_comments_args)that);
      return false;
    }

    public boolean equals(get_comments_args that) {
      if (that == null)
        return false;

      boolean this_present_chapter_id = true && this.isSetChapter_id();
      boolean that_present_chapter_id = true && that.isSetChapter_id();
      if (this_present_chapter_id || that_present_chapter_id) {
        if (!(this_present_chapter_id && that_present_chapter_id))
          return false;
        if (!this.chapter_id.equals(that.chapter_id))
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_comments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_comments_args typedOther = (get_comments_args)other;

      lastComparison = Boolean.valueOf(isSetChapter_id()).compareTo(typedOther.isSetChapter_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapter_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapter_id, typedOther.chapter_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_comments_args(");
      boolean first = true;

      sb.append("chapter_id:");
      if (this.chapter_id == null) {
        sb.append("null");
      } else {
        sb.append(this.chapter_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_comments_argsStandardSchemeFactory implements SchemeFactory {
      public get_comments_argsStandardScheme getScheme() {
        return new get_comments_argsStandardScheme();
      }
    }

    private static class get_comments_argsStandardScheme extends StandardScheme<get_comments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_comments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHAPTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapter_id = iprot.readString();
                struct.setChapter_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_comments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chapter_id != null) {
          oprot.writeFieldBegin(CHAPTER_ID_FIELD_DESC);
          oprot.writeString(struct.chapter_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_comments_argsTupleSchemeFactory implements SchemeFactory {
      public get_comments_argsTupleScheme getScheme() {
        return new get_comments_argsTupleScheme();
      }
    }

    private static class get_comments_argsTupleScheme extends TupleScheme<get_comments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_comments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChapter_id()) {
          optionals.set(0);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetChapter_id()) {
          oprot.writeString(struct.chapter_id);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_comments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.chapter_id = iprot.readString();
          struct.setChapter_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class get_comments_result implements org.apache.thrift.TBase<get_comments_result, get_comments_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_comments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_comments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_comments_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_comments_result.class, metaDataMap);
    }

    public get_comments_result() {
    }

    public get_comments_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_comments_result(get_comments_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_comments_result deepCopy() {
      return new get_comments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_comments_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_comments_result)
        return this.equals((get_comments_result)that);
      return false;
    }

    public boolean equals(get_comments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_comments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_comments_result typedOther = (get_comments_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_comments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_comments_resultStandardSchemeFactory implements SchemeFactory {
      public get_comments_resultStandardScheme getScheme() {
        return new get_comments_resultStandardScheme();
      }
    }

    private static class get_comments_resultStandardScheme extends StandardScheme<get_comments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_comments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_comments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_comments_resultTupleSchemeFactory implements SchemeFactory {
      public get_comments_resultTupleScheme getScheme() {
        return new get_comments_resultTupleScheme();
      }
    }

    private static class get_comments_resultTupleScheme extends TupleScheme<get_comments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_comments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_comments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_all_items_args implements org.apache.thrift.TBase<get_all_items_args, get_all_items_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_items_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_items_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_items_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public int prev_cnt; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      PREV_CNT((short)2, "prev_cnt"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // PREV_CNT
            return PREV_CNT;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PREV_CNT_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_items_args.class, metaDataMap);
    }

    public get_all_items_args() {
    }

    public get_all_items_args(
      String item_type,
      int prev_cnt,
      int count)
    {
      this();
      this.item_type = item_type;
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_items_args(get_all_items_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      this.prev_cnt = other.prev_cnt;
      this.count = other.count;
    }

    public get_all_items_args deepCopy() {
      return new get_all_items_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public get_all_items_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_all_items_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public get_all_items_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case PREV_CNT:
        return isSetPrev_cnt();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_items_args)
        return this.equals((get_all_items_args)that);
      return false;
    }

    public boolean equals(get_all_items_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_items_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_items_args typedOther = (get_all_items_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_items_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_items_argsStandardSchemeFactory implements SchemeFactory {
      public get_all_items_argsStandardScheme getScheme() {
        return new get_all_items_argsStandardScheme();
      }
    }

    private static class get_all_items_argsStandardScheme extends StandardScheme<get_all_items_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_items_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_items_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_items_argsTupleSchemeFactory implements SchemeFactory {
      public get_all_items_argsTupleScheme getScheme() {
        return new get_all_items_argsTupleScheme();
      }
    }

    private static class get_all_items_argsTupleScheme extends TupleScheme<get_all_items_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_items_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_items_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class get_all_items_result implements org.apache.thrift.TBase<get_all_items_result, get_all_items_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_items_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_items_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_items_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_items_result.class, metaDataMap);
    }

    public get_all_items_result() {
    }

    public get_all_items_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_items_result(get_all_items_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_all_items_result deepCopy() {
      return new get_all_items_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_all_items_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_items_result)
        return this.equals((get_all_items_result)that);
      return false;
    }

    public boolean equals(get_all_items_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_items_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_items_result typedOther = (get_all_items_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_items_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_items_resultStandardSchemeFactory implements SchemeFactory {
      public get_all_items_resultStandardScheme getScheme() {
        return new get_all_items_resultStandardScheme();
      }
    }

    private static class get_all_items_resultStandardScheme extends StandardScheme<get_all_items_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_items_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_items_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_items_resultTupleSchemeFactory implements SchemeFactory {
      public get_all_items_resultTupleScheme getScheme() {
        return new get_all_items_resultTupleScheme();
      }
    }

    private static class get_all_items_resultTupleScheme extends TupleScheme<get_all_items_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_items_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_items_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_item_details_args implements org.apache.thrift.TBase<get_item_details_args, get_item_details_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_item_details_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_item_details_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_item_details_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_item_details_args.class, metaDataMap);
    }

    public get_item_details_args() {
    }

    public get_item_details_args(
      String item_type,
      String item_id)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_item_details_args(get_item_details_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
    }

    public get_item_details_args deepCopy() {
      return new get_item_details_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public get_item_details_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public get_item_details_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_item_details_args)
        return this.equals((get_item_details_args)that);
      return false;
    }

    public boolean equals(get_item_details_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_item_details_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_item_details_args typedOther = (get_item_details_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_item_details_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_item_details_argsStandardSchemeFactory implements SchemeFactory {
      public get_item_details_argsStandardScheme getScheme() {
        return new get_item_details_argsStandardScheme();
      }
    }

    private static class get_item_details_argsStandardScheme extends StandardScheme<get_item_details_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_item_details_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_item_details_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_item_details_argsTupleSchemeFactory implements SchemeFactory {
      public get_item_details_argsTupleScheme getScheme() {
        return new get_item_details_argsTupleScheme();
      }
    }

    private static class get_item_details_argsTupleScheme extends TupleScheme<get_item_details_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_item_details_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_item_details_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
      }
    }

  }

  public static class get_item_details_result implements org.apache.thrift.TBase<get_item_details_result, get_item_details_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_item_details_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_item_details_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_item_details_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_item_details_result.class, metaDataMap);
    }

    public get_item_details_result() {
    }

    public get_item_details_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_item_details_result(get_item_details_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_item_details_result deepCopy() {
      return new get_item_details_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_item_details_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_item_details_result)
        return this.equals((get_item_details_result)that);
      return false;
    }

    public boolean equals(get_item_details_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_item_details_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_item_details_result typedOther = (get_item_details_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_item_details_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_item_details_resultStandardSchemeFactory implements SchemeFactory {
      public get_item_details_resultStandardScheme getScheme() {
        return new get_item_details_resultStandardScheme();
      }
    }

    private static class get_item_details_resultStandardScheme extends StandardScheme<get_item_details_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_item_details_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_item_details_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_item_details_resultTupleSchemeFactory implements SchemeFactory {
      public get_item_details_resultTupleScheme getScheme() {
        return new get_item_details_resultTupleScheme();
      }
    }

    private static class get_item_details_resultTupleScheme extends TupleScheme<get_item_details_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_item_details_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_item_details_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_subscriptions_for_user_args implements org.apache.thrift.TBase<get_subscriptions_for_user_args, get_subscriptions_for_user_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_subscriptions_for_user_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_subscriptions_for_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_subscriptions_for_user_argsTupleSchemeFactory());
    }

    public String user_id; // required
    public int prev_cnt; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "user_id"),
      PREV_CNT((short)2, "prev_cnt"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PREV_CNT
            return PREV_CNT;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PREV_CNT_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_subscriptions_for_user_args.class, metaDataMap);
    }

    public get_subscriptions_for_user_args() {
    }

    public get_subscriptions_for_user_args(
      String user_id,
      int prev_cnt,
      int count)
    {
      this();
      this.user_id = user_id;
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_subscriptions_for_user_args(get_subscriptions_for_user_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      this.prev_cnt = other.prev_cnt;
      this.count = other.count;
    }

    public get_subscriptions_for_user_args deepCopy() {
      return new get_subscriptions_for_user_args(this);
    }

    @Override
    public void clear() {
      this.user_id = null;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public String getUser_id() {
      return this.user_id;
    }

    public get_subscriptions_for_user_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_subscriptions_for_user_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public get_subscriptions_for_user_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUser_id();

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUser_id();
      case PREV_CNT:
        return isSetPrev_cnt();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_subscriptions_for_user_args)
        return this.equals((get_subscriptions_for_user_args)that);
      return false;
    }

    public boolean equals(get_subscriptions_for_user_args that) {
      if (that == null)
        return false;

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_subscriptions_for_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_subscriptions_for_user_args typedOther = (get_subscriptions_for_user_args)other;

      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_subscriptions_for_user_args(");
      boolean first = true;

      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_subscriptions_for_user_argsStandardSchemeFactory implements SchemeFactory {
      public get_subscriptions_for_user_argsStandardScheme getScheme() {
        return new get_subscriptions_for_user_argsStandardScheme();
      }
    }

    private static class get_subscriptions_for_user_argsStandardScheme extends StandardScheme<get_subscriptions_for_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_subscriptions_for_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_subscriptions_for_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_subscriptions_for_user_argsTupleSchemeFactory implements SchemeFactory {
      public get_subscriptions_for_user_argsTupleScheme getScheme() {
        return new get_subscriptions_for_user_argsTupleScheme();
      }
    }

    private static class get_subscriptions_for_user_argsTupleScheme extends TupleScheme<get_subscriptions_for_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_subscriptions_for_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_id()) {
          optionals.set(0);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_subscriptions_for_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class get_subscriptions_for_user_result implements org.apache.thrift.TBase<get_subscriptions_for_user_result, get_subscriptions_for_user_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_subscriptions_for_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_subscriptions_for_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_subscriptions_for_user_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_subscriptions_for_user_result.class, metaDataMap);
    }

    public get_subscriptions_for_user_result() {
    }

    public get_subscriptions_for_user_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_subscriptions_for_user_result(get_subscriptions_for_user_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_subscriptions_for_user_result deepCopy() {
      return new get_subscriptions_for_user_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_subscriptions_for_user_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_subscriptions_for_user_result)
        return this.equals((get_subscriptions_for_user_result)that);
      return false;
    }

    public boolean equals(get_subscriptions_for_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_subscriptions_for_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_subscriptions_for_user_result typedOther = (get_subscriptions_for_user_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_subscriptions_for_user_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_subscriptions_for_user_resultStandardSchemeFactory implements SchemeFactory {
      public get_subscriptions_for_user_resultStandardScheme getScheme() {
        return new get_subscriptions_for_user_resultStandardScheme();
      }
    }

    private static class get_subscriptions_for_user_resultStandardScheme extends StandardScheme<get_subscriptions_for_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_subscriptions_for_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_subscriptions_for_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_subscriptions_for_user_resultTupleSchemeFactory implements SchemeFactory {
      public get_subscriptions_for_user_resultTupleScheme getScheme() {
        return new get_subscriptions_for_user_resultTupleScheme();
      }
    }

    private static class get_subscriptions_for_user_resultTupleScheme extends TupleScheme<get_subscriptions_for_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_subscriptions_for_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_subscriptions_for_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_top_authors_args implements org.apache.thrift.TBase<get_top_authors_args, get_top_authors_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_top_authors_args");

    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_top_authors_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_top_authors_argsTupleSchemeFactory());
    }

    public int prev_cnt; // required
    public int count; // required
    public String user_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREV_CNT((short)1, "prev_cnt"),
      COUNT((short)2, "count"),
      USER_ID((short)3, "user_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREV_CNT
            return PREV_CNT;
          case 2: // COUNT
            return COUNT;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PREV_CNT_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_top_authors_args.class, metaDataMap);
    }

    public get_top_authors_args() {
    }

    public get_top_authors_args(
      int prev_cnt,
      int count,
      String user_id)
    {
      this();
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.count = count;
      setCountIsSet(true);
      this.user_id = user_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_top_authors_args(get_top_authors_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.prev_cnt = other.prev_cnt;
      this.count = other.count;
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
    }

    public get_top_authors_args deepCopy() {
      return new get_top_authors_args(this);
    }

    @Override
    public void clear() {
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      setCountIsSet(false);
      this.count = 0;
      this.user_id = null;
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_top_authors_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public get_top_authors_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public String getUser_id() {
      return this.user_id;
    }

    public get_top_authors_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case COUNT:
        return Integer.valueOf(getCount());

      case USER_ID:
        return getUser_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREV_CNT:
        return isSetPrev_cnt();
      case COUNT:
        return isSetCount();
      case USER_ID:
        return isSetUser_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_top_authors_args)
        return this.equals((get_top_authors_args)that);
      return false;
    }

    public boolean equals(get_top_authors_args that) {
      if (that == null)
        return false;

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_top_authors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_top_authors_args typedOther = (get_top_authors_args)other;

      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_top_authors_args(");
      boolean first = true;

      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_top_authors_argsStandardSchemeFactory implements SchemeFactory {
      public get_top_authors_argsStandardScheme getScheme() {
        return new get_top_authors_argsStandardScheme();
      }
    }

    private static class get_top_authors_argsStandardScheme extends StandardScheme<get_top_authors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_top_authors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_top_authors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_top_authors_argsTupleSchemeFactory implements SchemeFactory {
      public get_top_authors_argsTupleScheme getScheme() {
        return new get_top_authors_argsTupleScheme();
      }
    }

    private static class get_top_authors_argsTupleScheme extends TupleScheme<get_top_authors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_top_authors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrev_cnt()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_top_authors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
      }
    }

  }

  public static class get_top_authors_result implements org.apache.thrift.TBase<get_top_authors_result, get_top_authors_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_top_authors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_top_authors_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_top_authors_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_top_authors_result.class, metaDataMap);
    }

    public get_top_authors_result() {
    }

    public get_top_authors_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_top_authors_result(get_top_authors_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_top_authors_result deepCopy() {
      return new get_top_authors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_top_authors_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_top_authors_result)
        return this.equals((get_top_authors_result)that);
      return false;
    }

    public boolean equals(get_top_authors_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_top_authors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_top_authors_result typedOther = (get_top_authors_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_top_authors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_top_authors_resultStandardSchemeFactory implements SchemeFactory {
      public get_top_authors_resultStandardScheme getScheme() {
        return new get_top_authors_resultStandardScheme();
      }
    }

    private static class get_top_authors_resultStandardScheme extends StandardScheme<get_top_authors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_top_authors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_top_authors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_top_authors_resultTupleSchemeFactory implements SchemeFactory {
      public get_top_authors_resultTupleScheme getScheme() {
        return new get_top_authors_resultTupleScheme();
      }
    }

    private static class get_top_authors_resultTupleScheme extends TupleScheme<get_top_authors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_top_authors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_top_authors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_stats_args implements org.apache.thrift.TBase<get_stats_args, get_stats_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_stats_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_stats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_stats_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_stats_args.class, metaDataMap);
    }

    public get_stats_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_stats_args(get_stats_args other) {
    }

    public get_stats_args deepCopy() {
      return new get_stats_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_stats_args)
        return this.equals((get_stats_args)that);
      return false;
    }

    public boolean equals(get_stats_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_stats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_stats_args typedOther = (get_stats_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_stats_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_stats_argsStandardSchemeFactory implements SchemeFactory {
      public get_stats_argsStandardScheme getScheme() {
        return new get_stats_argsStandardScheme();
      }
    }

    private static class get_stats_argsStandardScheme extends StandardScheme<get_stats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_stats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_stats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_stats_argsTupleSchemeFactory implements SchemeFactory {
      public get_stats_argsTupleScheme getScheme() {
        return new get_stats_argsTupleScheme();
      }
    }

    private static class get_stats_argsTupleScheme extends TupleScheme<get_stats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_stats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_stats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_stats_result implements org.apache.thrift.TBase<get_stats_result, get_stats_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_stats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_stats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_stats_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_stats_result.class, metaDataMap);
    }

    public get_stats_result() {
    }

    public get_stats_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_stats_result(get_stats_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_stats_result deepCopy() {
      return new get_stats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_stats_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_stats_result)
        return this.equals((get_stats_result)that);
      return false;
    }

    public boolean equals(get_stats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_stats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_stats_result typedOther = (get_stats_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_stats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_stats_resultStandardSchemeFactory implements SchemeFactory {
      public get_stats_resultStandardScheme getScheme() {
        return new get_stats_resultStandardScheme();
      }
    }

    private static class get_stats_resultStandardScheme extends StandardScheme<get_stats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_stats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_stats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_stats_resultTupleSchemeFactory implements SchemeFactory {
      public get_stats_resultTupleScheme getScheme() {
        return new get_stats_resultTupleScheme();
      }
    }

    private static class get_stats_resultTupleScheme extends TupleScheme<get_stats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_stats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_stats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
